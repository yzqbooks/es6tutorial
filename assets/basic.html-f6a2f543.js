import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o,c,a as n,b as e,d as a,e as l}from"./app-bede4f5a.js";const p={},r=n("h1",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),e(" 概述")],-1),t=n("p",null,[n("code",null,"npm"),e("有两种含义。")],-1),u={href:"http://npmjs.org",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>其次，npm 是一个命令行软件，用来在用户的电脑上安装和管理 Node 模块。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p><code>npm</code>不需要单独安装。安装 Node 的时候，会默认一起安装<code>npm</code>。</p><p>但是，默认安装的<code>npm</code>可能不是最新版本。在 Node 安装成功后，最好用下面的命令，更新到最新版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> npm@latest <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，运行下面的命令，查看一下 npm 的版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token parameter variable">--version</span>
<span class="token comment"># 等同于</span>
$ <span class="token function">npm</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面三个命令，也可以用来获取帮助。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看 npm 命令列表</span>
$ <span class="token function">npm</span> <span class="token builtin class-name">help</span>

<span class="token comment"># 查看各个命令的简单用法</span>
$ <span class="token function">npm</span> <span class="token parameter variable">-l</span>

<span class="token comment"># 查看 npm 的配置</span>
$ <span class="token function">npm</span> config list <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm-init" tabindex="-1"><a class="header-anchor" href="#npm-init" aria-hidden="true">#</a> npm init</h2><p><code>npm init</code>用来初始化生成一个新的<code>package.json</code>文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。</p><p>如果使用了<code>-f</code>（代表force）、<code>-y</code>（代表yes），则跳过提问阶段，直接生成一个新的<code>package.json</code>文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="npm-set" tabindex="-1"><a class="header-anchor" href="#npm-set" aria-hidden="true">#</a> npm set</h2><p><code>npm set</code>用来设置环境变量。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token builtin class-name">set</span> init-author-name <span class="token string">&#39;Your name&#39;</span>
$ <span class="token function">npm</span> <span class="token builtin class-name">set</span> init-author-email <span class="token string">&#39;Your email&#39;</span>
$ <span class="token function">npm</span> <span class="token builtin class-name">set</span> init-author-url <span class="token string">&#39;http://yourdomain.com&#39;</span>
$ <span class="token function">npm</span> <span class="token builtin class-name">set</span> init-license <span class="token string">&#39;MIT&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令等于为<code>npm init</code>设置了默认值，以后执行<code>npm init</code>的时候，<code>package.json</code>的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的<code> ~/.npmrc</code>文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行<code>npm config</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token builtin class-name">set</span> save-exact <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令设置加入模块时，<code>package.json</code>将记录模块的确切版本，而不是一个可选的版本范围。</p><h2 id="npm-config" tabindex="-1"><a class="header-anchor" href="#npm-config" aria-hidden="true">#</a> npm config</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token variable">$dir</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令将指定的<code>$dir</code>目录，设为模块的全局安装目录。如果当前有这个目录的写权限，那么运行<code>npm install</code>的时候，就不再需要<code>sudo</code>命令授权了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> config <span class="token builtin class-name">set</span> save-prefix <span class="token string">&#39;~&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令使得<code>npm install --save</code>和<code>npm install --save-dev</code>安装新模块时，允许的版本范围从克拉符号（<code>^</code>）改成波浪号（<code>~</code>），即从允许小版本升级，变成只允许补丁包的升级。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> config <span class="token builtin class-name">set</span> init.author.name <span class="token variable">$name</span>
$ <span class="token function">npm</span> config <span class="token builtin class-name">set</span> init.author.email <span class="token variable">$email</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令指定使用<code>npm init</code>时，生成的<code>package.json</code>文件的字段默认值。</p><h2 id="npm-info" tabindex="-1"><a class="header-anchor" href="#npm-info" aria-hidden="true">#</a> npm info</h2><p><code>npm info</code>命令可以查看每个模块的具体信息。比如，查看underscore模块的信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> info underscore
<span class="token punctuation">{</span> name: <span class="token string">&#39;underscore&#39;</span>,
  description: <span class="token string">&#39;JavaScript\\&#39;</span>s functional programming helper library.<span class="token string">&#39;,
  &#39;</span>dist-tags<span class="token string">&#39;: { latest: &#39;</span><span class="token number">1.5</span>.2<span class="token string">&#39;, stable: &#39;</span><span class="token number">1.5</span>.2<span class="token string">&#39; },
  repository:
   { type: &#39;</span><span class="token function">git</span><span class="token string">&#39;,
     url: &#39;</span>git://github.com/jashkenas/underscore.git<span class="token string">&#39; },
  homepage: &#39;</span>http://underscorejs.org<span class="token string">&#39;,
  main: &#39;</span>underscore.js<span class="token string">&#39;,
  version: &#39;</span><span class="token number">1.5</span>.2<span class="token string">&#39;,
  devDependencies: { phantomjs: &#39;</span><span class="token number">1.9</span>.0-1<span class="token string">&#39; },
  licenses:
   { type: &#39;</span>MIT<span class="token string">&#39;,
     url: &#39;</span>https://raw.github.com/jashkenas/underscore/master/LICENSE<span class="token string">&#39; },
  files:
   [ &#39;</span>underscore.js<span class="token string">&#39;,
     &#39;</span>underscore-min.js<span class="token string">&#39;,
     &#39;</span>LICENSE<span class="token string">&#39; ],
  readmeFilename: &#39;</span>README.md&#39;<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令返回一个JavaScript对象，包含了underscore模块的详细信息。这个对象的每个成员，都可以直接从info命令查询。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> info underscore description
JavaScript&#39;s functional programming helper library.

$ <span class="token function">npm</span> info underscore homepage
http://underscorejs.org

$ <span class="token function">npm</span> info underscore version
<span class="token number">1.5</span>.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm-search" tabindex="-1"><a class="header-anchor" href="#npm-search" aria-hidden="true">#</a> npm search</h2><p><code>npm search</code>命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> search <span class="token operator">&lt;</span>搜索词<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一个例子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> search node-gyp
// NAME                  DESCRIPTION
// autogypi              Autogypi handles dependencies <span class="token keyword">for</span> node-gyp projects.
// grunt-node-gyp        Run node-gyp commands from Grunt.
// gyp-io                Temporary solution to <span class="token builtin class-name">let</span> node-gyp run <span class="token variable"><span class="token variable">\`</span>rebuild<span class="token variable">\`</span></span> under…
// <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm-list" tabindex="-1"><a class="header-anchor" href="#npm-list" aria-hidden="true">#</a> npm list</h2><p><code>npm list</code>命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加上global参数，会列出全局安装的模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> list <span class="token parameter variable">-global</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>npm list</code>命令也可以列出单个模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> list underscore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="npm-link" tabindex="-1"><a class="header-anchor" href="#npm-link" aria-hidden="true">#</a> npm link</h2><p>开发NPM模块的时候，有时我们会希望，边开发边试用，比如本地调试的时候，<code>require(&#39;myModule&#39;)</code>会自动加载本机开发中的模块。Node规定，使用一个模块时，需要将其安装到全局的或项目的<code>node_modules</code>目录之中。对于开发中的模块，解决方法就是在全局的<code>node_modules</code>目录之中，生成一个符号链接，指向模块的本地目录。</p><p><code>npm link</code>就能起到这个作用，会自动建立这个符号链接。</p><p>请设想这样一个场景，你开发了一个模块<code>myModule</code>，目录为<code>src/myModule</code>，你自己的项目<code>myProject</code>要用到这个模块，项目目录为<code>src/myProject</code>。首先，在模块目录（<code>src/myModule</code>）下运行<code>npm link</code>命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>src/myModule$ <span class="token function">npm</span> <span class="token function">link</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令会在NPM的全局模块目录内，生成一个符号链接文件，该文件的名字就是<code>package.json</code>文件中指定的模块名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/path/to/global/node_modules/myModule -<span class="token operator">&gt;</span> src/myModule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个时候，已经可以全局调用<code>myModule</code>模块了。但是，如果我们要让这个模块安装在项目内，还要进行下面的步骤。</p><p>切换到项目目录，再次运行<code>npm link</code>命令，并指定模块名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>src/myProject$ <span class="token function">npm</span> <span class="token function">link</span> myModule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令等同于生成了本地模块的符号链接。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>src/myProject/node_modules/myModule -<span class="token operator">&gt;</span> /path/to/global/node_modules/myModule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，就可以在你的项目中，加载该模块了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;myModule&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样一来，<code>myModule</code>的任何变化，都可以直接反映在<code>myProject</code>项目之中。但是，这样也出现了风险，任何在<code>myProject</code>目录中对<code>myModule</code>的修改，都会反映到模块的源码中。</p><p>如果你的项目不再需要该模块，可以在项目目录内使用<code>npm unlink</code>命令，删除符号链接。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>src/myProject$ <span class="token function">npm</span> unlink myModule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="npm-bin" tabindex="-1"><a class="header-anchor" href="#npm-bin" aria-hidden="true">#</a> npm bin</h2><p><code>npm bin</code>命令显示相对于当前目录的，Node模块的可执行脚本所在的目录（即<code>.bin</code>目录）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 项目根目录下执行</span>
$ <span class="token function">npm</span> bin
./node_modules/.bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm-adduser" tabindex="-1"><a class="header-anchor" href="#npm-adduser" aria-hidden="true">#</a> npm adduser</h2><p><code>npm adduser</code>用于在npmjs.com注册一个用户。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> adduser
Username: YOUR_USER_NAME
Password: YOUR_PASSWORD
Email: YOUR_EMAIL@domain.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm-publish" tabindex="-1"><a class="header-anchor" href="#npm-publish" aria-hidden="true">#</a> npm publish</h2><p><code>npm publish</code>用于将当前模块发布到<code>npmjs.com</code>。执行之前，需要向<code>npmjs.com</code>申请用户名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> adduser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果已经注册过，就使用下面的命令登录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>登录以后，就可以使用<code>npm publish</code>命令发布。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果当前模块是一个beta版，比如<code>1.3.1-beta.3</code>，那么发布的时候需要使用<code>tag</code>参数，将其发布到指定标签，默认的发布标签是<code>latest</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> publish <span class="token parameter variable">--tag</span> beta
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果发布私有模块，模块初始化的时候，需要加上<code>scope</code>参数。只有npm的付费用户才能发布私有模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> init <span class="token parameter variable">--scope</span><span class="token operator">=</span><span class="token operator">&lt;</span>yourscope<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Scopes</code>相当于<code>npm</code>模块的命名空间，<code>scoped package</code>的包名格式为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@scope/project-name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>包名以<code>@</code>开头，介于<code>@</code>和<code>/</code>之间的为<code>scope</code>。</p><p><code>Scoped Package</code>默认为私有模块，付费用户才能发布，不过发布时可以指定为公开模块，就不需要付费。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> publish <span class="token parameter variable">--access</span><span class="token operator">=</span>public
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你的模块是用ES6写的，那么发布的时候，最好转成ES5。首先，需要安装Babel。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev babel<span class="token operator">-</span>cli@<span class="token number">6</span> babel<span class="token operator">-</span>preset<span class="token operator">-</span>es2015@<span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，在<code>package.json</code>里面写入<code>build</code>脚本。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;babel source --presets babel-preset-es2015 --out-dir distribution&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;prepublish&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run build&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面的脚本，会将<code>source</code>目录里面的ES6源码文件，转为<code>distribution</code>目录里面的ES5源码文件。然后，在项目根目录下面创建两个文件<code>.npmignore</code>和<code>.gitignore</code>，分别写入以下内容。</p><div class="language-javascrip line-numbers-mode" data-ext="javascrip"><pre class="language-javascrip"><code>// .npmignore
source

// .gitignore
node_modules
distribution
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="npm-deprecate" tabindex="-1"><a class="header-anchor" href="#npm-deprecate" aria-hidden="true">#</a> npm deprecate</h2><p>如果想废弃某个版本的模块，可以使用<code>npm deprecate</code>命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> deprecate my-thing@<span class="token string">&quot;&lt; 0.2.3&quot;</span> <span class="token string">&quot;critical bug fixed in v0.2.3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行上面的命令以后，小于<code>0.2.3</code>版本的模块的<code>package.json</code>都会写入一行警告，用户安装这些版本时，这行警告就会在命令行显示。</p><h2 id="npm-owner" tabindex="-1"><a class="header-anchor" href="#npm-owner" aria-hidden="true">#</a> npm owner</h2><p>模块的维护者可以发布新版本。<code>npm owner</code>命令用于管理模块的维护者。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出指定模块的维护者</span>
$ <span class="token function">npm</span> owner <span class="token function">ls</span> <span class="token operator">&lt;</span>package name<span class="token operator">&gt;</span>

<span class="token comment"># 新增维护者</span>
$ <span class="token function">npm</span> owner <span class="token function">add</span> <span class="token operator">&lt;</span>user<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>package name<span class="token operator">&gt;</span>

<span class="token comment"># 删除维护者</span>
$ <span class="token function">npm</span> owner <span class="token function">rm</span> <span class="token operator">&lt;</span>user<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>package name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他命令" tabindex="-1"><a class="header-anchor" href="#其他命令" aria-hidden="true">#</a> 其他命令</h2><h3 id="npm-home-npm-repo" tabindex="-1"><a class="header-anchor" href="#npm-home-npm-repo" aria-hidden="true">#</a> npm home，npm repo</h3><p><code>npm home</code>命令可以打开一个模块的主页，<code>npm repo</code>命令则是打开一个模块的代码仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> home <span class="token variable">$package</span>
$ <span class="token function">npm</span> repo <span class="token variable">$package</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个命令不需要模块先安装。</p><h3 id="npm-outdated" tabindex="-1"><a class="header-anchor" href="#npm-outdated" aria-hidden="true">#</a> npm outdated</h3><p><code>npm outdated</code>命令检查当前项目所依赖的模块，是否已经有新版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> outdated

Package        Current  Wanted  Latest  Location
normalize.css    <span class="token number">4.0</span>.0   <span class="token number">4.2</span>.0   <span class="token number">5.0</span>.0  photo-gallery
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它会输出当前版本（current version）、应当安装的版本（wanted version）和最新发布的版本（latest version）。</p><h3 id="npm-prune" tabindex="-1"><a class="header-anchor" href="#npm-prune" aria-hidden="true">#</a> npm prune</h3><p><code>npm prune</code>检查当前项目的<code>node_modules</code>目录中，是否有<code>package.json</code>里面没有提到的模块，然后将所有这些模块输出在命令行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="npm-shrinkwrap" tabindex="-1"><a class="header-anchor" href="#npm-shrinkwrap" aria-hidden="true">#</a> npm shrinkwrap</h3><p><code>npm shrinkwrap</code>的作用是锁定当前项目的以来模块的版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> shrinkwrap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行该命令后，会在当前项目的根目录下生成一个<code>npm-shrinkwrap.json</code>文件，内容是<code>node_modules</code>目录下所有已经安装模块的版本。</p><p>下次运行<code>npm install</code>命令时，<code>npm</code>发现当前目录下有<code>npm-shrinkwrap.json</code>文件，就会只安装里面提到的模块，且版本也会保持一致。</p><h2 id="命令行参数" tabindex="-1"><a class="header-anchor" href="#命令行参数" aria-hidden="true">#</a> 命令行参数</h2><h3 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> --proxy</h3><p><code>--proxy</code>参数允许对<code>npm</code>命令设置代理。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token parameter variable">--proxy</span> http://127.0.0.1:8100 <span class="token function">install</span>
<span class="token comment"># or</span>
$ <span class="token function">npm</span> config <span class="token builtin class-name">set</span> proxy http://127.0.0.1:8100
$ <span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令将通过本机的8100端口代理<code>npm</code>的通信。</p><p>如果设置了环境变量<code>HTTP-PROXY</code>或者<code>http-proxy</code>和<code>HTTPS-PROXY</code>或者<code>https-proxy</code>，那么代理设置将以这个环境变量为准。</p><h2 id="registry" tabindex="-1"><a class="header-anchor" href="#registry" aria-hidden="true">#</a> --registry</h2><p><code>--registry</code>参数设置<code>npm</code>与之通信的远程主机，默认是<code>https://registry.npmjs.org/</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org
<span class="token comment"># or</span>
$ <span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry <span class="token string">&quot;https://registry.npm.taobao.org&quot;</span>
$ <span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令将远程主机设为<code>npm</code>的淘宝镜像。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,123),v={href:"http://substack.net/task_automation_with_npm_run",target:"_blank",rel:"noopener noreferrer"},b={href:"http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/",target:"_blank",rel:"noopener noreferrer"},h={href:"http://justjs.com/posts/npm-link-developing-your-own-npm-modules-without-tears",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/hoodiehq/hoodie-css/blob/feature/build-automation/DEVELOPMENT.md",target:"_blank",rel:"noopener noreferrer"},k={href:"https://medium.com/greenkeeper-blog/one-simple-trick-for-javascript-package-maintainers-to-avoid-breaking-their-user-s-software-and-to-6edf06dc5617#.5omqgsg45",target:"_blank",rel:"noopener noreferrer"},f={href:"https://booker.codes/how-to-build-and-publish-es6-npm-modules-today-with-babel/",target:"_blank",rel:"noopener noreferrer"};function x(y,_){const s=d("ExternalLinkIcon");return o(),c("div",null,[r,t,n("p",null,[e("首先，npm 是一个网站，用来登记和管理 Node 的模块，网址为"),n("a",u,[e("npmjs.org"),a(s)]),e("。")]),m,n("ul",null,[n("li",null,[e("James Halliday, "),n("a",v,[e("task automation with npm run"),a(s)]),e(": npm run命令（package.json文件的script属性）的用法")]),n("li",null,[e("Keith Cirkel, "),n("a",b,[e("How to Use npm as a Build Tool"),a(s)])]),n("li",null,[e("justjs, "),n("a",h,[e("npm link: developing your own npm modules without tears"),a(s)])]),n("li",null,[e("hoodie-css, "),n("a",g,[e("Development Environment Help"),a(s)])]),n("li",null,[e("Stephan Bönnemann, "),n("a",k,[e("How to make use of npm’s package distribution tags to create release channels"),a(s)])]),n("li",null,[e("Alex Booker, "),n("a",f,[e("How to Build and Publish ES6 npm Modules Today, with Babel"),a(s)])])])])}const w=i(p,[["render",x],["__file","basic.html.vue"]]);export{w as default};
