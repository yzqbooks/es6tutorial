import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c as p,a as n,b as s,d as c,e as i}from"./app-bede4f5a.js";const l={},d=i(`<h1 id="node-的-repl-环境" tabindex="-1"><a class="header-anchor" href="#node-的-repl-环境" aria-hidden="true">#</a> Node 的 REPL 环境</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>REPL 是 read-eval-print-loop 的缩写，表示命令行下的 Node 引擎的一个互动式对话环境。用户在其中输入命令，就可以立刻看到结果。read 表示读取用户的输入，eval 表示执行，print 表示输出运行的结果，loop 表示重复执行这个过程。</p><p>命令行下输入<code>node</code>，就可以进入 Node 的 REPL 环境。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span>
<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>REPL 环境的提示符是一个大于号（<code>&gt;</code>）。</p><p>退出 REPL，可以在行首按下 Ctrl + d，或者连续两次按下 Ctrl + c。</p><p>REPL 环境与 Node 脚本的执行环境基本相似，只有一些很小的差异。比如，REPL 环境不是通过脚本触发的，所以没有<code>__dirname</code>和<code>__filename</code>这两个内置变量。</p><p>REPL 会自动加载 Node 的核心模块，比如 fs、http、os、path等，不必<code>require</code>就可以直接使用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> 
<span class="token operator">&gt;</span> fs.read
<span class="token punctuation">[</span>Function<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，REPL 环境可以直接使用<code>fs.read</code>方法，不必先加载<code>fs</code>模块。</p><p><code>node</code>命令的<code>-e</code>参数，实际上就是在 REPL 环境运行代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;console.log(os.platform())&quot;</span>
darwin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> <code>_</code>变量</h2><p>REPL 环境下，有一个内置变量<code>_</code>，上一个表达式的值就存放在这个变量之中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> require<span class="token punctuation">(</span><span class="token string">&#39;./example&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span> some: <span class="token string">&#39;some text&#39;</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;</span> _.some
<span class="token string">&#39;some text&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>require()</code>方法加载了一个脚本，这行表达式的值就自动存放在<code>_</code>里面。</p><p>REPL 允许用户对<code>_</code>变量赋值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> _ <span class="token operator">=</span> <span class="token string">&#39;something&#39;</span>
<span class="token string">&#39;something&#39;</span>
<span class="token operator">&gt;</span> _
<span class="token string">&#39;something&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，我们将<code>something</code>赋值给<code>_</code>，这时<code>_</code>就是一个普通变量了。</p><h2 id="editor-命令" tabindex="-1"><a class="header-anchor" href="#editor-命令" aria-hidden="true">#</a> .editor 命令</h2><p>REPL 环境下，按下回车键，就会提交并执行当前的输入。这对输入多行的代码非常不方便，有两个办法可以输入多行代码。一个是按 Shift + 回车键，另一个是使用<code>.editor</code>命令，键入编辑模式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&gt;</span> <span class="token punctuation">.</span>editor
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入<code>.editor</code>命令后，就可以输入多行文本。输入完成后，按下 Ctrl + d 就会执行这些代码；按下 Ctrl + c 就会取消本次输入，回到输入<code>.editor</code>之前的状态。</p><h2 id="特殊命令" tabindex="-1"><a class="header-anchor" href="#特殊命令" aria-hidden="true">#</a> 特殊命令</h2><p>除了<code>.editor</code>命令以外，REPL 还提供其他一些命令。</p><ul><li>.break：按下 Shift + 回车进入多行文本输入的过程中，输入<code>.break</code>命令会取消本次输入，相当于按下 Ctrl + c。</li><li>.clear：重置 REPL 上下文为空，并清除当前输入的多行文本。</li><li>.exit：关闭当前的 I/O 读写，退出 REPL 环境。</li><li>.help：显示 REPL 环境的特殊命令列表。</li><li>.save：将当前的 REPL 对换保存成一个文件，比如<code>.save ./file/to/save.js</code>。</li><li>.load：加载一个文件进入当前的 REPL 对话，比如<code>.load ./file/to/load.js</code>。</li></ul><h2 id="repl-模块" tabindex="-1"><a class="header-anchor" href="#repl-模块" aria-hidden="true">#</a> repl 模块</h2><p>Node 提供<code>repl</code>模块，可以在脚本中唤起 REPL 环境。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// repl.js</span>
<span class="token keyword">const</span> repl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;repl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Our own prompt</span>
repl<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">&#39;Code:: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>repl.start()</code>方法用于唤起 REPL 环境，该方法的参数是自定义的 REPL 环境提示符。执行上面的脚本，就会出现这个提示符。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> repl.js
Code::
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个模块允许开发者向 REPL 环境注入变量，因此可以做很多事情。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// repl.js</span>
<span class="token keyword">const</span> repl <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;repl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> r <span class="token operator">=</span> repl<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">&#39;Code:: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码向 REPL 环境输入了一个<code>sum</code>函数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> repl.js
Code:: sum<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">6</span>
Code:: .exit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,37),r={href:"https://blog.bloomca.me/2018/07/09/nodejs-repl-in-depth.html",target:"_blank",rel:"noopener noreferrer"};function u(v,k){const a=o("ExternalLinkIcon");return t(),p("div",null,[d,n("ul",null,[n("li",null,[n("a",r,[s("Node.js REPL in Depth"),c(a)]),s(", by Seva Zaikov")])])])}const h=e(l,[["render",u],["__file","repl.html.vue"]]);export{h as default};
