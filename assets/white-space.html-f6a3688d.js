import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a,b as s,d as e,e as i}from"./app-bede4f5a.js";const o={},d=i(`<h1 id="空格" tabindex="-1"><a class="header-anchor" href="#空格" aria-hidden="true">#</a> 空格</h1><h2 id="一、基本规则" tabindex="-1"><a class="header-anchor" href="#一、基本规则" aria-hidden="true">#</a> 一、基本规则</h2><p>HTML 代码的空格通常会被浏览器忽略。</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018073106.jpg" alt=""></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>◡◡hello◡◡world◡◡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面是一行 HTML 代码，文字的前部、内部和后部各有两个空格。为了便于识别，这里使用半圆形符号<code>◡</code>表示空格。</p><p>浏览器的输出结果如下。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，文字的前部和后部的空格都会忽略，内部的连续空格只会算作一个。这就是浏览器处理空格的基本规则。</p><p>如果希望空格原样输出，可以使用<code>&lt;pre&gt;</code>标签。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>◡◡hello◡◡world◡◡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一种方法是，改用 HTML 实体<code>&amp;nbsp;</code>表示空格。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token entity named-entity" title=" ">&amp;nbsp;</span><span class="token entity named-entity" title=" ">&amp;nbsp;</span>hello<span class="token entity named-entity" title=" ">&amp;nbsp;</span><span class="token entity named-entity" title=" ">&amp;nbsp;</span>world<span class="token entity named-entity" title=" ">&amp;nbsp;</span><span class="token entity named-entity" title=" ">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、空格字符" tabindex="-1"><a class="header-anchor" href="#二、空格字符" aria-hidden="true">#</a> 二、空格字符</h2><p>HTML 处理空格的规则，适用于多种字符。除了普通的空格键，还包括制表符（<code>\\t</code>）和换行符（<code>\\r</code>和<code>\\n</code>）。</p><p>浏览器会自动把这些符号转成普通的空格键。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>hello
world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，文本内部包含了一个换行符，浏览器视同为空格，输出结果如下。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以，文本内部的换行是无效的（除非文本放在<code>&lt;pre&gt;</code>标签内）。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码使用<code>&lt;br&gt;</code>标签显式表示换行。</p><h2 id="三、css-的-white-space-属性" tabindex="-1"><a class="header-anchor" href="#三、css-的-white-space-属性" aria-hidden="true">#</a> 三、CSS 的 white-space 属性</h2><p>HTML 语言的空格处理，基本上就是直接过滤。这样的处理过于粗糙，完全忽视了原始文本内部的空格可能是有意义的。</p><p>CSS 提供了一个 white-space 属性，可以提供更精确一点的空格处理方式。该属性共有六个值，除了一个通用的<code>inherit</code>（继承父元素），下面依次介绍剩下的五个值。</p><h3 id="_3-1-white-space-normal" tabindex="-1"><a class="header-anchor" href="#_3-1-white-space-normal" aria-hidden="true">#</a> 3.1 white-space: normal</h3><p><code>white-space</code>属性的默认值为<code>normal</code>，表示浏览器以正常方式处理空格。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>◡◡hellohellohello◡hello
world
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，文本前部有两个空格，内部有一个长单词和一个换行符。</p><p>然后，容器<code>&lt;p&gt;</code>指定一个比较小的宽度。为了便于识别，背景色设为红色。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示效果如下图。</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018073101.png" alt=""></p><p>可以看到，文首的空格被忽略。由于容器太窄，第一个单词溢出容器，然后在后面一个空格处换行。文本内部的换行符自动转成了空格。</p><h3 id="_3-2-white-space-nowrap" tabindex="-1"><a class="header-anchor" href="#_3-2-white-space-nowrap" aria-hidden="true">#</a> 3.2 white-space: nowrap</h3><p><code>white-space</code>属性为<code>nowrap</code>时，不会因为超出容器宽度而发生换行。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示效果如下图。</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018073102.png" alt=""></p><p>所有文本显示为一行，不会换行。</p><h3 id="_3-3-white-space-pre" tabindex="-1"><a class="header-anchor" href="#_3-3-white-space-pre" aria-hidden="true">#</a> 3.3 white-space: pre</h3><p><code>white-space</code>属性为<code>pre</code>时，就按照<code>&lt;pre&gt;</code>标签的方式处理。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示效果如下图。</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018073103.png" alt=""></p><p>上面结果与原始文本完全一致，所有空格和换行符都保留了。</p><h3 id="_3-4-white-space-pre-wrap" tabindex="-1"><a class="header-anchor" href="#_3-4-white-space-pre-wrap" aria-hidden="true">#</a> 3.4 white-space: pre-wrap</h3><p><code>white-space</code>属性为<code>pre-wrap</code>时，基本还是按照<code>&lt;pre&gt;</code>标签的方式处理，唯一区别是超出容器宽度时，会发生换行。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> pre-wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示效果如下图。</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018073104.png" alt=""></p><p>文首的空格、内部的空格和换行符都保留了，超出容器的地方发生了折行。</p><h3 id="_3-5-white-space-pre-line" tabindex="-1"><a class="header-anchor" href="#_3-5-white-space-pre-line" aria-hidden="true">#</a> 3.5 white-space: pre-line</h3><p><code>white-space</code>属性为<code>pre-line</code>时，意为保留换行符。除了换行符会原样输出，其他都与<code>white-space:normal</code>规则一致。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> pre-line<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示效果如下图。</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018073105.png" alt=""></p><p>除了文本内部的换行符没有转成空格，其他都与<code>normal</code>的处理规则一致。这对于诗歌类型的文本很有用。</p><h2 id="四、参考链接" tabindex="-1"><a class="header-anchor" href="#四、参考链接" aria-hidden="true">#</a> 四、参考链接</h2>`,59),r={href:"https://medium.com/@patrickbrosset/when-does-white-space-matter-in-html-b90e8a7cdd33",target:"_blank",rel:"noopener noreferrer"},u={href:"https://css-tricks.com/almanac/properties/w/whitespace/",target:"_blank",rel:"noopener noreferrer"};function h(m,g){const n=p("ExternalLinkIcon");return c(),l("div",null,[d,a("ul",null,[a("li",null,[a("a",r,[s("When does white space matter in HTML?"),e(n)]),s("，by Patrick Brosset")]),a("li",null,[a("a",u,[s("white-space"),e(n)]),s("，by Sara Cope")])])])}const b=t(o,[["render",h],["__file","white-space.html.vue"]]);export{b as default};
