import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-bede4f5a.js";const t={},p=e(`<h1 id="string-h" tabindex="-1"><a class="header-anchor" href="#string-h" aria-hidden="true">#</a> string.h</h1><p><code>string.h</code>主要定义了字符串处理函数和内存操作函数。</p><h2 id="字符串处理函数" tabindex="-1"><a class="header-anchor" href="#字符串处理函数" aria-hidden="true">#</a> 字符串处理函数</h2><p>以下字符串处理函数，详见《字符串》一章。</p><ul><li>strcpy()：复制字符串。</li><li>strncpy()：复制字符串，有长度限制。</li><li>strcat()：连接两个字符串。</li><li>strncat()：连接两个字符串，有长度限制。</li><li>strcmp()：比较两个字符串。</li><li>strncmp()：比较两个字符串，有长度限制。</li><li>strlen()：返回字符串的字节数。</li></ul><h3 id="strchr-strrchr" tabindex="-1"><a class="header-anchor" href="#strchr-strrchr" aria-hidden="true">#</a> strchr()，strrchr()</h3><p><code>strchr()</code>和<code>strrchr()</code>都用于在字符串中查找指定字符。不同之处是，<code>strchr()</code>从字符串开头开始查找，<code>strrchr()</code>从字符串结尾开始查找，函数名里面多出来的那个<code>r</code>表示 reverse（反向）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strchr</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它们都接受两个参数，第一个参数是字符串指针，第二个参数是所要查找的字符。</p><p>一旦找到该字符，它们就会停止查找，并返回指向该字符的指针。如果没有找到，则返回 NULL。</p><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>

p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// p 指向逗号的位置</span>
p <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p 指向 world 里面 o 的位置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="strspn-strcspn" tabindex="-1"><a class="header-anchor" href="#strspn-strcspn" aria-hidden="true">#</a> strspn()，strcspn()</h3><p><code>strspn()</code>用来查找属于指定字符集的字符串长度，<code>strcspn()</code>正好相反，用来查找不属于指定字符集的字符串长度。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">size_t</span> <span class="token function">strspn</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> accept<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">size_t</span> <span class="token function">strcspn</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个函数接受两个参数，第一个参数是源字符串，第二个参数是由指定字符组成的字符串。</p><p><code>strspn()</code>从第一个参数的开头开始查找，一旦发现第一个不属于指定字符集范围的字符，就停止查找，返回到目前为止的字符串长度。如果始终没有不在指定字符集的字符，则返回第一个参数字符串的长度。</p><p><code>strcspn()</code>则是一旦发现第一个属于指定字符集范围的字符，就停止查找，返回到目前为止的字符串长度。如果始终没有发现指定字符集的字符，则返回第一个参数字符串的长度。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>

n <span class="token operator">=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">&quot;aeiou&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// n == 0</span>

n <span class="token operator">=</span> <span class="token function">strcspn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">&quot;aeiou&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n == 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，第一个<code>n</code>等于0，因为0号位置的字符<code>h</code>就不属于指定字符集<code>aeiou</code>，可以理解为开头有0个字符属于指定字符集。第二个<code>n</code>等于1，因为1号位置的字符<code>e</code>属于指定字符集<code>aeiou</code>，可以理解为开头有1个字符不属于指定字符集。</p><h3 id="strpbrk" tabindex="-1"><a class="header-anchor" href="#strpbrk" aria-hidden="true">#</a> strpbrk()</h3><p><code>strpbrk()</code>在字符串中搜索指定字符集的任一个字符。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strpbrk</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数，第一个参数是源字符串，第二个参数是由指定字符组成的字符串。</p><p>它返回一个指向第一个匹配字符的指针，如果未找到匹配字符，则返回 NULL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> s2 <span class="token operator">=</span> <span class="token string">&quot;dow!&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">strpbrk</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;o, world!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，指定字符集是“dow!”，那么<code>s1</code>里面第一个匹配字符是“Hello”的“o”，所以指针<code>p</code>指向这个字符。输出的话，就会输出从这个字符直到字符串末尾的“o, world!”。</p><h3 id="strstr" tabindex="-1"><a class="header-anchor" href="#strstr" aria-hidden="true">#</a> strstr()</h3><p><code>strstr()</code>在一个字符串里面，查找另一个字符串。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strstr</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> substr
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它接受两个参数，第一个参数是源字符串，第二个参数是所要查找的子字符串。</p><p>如果匹配成功，就返回一个指针，指向源字符串里面的子字符串。如果匹配失败，就返回 NULL，表示无法找到子字符串。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;The quick brown fox jumped over the lazy dogs.&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;lazy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">?</span> <span class="token string">&quot;null&quot;</span><span class="token operator">:</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;lazy dogs.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>strstr()</code>用来在源字符串<code>str</code>里面，查找子字符串<code>lazy</code>。从返回的指针到字符串结尾，就是“lazy dogs.”。</p><h3 id="strtok" tabindex="-1"><a class="header-anchor" href="#strtok" aria-hidden="true">#</a> strtok()</h3><p><code>strtok()</code>用来将一个字符串按照指定的分隔符（delimiter），分解成一系列词元（tokens）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> delim<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数，第一个参数是待拆分的字符串，第二个参数是指定的分隔符。</p><p>它返回一个指针，指向分解出来的第一个词元，并将词元结束之处的分隔符替换成字符串结尾标志<code>\\0</code>。如果没有待分解的词元，它返回 NULL。</p><p>如果要遍历所有词元，就必须循环调用，参考下面的例子。</p><p><code>strtok()</code>的第一个参数如果是 NULL，则表示从上一次<code>strtok()</code>分解结束的位置，继续往下分解。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;This is a sentence with 7 tokens&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> tokenPtr <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>tokenPtr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> tokenPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tokenPtr <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例将源字符串按照空格，分解词元。它的输出结果如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>This
is
a
sentence
with
<span class="token number">7</span>
tokens
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>strtok()</code>会修改原始字符串，将所有分隔符都替换成字符串结尾符号<code>\\0</code>。因此，最好生成一个原始字符串的拷贝，然后再对这个拷贝执行<code>strtok()</code>。</p><h3 id="strcoll" tabindex="-1"><a class="header-anchor" href="#strcoll" aria-hidden="true">#</a> strcoll()</h3><p><code>strcoll()</code>用于比较两个启用了本地化设置的字符串，用法基本与<code>strcmp()</code>相同。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">strcoll</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请看下面的示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 报告 é &gt; f</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">&quot;é&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

<span class="token comment">// 报告 é &lt; f</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strcoll</span><span class="token punctuation">(</span><span class="token string">&quot;é&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例比较带重音符号的<code>é</code>与<code>f</code>，<code>strcmp()</code>会返回<code>é</code>大于<code>f</code>，而<code>strcoll()</code>就会正确识别<code>é</code>排在<code>f</code>前面，所以小于<code>f</code>。注意，在比较之前，需要使用<code>setlocale(LC_ALL, &quot;&quot;)</code>，启用本地化设置。</p><h3 id="strxfrm" tabindex="-1"><a class="header-anchor" href="#strxfrm" aria-hidden="true">#</a> strxfrm()</h3><p><code>strxfrm()</code>将一个本地化字符串转成可以使用<code>strcmp()</code>进行比较的形式，相当于<code>strcoll()</code>内部的第一部分操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">size_t</span> <span class="token function">strxfrm</span><span class="token punctuation">(</span>
  <span class="token keyword">char</span> <span class="token operator">*</span> restrict s1<span class="token punctuation">,</span> 
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> restrict s2<span class="token punctuation">,</span> 
  <span class="token class-name">size_t</span> n
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它接受三个参数，将第二个参数<code>s2</code>转为可以使用<code>strcmp()</code>比较的形式，并将结果存入第一个参数<code>s1</code>。第三个参数<code>n</code>用来限定写入的字符数，防止超出<code>s1</code>的边界。</p><p>它返回转换后的字符串长度，不包括结尾的终止符。</p><p>如果第一个参数是 NULL，第三个参数是0，则不进行实际的转换，只返回转换后所需的字符串长度。</p><p>下面的示例是用这个函数自己实现一个<code>strcoll()</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">my_strcoll</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strxfrm</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strxfrm</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">char</span> <span class="token operator">*</span>d1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>d2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">strxfrm</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> len1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strxfrm</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">free</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，先为两个进行比较的本地化字符串，分配转换后的存储空间，使用<code>strxfrm()</code>将它们转为可比较的形式，再用<code>strcmp()</code>进行比较。</p><h3 id="strerror" tabindex="-1"><a class="header-anchor" href="#strerror" aria-hidden="true">#</a> strerror()</h3><p><code>strerror()</code>函数返回特定错误的说明字符串。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strerror</span><span class="token punctuation">(</span><span class="token keyword">int</span> errornum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的参数是错误的编号，由<code>errno.h</code>定义。返回值是一个指向说明字符串的指针。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 输出 No such file or directory</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例输出2号错误的说明字符“No such file or directory“。</p><p>下面的例子是自定义报错信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;NONEXISTENT_FILE.TXT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> errmsg <span class="token operator">=</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error %d opening file: %s\\n&quot;</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> errmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，通过<code>strerror(errno)</code>拿到当前的默认报错信息，其中<code>errno</code>是<code>errno.h</code>定义的宏，表示当前的报错编号。然后，再输出一条自定义的报错信息。</p><h2 id="内存操作函数" tabindex="-1"><a class="header-anchor" href="#内存操作函数" aria-hidden="true">#</a> 内存操作函数</h2><p>以下内存操作函数，详见《内存管理》一章。</p><ul><li>memcpy()：内存复制函数。</li><li>memmove()：内存复制函数（允许重叠）。</li><li>memcmp()：比较两个内存区域。</li></ul><h3 id="memchr" tabindex="-1"><a class="header-anchor" href="#memchr" aria-hidden="true">#</a> memchr()</h3><p><code>memchr()</code>用于在内存区域中查找指定字符。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">memchr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受三个参数，第一个参数是内存区域的指针，第二个参数是所要查找的字符，第三个参数是内存区域的字节长度。</p><p>一旦找到，它就会停止查找，并返回指向该位置的指针。如果直到检查完指定的字节数，依然没有发现指定字符，则返回 NULL。</p><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>

p <span class="token operator">=</span> <span class="token function">memchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">&#39;!&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p 指向感叹号的位置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="memset" tabindex="-1"><a class="header-anchor" href="#memset" aria-hidden="true">#</a> memset()</h3><p><code>memset()</code>将一段内存全部格式化为指定值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的第一个参数是一个指针，指向内存区域的开始位置，第二个参数是待写入的字符值，第三个参数是一个整数，表示需要格式化的字节数。它返回第一个参数（指针）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，p 是一个指针，指向一个长度为 N 个字节的内存区域。<code>memset()</code>将该块内存区域的每个字节，都改写为空格字符。</p><p>下面是另一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> string1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;BBBBBBBBBBBBBB&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 bbbbbbbBBBBBBB</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>string1<span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>memset()</code>的一个重要用途，就是将数组成员全部初始化为0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">memset</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是将 Struct 结构都初始化为0的例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">banana</span> <span class="token punctuation">{</span>
  <span class="token keyword">float</span> ripeness<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>peel_color<span class="token punctuation">;</span>
  <span class="token keyword">int</span> grams<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">banana</span> b<span class="token punctuation">;</span>

<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

b<span class="token punctuation">.</span>ripeness <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">;</span>     <span class="token comment">// True</span>
b<span class="token punctuation">.</span>peel_color <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// True</span>
b<span class="token punctuation">.</span>grams <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">// True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例，将 Struct banana 的实例 b 的所有属性都初始化为0。</p><h2 id="其他函数" tabindex="-1"><a class="header-anchor" href="#其他函数" aria-hidden="true">#</a> 其他函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">size_t</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,94),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","string.h.html.vue"]]);export{d as default};
