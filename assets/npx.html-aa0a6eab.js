import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as r,c as l,a as e,b as a,d as s,e as d}from"./app-bede4f5a.js";const o={},p=d(`<h1 id="npx-使用教程" tabindex="-1"><a class="header-anchor" href="#npx-使用教程" aria-hidden="true">#</a> npx 使用教程</h1><p>npm 从5.2版开始，增加了 npx 命令，它有很多用处。</p><p><img src="https://www.wangbase.com/blogimg/asset/201902/bg2019020901.jpg" alt=""></p><p>Node 自带 npm 模块，所以可以直接使用 npx 命令。万一不能用，就要手动安装一下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> npx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="调用项目安装的模块" tabindex="-1"><a class="header-anchor" href="#调用项目安装的模块" aria-hidden="true">#</a> 调用项目安装的模块</h2>`,6),t={href:"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html",target:"_blank",rel:"noopener noreferrer"},h=d(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> mocha
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),u={href:"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"scripts",-1),v=d(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 项目的根目录下执行</span>
$ node-modules/.bin/mocha <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>npx 就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx mocha <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>npx 的原理很简单，就是运行的时候，会到<code>node_modules/.bin</code>路径和环境变量<code>$PATH</code>里面，检查命令是否存在。</p><p>由于 npx 会检查环境变量<code>$PATH</code>，所以系统命令也可以调用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 等同于 ls</span>
$ npx <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，Bash 内置的命令不在<code>$PATH</code>里面，所以不能用。比如，<code>cd</code>是 Bash 命令，因此就不能用<code>npx cd</code>。</p><h2 id="避免全局安装模块" tabindex="-1"><a class="header-anchor" href="#避免全局安装模块" aria-hidden="true">#</a> 避免全局安装模块</h2><p>除了调用项目内部模块，npx 还能避免全局安装的模块。比如，<code>create-react-app</code>这个模块是全局安装，npx 可以运行它，而且不进行全局安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx create-react-app my-react-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码运行时，npx 将<code>create-react-app</code>下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载<code>create-react-app</code>。</p><p>下载全局模块时，npx 允许指定版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx uglify-js@3.1.0 main.js <span class="token parameter variable">-o</span> ./dist/main.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码指定使用 3.1.0 版本的<code>uglify-js</code>压缩脚本。</p><p>注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装<code>http-server</code>模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx http-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="no-install-参数和-ignore-existing-参数" tabindex="-1"><a class="header-anchor" href="#no-install-参数和-ignore-existing-参数" aria-hidden="true">#</a> <code>--no-install</code> 参数和<code>--ignore-existing</code> 参数</h2><p>如果想让 npx 强制使用本地模块，不下载远程模块，可以使用<code>--no-install</code>参数。如果本地不存在该模块，就会报错。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx --no-install http-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用<code>--ignore-existing</code>参数。比如，本地已经全局安装了<code>create-react-app</code>，但还是想使用远程模块，就用这个参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx --ignore-existing create-react-app my-react-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用不同版本的-node" tabindex="-1"><a class="header-anchor" href="#使用不同版本的-node" aria-hidden="true">#</a> 使用不同版本的 node</h2>`,22),b={href:"https://www.npmjs.com/package/node",target:"_blank",rel:"noopener noreferrer"},g=d(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx node@0.12.8 <span class="token parameter variable">-v</span>
v0.12.8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm 下载这个版本的 node，使用后再删掉。</p><p>某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。</p><h2 id="p-参数" tabindex="-1"><a class="header-anchor" href="#p-参数" aria-hidden="true">#</a> <code>-p</code> 参数</h2><p><code>-p</code>参数用于指定 npx 所要安装的模块，所以上一节的命令可以写成下面这样。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx <span class="token parameter variable">-p</span> node@0.12.8 <span class="token function">node</span> <span class="token parameter variable">-v</span> 
v0.12.8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令先指定安装<code>node@0.12.8</code>，然后再执行<code>node -v</code>命令。</p><p><code>-p</code>参数对于需要安装多个模块的场景很有用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx <span class="token parameter variable">-p</span> lolcatjs <span class="token parameter variable">-p</span> cowsay <span class="token punctuation">[</span>command<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="c-参数" tabindex="-1"><a class="header-anchor" href="#c-参数" aria-hidden="true">#</a> -c 参数</h2><p>如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx <span class="token parameter variable">-p</span> lolcatjs <span class="token parameter variable">-p</span> cowsay <span class="token string">&#39;cowsay hello | lolcatjs&#39;</span>
<span class="token comment"># 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>cowsay hello | lolcatjs</code>执行时会报错，原因是第一项<code>cowsay</code>由 npx 解释，而第二项命令<code>localcatjs</code>由 Shell 解释，但是<code>lolcatjs</code>并没有全局安装，所以报错。</p><p><code>-c</code>参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx <span class="token parameter variable">-p</span> lolcatjs <span class="token parameter variable">-p</span> cowsay <span class="token parameter variable">-c</span> <span class="token string">&#39;cowsay hello | lolcatjs&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-c</code>参数的另一个作用，是将环境变量带入所要执行的命令。举例来说，npm 提供当前项目的一些环境变量，可以用下面的命令查看。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> run <span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> npm_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-c</code>参数可以把这些 npm 的环境变量带入 npx 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx <span class="token parameter variable">-c</span> <span class="token string">&#39;echo &quot;$npm_package_name&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码会输出当前项目的项目名。</p><h2 id="执行-github-源码" tabindex="-1"><a class="header-anchor" href="#执行-github-源码" aria-hidden="true">#</a> 执行 GitHub 源码</h2><p>npx 还可以执行 GitHub 上面的模块源码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 执行 Gist 代码</span>
$ npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32

<span class="token comment"># 执行仓库代码</span>
$ npx github:piuccio/cowsay hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，远程代码必须是一个模块，即必须包含<code>package.json</code>和入口脚本。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,25),x={href:"https://www.npmjs.com/package/npx",target:"_blank",rel:"noopener noreferrer"},k={href:"https://alligator.io/workflow/npx/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b",target:"_blank",rel:"noopener noreferrer"};function _(w,$){const n=c("ExternalLinkIcon");return r(),l("div",null,[p,e("p",null,[a("npx 想要解决的主要问题，就是调用项目内部安装的模块。比如，项目内部安装了测试工具 "),e("a",t,[a("Mocha"),s(n)]),a("。")]),h,e("p",null,[a("一般来说，调用 Mocha ，只能在项目脚本和 package.json 的"),e("a",u,[m,s(n)]),a("字段里面， 如果想在命令行下调用，必须像下面这样。")]),v,e("p",null,[a("利用 npx 可以下载模块这个特点，可以指定某个版本的 Node 运行脚本。它的窍门就是使用 npm 的 "),e("a",b,[a("node 模块"),s(n)]),a("。")]),g,e("ul",null,[e("li",null,[e("a",x,[a("npx"),s(n)])]),e("li",null,[e("a",k,[a("Speed Up Your npm Workflow With npx"),s(n)])]),e("li",null,[e("a",f,[a("Introducing npx: an npm package runner"),s(n)])])])])}const N=i(o,[["render",_],["__file","npx.html.vue"]]);export{N as default};
