import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as n,e as a}from"./app-bede4f5a.js";const _={},l=a(`<h1 id="stdint-h" tabindex="-1"><a class="header-anchor" href="#stdint-h" aria-hidden="true">#</a> stdint.h</h1><h2 id="固定宽度的整数类型" tabindex="-1"><a class="header-anchor" href="#固定宽度的整数类型" aria-hidden="true">#</a> 固定宽度的整数类型</h2><p>stdint.h 定义了一些固定宽度的整数类型别名，主要有下面三类。</p><ul><li>宽度完全确定的整数<code>intN_t</code>，比如<code>int32_t</code>。</li><li>宽度不小于某个大小的整数<code>int_leastN_t</code>，比如<code>int_least8_t</code>。</li><li>宽度不小于某个大小、并且处理速度尽可能快的整数<code>int_fastN_t</code>，比如<code>int_fast64_t</code>。</li></ul><p>上面所有类型都是有符号的，类型名前面可以加一个前缀<code>u</code>，表示无符号类型，比如<code>uint16_t</code>。</p><p>C 语言标准要求定义以下类型。</p><ul><li>int8_t（可选） uint8_t（可选）</li><li>int16_t（可选） uint16_t（可选）</li><li>int32_t（可选） uint32_t（可选）</li><li>int64_t（可选） uint64_t（可选）</li><li>int_least8_t uint_least8_t</li><li>int_least16_t uint_least16_t</li><li>int_least32_t uint_least32_t</li><li>int_least64_t uint_least64_t</li><li>int_fast8_t uint_fast8_t</li><li>int_fast16_t uint_fast16_t</li><li>int_fast32_t uint_fast32_t</li><li>int_fast64_t uint_fast64_t</li></ul><h2 id="最大宽度的整数类型" tabindex="-1"><a class="header-anchor" href="#最大宽度的整数类型" aria-hidden="true">#</a> 最大宽度的整数类型</h2><p>以下两个类型表示当前系统可用的最大宽度整数。</p><ul><li>intmax_t</li><li>uintmax_t</li></ul><p>如果想要尽可能大的整数时，可以使用上面类型。</p><h2 id="固定宽度的整数常量" tabindex="-1"><a class="header-anchor" href="#固定宽度的整数常量" aria-hidden="true">#</a> 固定宽度的整数常量</h2><p>以下一些带参数的宏，可以生成固定宽度的整数常量。</p><ul><li>INT8_C(x) UINT8_C(x)</li><li>INT16_C(x) UINT16_C(x)</li><li>INT32_C(x) UINT32_C(x)</li><li>INT64_C(x) UINT64_C(x)</li><li>INTMAX_C(x) UINTMAX_C(x)</li></ul><p>下面是用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint16_t</span> x <span class="token operator">=</span> <span class="token function">UINT16_C</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">intmax_t</span> y <span class="token operator">=</span> <span class="token function">INTMAX_C</span><span class="token punctuation">(</span><span class="token number">3490</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="固定宽度的整数极限值" tabindex="-1"><a class="header-anchor" href="#固定宽度的整数极限值" aria-hidden="true">#</a> 固定宽度的整数极限值</h2><p>下面一些宏代表了固定宽度的整数最大值和最小值。</p><ul><li>INT8_MAX INT8_MIN UINT8_MAX</li><li>INT16_MAX INT16_MIN UINT16_MAX</li><li>INT32_MAX INT32_MIN UINT32_MAX</li><li>INT64_MAX INT64_MIN UINT64_MAX</li><li>INT_LEAST8_MAX INT_LEAST8_MIN UINT_LEAST8_MAX</li><li>INT_LEAST16_MAX INT_LEAST16_MIN UINT_LEAST16_MAX</li><li>INT_LEAST32_MAX INT_LEAST32_MIN UINT_LEAST32_MAX</li><li>INT_LEAST64_MAX INT_LEAST64_MIN UINT_LEAST64_MAX</li><li>INT_FAST8_MAX INT_FAST8_MIN UINT_FAST8_MAX</li><li>INT_FAST16_MAX INT_FAST16_MIN UINT_FAST16_MAX</li><li>INT_FAST32_MAX INT_FAST32_MIN UINT_FAST32_MAX</li><li>INT_FAST64_MAX INT_FAST64_MIN UINT_FAST64_MAX</li><li>INTMAX_MAX INTMAX_MIN UINTMAX_MAX</li></ul><p>注意，所有无符号整数类型的最小值都为0，所以没有对应的宏。</p><h2 id="占位符" tabindex="-1"><a class="header-anchor" href="#占位符" aria-hidden="true">#</a> 占位符</h2><p>C 语言还在头文件 inttypes.h 里面，为上面类型定义了<code>printf()</code>和<code>scanf()</code>的占位符，参见《inttypes.h》一章。</p>`,22),e=[l];function s(c,d){return i(),n("div",null,e)}const N=t(_,[["render",s],["__file","stdint.h.html.vue"]]);export{N as default};
