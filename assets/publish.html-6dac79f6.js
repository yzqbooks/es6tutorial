import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as i,c as p,a,b as n,d as o,e as c}from"./app-bede4f5a.js";const d={},l=c(`<h1 id="发布" tabindex="-1"><a class="header-anchor" href="#发布" aria-hidden="true">#</a> 发布</h1><h2 id="发布标签" tabindex="-1"><a class="header-anchor" href="#发布标签" aria-hidden="true">#</a> 发布标签</h2><p>npm 支持为版本打上标签，这叫做发布标签（dist-tag）。如果不指定发布标签，默认就是<code>latest</code>。用户下载模块时，默认安装的就是<code>latest</code>标签指向的版本。</p><p>新发布的版本，如果不希望用户默认安装，就需要自己指定标签。举例来说，某个模块的最新版本是4.6.12，但是有些用户还在使用老版本3.2.13。现在，你修正了一些老版本的 bug，发了一个新版本3.2.14。如果不指定发布标签，3.2.14的发布标签就是<code>latest</code>，因为它是最新发布的。</p><p>这导致的后果就是，用户执行下面的命令，进行默认安装时，会出现非预期的结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上面命令时，用户会默认安装3.2.14，而不是4.6.12。因为<code>latest</code>标签指向3.2.14。</p><p>解决方法就是，发布3.2.14的时候，为它打上一个发布标签。这样，3.2.14就不会占用<code>latest</code>标签。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> publish <span class="token parameter variable">--tag</span><span class="token operator">=</span>previous
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上面的命令后，3.2.14的发布标签就是<code>previous</code>。</p><p>安装时，必须指定这个标签，才能安装到3.2.14。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>@previous
<span class="token comment"># 或者</span>
$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> <span class="token parameter variable">--tag</span> previous
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令的两种语法都可以指定标签名。由于<code>latest</code>是默认标签，所以可以省略。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>
<span class="token comment"># 等同于</span>
$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一种常见的做法是，发布下一个大版本时，指定它的发布标签为<code>next</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 发布</span>
$ <span class="token function">npm</span> publish <span class="token parameter variable">--tag</span><span class="token operator">=</span>next

<span class="token comment"># 安装</span>
$ <span class="token function">npm</span> publish <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>@next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，用户默认安装的还是主流版本，但是愿意尝鲜的用户，可以使用新版本。</p><p>等到新版本足够可靠以后，再把<code>latest</code>标签指定到新版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> dist-tag <span class="token function">add</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>@5.0.1 latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果希望把默认的发布标签改掉，不再是<code>latest</code>，可以写在<code>package.json</code>里面。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  …
  <span class="token string">&quot;publishConfig&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;tag&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;next&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的设置，可以使得发布新版本时，发布标签默认为<code>next</code>。</p><p>常用的发布标签有<code>stable</code>、<code>beta</code>、<code>dev</code>等等。</p><h2 id="npm-dist-tag-命令" tabindex="-1"><a class="header-anchor" href="#npm-dist-tag-命令" aria-hidden="true">#</a> npm dist-tag 命令</h2><p><code>npm dist-tag</code>命令用来管理发布标签。</p><p><code>npm dist-tag ls</code>用来列出所有的发布标签。如果不指定模块名，那么默认为当前模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> dist-tag <span class="token function">ls</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>npm dist-tag add</code>用来为一个版本指定发布标签。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> dist-tag <span class="token function">add</span> <span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>npm dist-tag rm</code>用来移除一个发布标签。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> dist-tag <span class="token function">rm</span> <span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="gitignore-npmignore" tabindex="-1"><a class="header-anchor" href="#gitignore-npmignore" aria-hidden="true">#</a> .gitignore，.npmignore</h2><p>如果当前项目的根目录下有<code>.gitignore</code>文件，该文件里面的路径不会打包进入 npm 模块。</p><p>如果有<code>.npmignore</code>文件，那么 npm 将忽略<code>.gitignore</code>文件，不将<code>.npmignore</code>文件里面的路径打包进入 npm 模块。如果有些文件不希望进入 npm 模块（比如测试用例），但是希望进入 Git 仓库，那么可以使用<code>.npmignore</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># .gitignore</span>
node_modules

<span class="token comment"># .npmignore</span>
node_modules
tests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<code>package.json</code>的<code>files</code>字段，也可以用来排除进入 npm 模块的文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;index.js&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>npm 会最优先排除<code>files</code>字段里面的文件。另外，无论如何设置，<code>package.json</code>文件都会进入 npm 模块。</p><h2 id="npm-pack-命令" tabindex="-1"><a class="header-anchor" href="#npm-pack-命令" aria-hidden="true">#</a> npm pack 命令</h2><p><code>npm pack</code>命令用来打包当前项目，打包后的文件会在当前目录下生成，文件名为<code>&lt;name&gt;-&lt;version&gt;.tgz</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> pack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果多次运行该命令，每次生成的包将覆盖前一次的包。</p><p><code>npm pack</code>可以接受路径作为参数，打包该路径下的模块。如果没有提供任何参数，将打包当前目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> pack foo/bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>--dry-run</code>参数会输出打包的内容，而不生成打包文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> pack --dry-run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,47),r={href:"https://blog.greenkeeper.io/one-simple-trick-for-javascript-package-maintainers-to-avoid-breaking-their-user-s-software-and-to-6edf06dc5617",target:"_blank",rel:"noopener noreferrer"};function u(m,v){const s=t("ExternalLinkIcon");return i(),p("div",null,[l,a("ul",null,[a("li",null,[a("a",r,[n("One simple trick for JavaScript package maintainers"),o(s)]),n(", by Stephan Bönnemann")])])])}const k=e(d,[["render",u],["__file","publish.html.vue"]]);export{k as default};
