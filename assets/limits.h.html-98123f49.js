import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,e as a}from"./app-bede4f5a.js";const i={},o=a(`<h1 id="limits-h" tabindex="-1"><a class="header-anchor" href="#limits-h" aria-hidden="true">#</a> limits.h</h1><p><code>limits.h</code>提供了用来定义各种整数类型（包括字符类型）取值范围的宏。</p><ul><li><code>CHAR_BIT</code>：每个字符包含的二进制位数。</li><li><code>SCHAR_MIN</code>：signed char 类型的最小值。</li><li><code>SCHAR_MAX</code>：signed char 类型的最大值。</li><li><code>UCHAR_MAX</code>：unsiged char 类型的最大值。</li><li><code>CHAR_MIN</code>：char 类型的最小值。</li><li><code>CHAR_MAX</code>：char 类型的最大值。</li><li><code>MB_LEN_MAX</code>：多字节字符最多包含的字节数。</li><li><code>SHRT_MIN</code>：short int 类型的最小值。</li><li><code>SHRT_MAX</code>：short int 类型的最大值。</li><li><code>USHRT_MAX</code>：unsigned short int 类型的最大值。</li><li><code>INT_MIN</code>：int 类型的最小值。</li><li><code>INT_MAX</code>：int 类型的最大值。</li><li><code>UINT_MAX</code>：unsigned int 类型的最大值。</li><li><code>LONG_MIN</code>：long int 类型的最小值。</li><li><code>LONG_MAX</code>：long int 类型的最大值。</li><li><code>ULONG_MAX</code>：unsigned long int 类型的最大值。</li><li><code>LLONG_MIN</code>：long long int 类型的最小值。</li><li><code>LLONG_MAX</code>：long long int 类型的最大值。</li><li><code>ULLONG_MAX</code>：unsigned long long int 类型的最大值。</li></ul><p>下面的示例是使用预处理指令判断，int 类型是否可以用来存储大于 100000 的数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">INT_MAX <span class="token operator">&lt;</span> <span class="token number">100000</span></span></span>
  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token expression"><span class="token keyword">int</span> type is too small</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，如果 int 类型太小，预处理器会显示一条出错消息。</p><p>可以使用<code>limit.h</code>里面的宏，为类型别名选择正确的底层类型。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">INT_MAX <span class="token operator">&gt;=</span> <span class="token number">100000</span></span></span>
  <span class="token keyword">typedef</span> <span class="token keyword">int</span> Quantity<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">int</span> Quantity<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，如果整数类型的最大值（<code>INT_MAX</code>）不小于100000，那么类型别名<code>Quantity</code>指向<code>int</code>，否则就指向<code>long int</code>。</p>`,9),c=[o];function l(d,t){return s(),n("div",null,c)}const k=e(i,[["render",l],["__file","limits.h.html.vue"]]);export{k as default};
