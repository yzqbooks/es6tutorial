import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as n}from"./app-bede4f5a.js";const i={},d=n(`<h1 id="ssh-客户端" tabindex="-1"><a class="header-anchor" href="#ssh-客户端" aria-hidden="true">#</a> SSH 客户端</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>OpenSSH 的客户端是二进制程序 ssh。它在 Linux/Unix 系统的位置是<code>/usr/local/bin/ssh</code>，Windows 系统的位置是<code>\\Program Files\\OpenSSH\\bin\\ssh.exe</code>。</p><p>Linux 系统一般都自带 ssh，如果没有就需要安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Ubuntu 和 Debian</span>
$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-client

<span class="token comment"># CentOS 和 Fedora</span>
$ <span class="token function">sudo</span> dnf <span class="token function">install</span> openssh-clients
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装以后，可以使用<code>-V</code>参数输出版本号，查看一下是否安装成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-V</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><p>ssh 最常见的用途就是登录服务器，这要求服务器安装并正在运行 SSH 服务器软件。</p><p>ssh 登录服务器的命令如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token function">hostname</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令中，<code>hostname</code>是主机名，它可以是域名，也可能是 IP 地址或局域网内部的主机名。不指定用户名的情况下，将使用客户端的当前用户名，作为远程服务器的登录用户名。如果要指定用户名，可以采用下面的语法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> user@hostname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令中，用户名和主机名写在一起了，之间使用<code>@</code>分隔。</p><p>用户名也可以使用<code>ssh</code>的<code>-l</code>参数指定，这样的话，用户名和主机名就不用写在一起了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-l</span> username <span class="token function">host</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ssh 默认连接服务器的22端口，<code>-p</code>参数可以指定其他端口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-p</span> <span class="token number">8821</span> foo.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令连接服务器<code>foo.com</code>的8821端口。</p><h2 id="连接流程" tabindex="-1"><a class="header-anchor" href="#连接流程" aria-hidden="true">#</a> 连接流程</h2><p>ssh 连接远程服务器后，首先有一个验证过程，验证远程服务器是否为陌生地址。</p><p>如果是第一次连接某一台服务器，命令行会显示一段文字，表示不认识这台机器，提醒用户确认是否需要连接。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>The authenticity of <span class="token function">host</span> <span class="token string">&#39;foo.com (192.168.121.111)&#39;</span> can&#39;t be established.
ECDSA key fingerprint is SHA256:Vybt22mVXuNuB5unE++yowF7lgA/9/2bLSiO3qmYWBY.
Are you sure you want to <span class="token builtin class-name">continue</span> connecting <span class="token punctuation">(</span>yes/no<span class="token punctuation">)</span>?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段文字告诉用户，<code>foo.com</code>这台服务器的指纹是陌生的，让用户选择是否要继续连接（输入 yes 或 no）。</p><p>所谓“服务器指纹”，指的是 SSH 服务器公钥的哈希值。每台 SSH 服务器都有唯一一对密钥，用于跟客户端通信，其中公钥的哈希值就可以用来识别服务器。</p><p>下面的命令可以查看某个公钥的指纹。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-l</span> <span class="token parameter variable">-f</span> /etc/ssh/ssh_host_ecdsa_key.pub
<span class="token number">256</span> da:24:43:0b:2e:c1:3f:a1:84:13:92:01:52:b4:84:ff   <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中，<code>ssh-keygen -l -f</code>命令会输出公钥<code>/etc/ssh/ssh_host_ecdsa_key.pub</code>的指纹。</p><p>ssh 会将本机连接过的所有服务器公钥的指纹，都储存在本机的<code>~/.ssh/known_hosts</code>文件中。每次连接服务器时，通过该文件判断是否为陌生主机（陌生公钥）。</p><p>在上面这段文字后面，输入<code>yes</code>，就可以将当前服务器的指纹也储存在本机<code>~/.ssh/known_hosts</code>文件中，并显示下面的提示。以后再连接的时候，就不会再出现警告了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Warning: Permanently added <span class="token string">&#39;foo.com (192.168.121.111)&#39;</span> <span class="token punctuation">(</span>RSA<span class="token punctuation">)</span> to the list of known hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，客户端就会跟服务器建立连接。接着，ssh 就会要求用户输入所要登录账户的密码。用户输入并验证密码正确以后，就能登录远程服务器的 Shell 了。</p><h2 id="服务器密钥变更" tabindex="-1"><a class="header-anchor" href="#服务器密钥变更" aria-hidden="true">#</a> 服务器密钥变更</h2><p>服务器指纹可以防止有人恶意冒充远程主机。如果服务器的密钥发生变更（比如重装了 SSH 服务器），客户端再次连接时，就会发生公钥指纹不吻合的情况。这时，客户端就会中断连接，并显示一段警告信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class="token operator">!</span>     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class="token operator">!</span>
Someone could be eavesdropping on you right now <span class="token punctuation">(</span>man-in-the-middle attack<span class="token punctuation">)</span><span class="token operator">!</span>
It is also possible that the RSA <span class="token function">host</span> key has just been changed.
The fingerprint <span class="token keyword">for</span> the RSA key sent by the remote <span class="token function">host</span> is
<span class="token number">77</span>:a5:69:81:9b:eb:40:76:7b:13:04:a9:6c:f4:9c:5d.
Please contact your system administrator.
Add correct <span class="token function">host</span> key <span class="token keyword">in</span> /home/me/.ssh/known_hosts to get rid of this message.
Offending key <span class="token keyword">in</span> /home/me/.ssh/known_hosts:36
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段文字的意思是，该主机的公钥指纹跟<code>~/.ssh/known_hosts</code>文件储存的不一样，必须处理以后才能连接。这时，你需要确认是什么原因，使得公钥指纹发生变更，到底是恶意劫持，还是管理员变更了 SSH 服务器公钥。</p><p>如果新的公钥确认可以信任，需要继续执行连接，你可以执行下面的命令，将原来的公钥指纹从<code>~/.ssh/known_hosts</code>文件删除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-R</span> <span class="token function">hostname</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令中，<code>hostname</code>是发生公钥变更的主机名。</p><p>除了使用上面的命令，你也可以手工修改<code>known_hosts</code>文件，将公钥指纹删除。</p><p>删除了原来的公钥指纹以后，重新执行 ssh 命令连接远程服务器，将新的指纹加入<code>known_hosts</code>文件，就可以顺利连接了。</p><h2 id="执行远程命令" tabindex="-1"><a class="header-anchor" href="#执行远程命令" aria-hidden="true">#</a> 执行远程命令</h2><p>SSH 登录成功后，用户就进入了远程主机的命令行环境，所看到的提示符，就是远程主机的提示符。这时，你就可以输入想要在远程主机执行的命令。</p><p>另一种执行远程命令的方法，是将命令直接写在<code>ssh</code>命令的后面。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> username@hostname <span class="token builtin class-name">command</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令会使得 SSH 在登录成功后，立刻在远程主机上执行命令<code>command</code>。</p><p>下面是一个例子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> foo@server.example.com <span class="token function">cat</span> /etc/hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令会在登录成功后，立即远程执行命令<code>cat /etc/hosts</code>。</p><p>采用这种语法执行命令时，ssh 客户端不会提供互动式的 Shell 环境，而是直接将远程命令的执行结果输出在命令行。但是，有些命令需要互动式的 Shell 环境，这时就要使用<code>-t</code>参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 报错</span>
$ <span class="token function">ssh</span> remote.server.com emacs
emacs: standard input is not a <span class="token function">tty</span>

<span class="token comment"># 不报错</span>
$ <span class="token function">ssh</span> <span class="token parameter variable">-t</span> server.example.com emacs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>emacs</code>命令需要一个互动式 Shell，所以报错。只有加上<code>-t</code>参数，ssh 才会分配一个互动式 Shell。</p><h2 id="加密参数" tabindex="-1"><a class="header-anchor" href="#加密参数" aria-hidden="true">#</a> 加密参数</h2><p>SSH 连接的握手阶段，客户端必须跟服务端约定加密参数集（cipher suite）。</p><p>加密参数集包含了若干不同的加密参数，它们之间使用下划线连接在一起，下面是一个例子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>TLS_RSA_WITH_AES_128_CBC_SHA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的含义如下。</p><ul><li>TLS：加密通信协议</li><li>RSA：密钥交换算法</li><li>AES：加密算法</li><li>128：加密算法的强度</li><li>CBC：加密算法的模式</li><li>SHA：数字签名的 Hash 函数</li></ul><p>下面是一个例子，客户端向服务器发出的握手信息。</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>Handshake protocol: ClientHello
    Version: TLS 1.2
    Random
        Client time: May 22, 2030 02:43:46 GMT
        Random bytes: b76b0e61829557eb4c611adfd2d36eb232dc1332fe29802e321ee871
    Session ID: (empty)
    Cipher Suites
        Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256”
        Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
        Suite: TLS_RSA_WITH_AES_128_GCM_SHA256
        Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA
        Suite: TLS_RSA_WITH_AES_128_CBC_SHA
        Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA
        Suite: TLS_RSA_WITH_RC4_128_SHA
    Compression methods
        Method: null
    Extensions
        Extension: server_name
            Hostname: www.feistyduck.com
        Extension: renegotiation_info
        Extension: elliptic_curves
            Named curve: secp256r1
            Named curve: secp384r1
        Extension: signature_algorithms
            Algorithm: sha1/rsa
            Algorithm: sha256/rsa
            Algorithm: sha1/ecdsa
            Algorithm: sha256/ecdsa”
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的握手信息（ClientHello）之中，<code>Cipher Suites</code>字段就是客户端列出可选的加密参数集，服务器在其中选择一个自己支持的参数集。</p><p>服务器选择完毕之后，向客户端发出回应。</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>Handshake protocol: ServerHello
    Version: TLS 1.2
    Random
        Server time: Mar 10, 2059 02:35:57 GMT”
        Random bytes: 8469b09b480c1978182ce1b59290487609f41132312ca22aacaf5012
    Session ID: 4cae75c91cf5adf55f93c9fb5dd36d19903b1182029af3d527b7a42ef1c32c80
    Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    Compression method: null
    Extensions
        Extension: server_name
        Extension: renegotiation_info”
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的回应信息（ServerHello）中，<code>Cipher Suite</code>字段就是服务器最终选定的加密参数。</p><h2 id="ssh-命令行配置项" tabindex="-1"><a class="header-anchor" href="#ssh-命令行配置项" aria-hidden="true">#</a> ssh 命令行配置项</h2><p>ssh 命令有很多配置项，修改它的默认行为。</p><p><strong>-c</strong></p><p><code>-c</code>参数指定加密算法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-c</span> blowfish,3des server.example.com
<span class="token comment"># 或者</span>
$ <span class="token function">ssh</span> <span class="token parameter variable">-c</span> blowfish <span class="token parameter variable">-c</span> 3des server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令指定使用加密算法<code>blowfish</code>或<code>3des</code>。</p><p><strong>-C</strong></p><p><code>-C</code>参数表示压缩数据传输。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-C</span> server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>-D</strong></p><p><code>-D</code>参数指定本机的 Socks 监听端口，该端口收到的请求，都将转发到远程的 SSH 主机，又称动态端口转发，详见《端口转发》一章。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-D</span> <span class="token number">1080</span> server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令将本机 1080 端口收到的请求，都转发到服务器<code>server</code>。</p><p><strong>-f</strong></p><p><code>-f</code>参数表示 SSH 连接在后台运行。</p><p><strong>-F</strong></p><p><code>-F</code>参数指定配置文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-F</span> /usr/local/ssh/other_config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令指定使用配置文件<code>other_config</code>。</p><p><strong>-i</strong></p><p><code>-i</code>参数用于指定私钥，意为“identity_file”，默认值为<code>~/.ssh/id_dsa</code>（DSA 算法）和<code>~/.ssh/id_rsa</code>（RSA 算法）。注意，对应的公钥必须存放到服务器，详见《密钥登录》一章。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-i</span> my-key server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>-l</strong></p><p><code>-l</code>参数指定远程登录的账户名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-l</span> sally server.example.com
<span class="token comment"># 等同于</span>
$ <span class="token function">ssh</span> sally@server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>-L</strong></p><p><code>-L</code>参数设置本地端口转发，详见《端口转发》一章。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span>  <span class="token parameter variable">-L</span> <span class="token number">9999</span>:targetServer:80 user@remoteserver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令中，所有发向本地<code>9999</code>端口的请求，都会经过<code>remoteserver</code>发往 targetServer 的 80 端口，这就相当于直接连上了 targetServer 的 80 端口。</p><p><strong>-m</strong></p><p><code>-m</code>参数指定校验数据完整性的算法（message authentication code，简称 MAC）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-m</span> hmac-sha1,hmac-md5 server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令指定数据校验算法为<code>hmac-sha1</code>或<code>hmac-md5</code>。</p><p><strong>-N</strong></p><p><code>-N</code>参数用于端口转发，表示建立的 SSH 只用于端口转发，不能执行远程命令，这样可以提供安全性，详见《端口转发》一章。</p><p><strong>-o</strong></p><p><code>-o</code>参数用来指定一个配置命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-o</span> <span class="token string">&quot;Keyword Value&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例来说，配置文件里面有如下内容。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>User sally
Port <span class="token number">220</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>-o</code>参数，可以把上面两个配置命令从命令行传入。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-o</span> <span class="token string">&quot;User sally&quot;</span> <span class="token parameter variable">-o</span> <span class="token string">&quot;Port 220&quot;</span> server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用等号时，配置命令可以不用写在引号里面，但是等号前后不能有空格。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">User</span><span class="token operator">=</span>sally <span class="token parameter variable">-o</span> <span class="token assign-left variable">Port</span><span class="token operator">=</span><span class="token number">220</span> server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>-p</strong></p><p><code>-p</code>参数指定 SSH 客户端连接的服务器端口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-p</span> <span class="token number">2035</span> server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令连接服务器的2035端口。</p><p><strong>-q</strong></p><p><code>-q</code>参数表示安静模式（quiet），不向用户输出任何警告信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> –q foo.com
root’s password:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令使用<code>-q</code>参数，只输出要求用户输入密码的提示。</p><p><strong>-R</strong></p><p><code>-R</code>参数指定远程端口转发，详见《端口转发》一章。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-R</span> <span class="token number">9999</span>:targetServer:902 <span class="token builtin class-name">local</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令需在跳板服务器执行，指定本地计算机<code>local</code>监听自己的 9999 端口，所有发向这个端口的请求，都会转向 targetServer 的 902 端口。</p><p><strong>-t</strong></p><p><code>-t</code>参数在 ssh 直接运行远端命令时，提供一个互动式 Shell。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-t</span> server.example.com emacs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>-v</strong></p><p><code>-v</code>参数显示详细信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-v</span> server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-v</code>可以重复多次，表示信息的详细程度，比如<code>-vv</code>和<code>-vvv</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-vvv</span> server.example.com
<span class="token comment"># 或者</span>
$ <span class="token function">ssh</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-v</span> server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令会输出最详细的连接信息。</p><p><strong>-V</strong></p><p><code>-V</code>参数输出 ssh 客户端的版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> –V
ssh: SSH Secure Shell <span class="token number">3.2</span>.3 <span class="token punctuation">(</span>non-commercial version<span class="token punctuation">)</span> on i686-pc-linux-gnu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令输出本机 ssh 客户端版本是<code>SSH Secure Shell 3.2.3</code>。</p><p><strong>-X</strong></p><p><code>-X</code>参数表示打开 X 窗口转发。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-X</span> server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>-1，-2</strong></p><p><code>-1</code>参数指定使用 SSH 1 协议。</p><p><code>-2</code>参数指定使用 SSH 2 协议。</p><div class="language-ssh line-numbers-mode" data-ext="ssh"><pre class="language-ssh"><code>$ ssh -2 server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>-4，-6</strong></p><p><code>-4</code>指定使用 IPv4 协议，这是默认值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-4</span> server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-6</code>指定使用 IPv6 协议。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-6</span> server.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="客户端配置文件" tabindex="-1"><a class="header-anchor" href="#客户端配置文件" aria-hidden="true">#</a> 客户端配置文件</h2><h3 id="位置" tabindex="-1"><a class="header-anchor" href="#位置" aria-hidden="true">#</a> 位置</h3><p>SSH 客户端的全局配置文件是<code>/etc/ssh/ssh_config</code>，用户个人的配置文件在<code>~/.ssh/config</code>，优先级高于全局配置文件。</p><p>除了配置文件，<code>~/.ssh</code>目录还有一些用户个人的密钥文件和其他文件。下面是其中一些常见的文件。</p><ul><li><code>~/.ssh/id_ecdsa</code>：用户的 ECDSA 私钥。</li><li><code>~/.ssh/id_ecdsa.pub</code>：用户的 ECDSA 公钥。</li><li><code>~/.ssh/id_rsa</code>：用于 SSH 协议版本2 的 RSA 私钥。</li><li><code>~/.ssh/id_rsa.pub</code>：用于SSH 协议版本2 的 RSA 公钥。</li><li><code>~/.ssh/identity</code>：用于 SSH 协议版本1 的 RSA 私钥。</li><li><code>~/.ssh/identity.pub</code>：用于 SSH 协议版本1 的 RSA 公钥。</li><li><code>~/.ssh/known_hosts</code>：包含 SSH 服务器的公钥指纹。</li></ul><h3 id="主机设置" tabindex="-1"><a class="header-anchor" href="#主机设置" aria-hidden="true">#</a> 主机设置</h3><p>用户个人的配置文件<code>~/.ssh/config</code>，可以按照不同服务器，列出各自的连接参数，从而不必每一次登录都输入重复的参数。下面是一个例子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Host *
     Port <span class="token number">2222</span>

Host remoteserver
     HostName remote.example.com
     User neo
     Port <span class="token number">2112</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>Host *</code>表示对所有主机生效，后面的<code>Port 2222</code>表示所有主机的默认连接端口都是2222，这样就不用在登录时特别指定端口了。这里的缩进并不是必需的，只是为了视觉上，易于识别针对不同主机的设置。</p><p>后面的<code>Host remoteserver</code>表示，下面的设置只对主机<code>remoteserver</code>生效。<code>remoteserver</code>只是一个别名，具体的主机由<code>HostName</code>命令指定，<code>User</code>和<code>Port</code>这两项分别表示用户名和端口。这里的<code>Port</code>会覆盖上面<code>Host *</code>部分的<code>Port</code>设置。</p><p>以后，登录<code>remote.example.com</code>时，只要执行<code>ssh remoteserver</code>命令，就会自动套用 config 文件里面指定的参数。 单个主机的配置格式如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> remoteserver
<span class="token comment"># 等同于</span>
$ <span class="token function">ssh</span> <span class="token parameter variable">-p</span> <span class="token number">2112</span> neo@remote.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Host</code>命令的值可以使用通配符，比如<code>Host *</code>表示对所有主机都有效的设置，<code>Host *.edu</code>表示只对一级域名为<code>.edu</code>的主机有效的设置。它们的设置都可以被单个主机的设置覆盖。</p><h3 id="配置命令的语法" tabindex="-1"><a class="header-anchor" href="#配置命令的语法" aria-hidden="true">#</a> 配置命令的语法</h3><p>ssh 客户端配置文件的每一行，就是一个配置命令。配置命令与对应的值之间，可以使用空格，也可以使用等号。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Compression <span class="token function">yes</span>
<span class="token comment"># 等同于</span>
Compression <span class="token operator">=</span> <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#</code>开头的行表示注释，会被忽略。空行等同于注释。</p><h3 id="主要配置命令" tabindex="-1"><a class="header-anchor" href="#主要配置命令" aria-hidden="true">#</a> 主要配置命令</h3><p>下面是 ssh 客户端的一些主要配置命令，以及它们的范例值。</p><ul><li><code>AddressFamily inet</code>：表示只使用 IPv4 协议。如果设为<code>inet6</code>，表示只使用 IPv6 协议。</li><li><code>BindAddress 192.168.10.235</code>：指定本机的 IP 地址（如果本机有多个 IP 地址）。</li><li><code>CheckHostIP yes</code>：检查 SSH 服务器的 IP 地址是否跟公钥数据库吻合。</li><li><code>Ciphers blowfish,3des</code>：指定加密算法。</li><li><code>Compression yes</code>：是否压缩传输信号。</li><li><code>ConnectionAttempts 10</code>：客户端进行连接时，最大的尝试次数。</li><li><code>ConnectTimeout 60</code>：客户端进行连接时，服务器在指定秒数内没有回复，则中断连接尝试。</li><li><code>DynamicForward 1080</code>：指定动态转发端口。</li><li><code>GlobalKnownHostsFile /users/smith/.ssh/my_global_hosts_file</code>：指定全局的公钥数据库文件的位置。</li><li><code>Host server.example.com</code>：指定连接的域名或 IP 地址，也可以是别名，支持通配符。<code>Host</code>命令后面的所有配置，都是针对该主机的，直到下一个<code>Host</code>命令为止。</li><li><code>HostKeyAlgorithms ssh-dss,ssh-rsa</code>：指定密钥算法，优先级从高到低排列。</li><li><code>HostName myserver.example.com</code>：在<code>Host</code>命令使用别名的情况下，<code>HostName</code>指定域名或 IP 地址。</li><li><code>IdentityFile keyfile</code>：指定私钥文件。</li><li><code>LocalForward 2001 localhost:143</code>：指定本地端口转发。</li><li><code>LogLevel QUIET</code>：指定日志详细程度。如果设为<code>QUIET</code>，将不输出大部分的警告和提示。</li><li><code>MACs hmac-sha1,hmac-md5</code>：指定数据校验算法。</li><li><code>NumberOfPasswordPrompts 2</code>：密码登录时，用户输错密码的最大尝试次数。</li><li><code>PasswordAuthentication no</code>：指定是否支持密码登录。不过，这里只是客户端禁止，真正的禁止需要在 SSH 服务器设置。</li><li><code>Port 2035</code>：指定客户端连接的 SSH 服务器端口。</li><li><code>PreferredAuthentications publickey,hostbased,password</code>：指定各种登录方法的优先级。</li><li><code>Protocol 2</code>：支持的 SSH 协议版本，多个版本之间使用逗号分隔。</li><li><code>PubKeyAuthentication yes</code>：是否支持密钥登录。这里只是客户端设置，还需要在 SSH 服务器进行相应设置。</li><li><code>RemoteForward 2001 server:143</code>：指定远程端口转发。</li><li><code>SendEnv COLOR</code>：SSH 客户端向服务器发送的环境变量名，多个环境变量之间使用空格分隔。环境变量的值从客户端当前环境中拷贝。</li><li><code>ServerAliveCountMax 3</code>：如果没有收到服务器的回应，客户端连续发送多少次<code>keepalive</code>信号，才断开连接。该项默认值为3。</li><li><code>ServerAliveInterval 300</code>：客户端建立连接后，如果在给定秒数内，没有收到服务器发来的消息，客户端向服务器发送<code>keepalive</code>消息。如果不希望客户端发送，这一项设为<code>0</code>。</li><li><code>StrictHostKeyChecking yes</code>：<code>yes</code>表示严格检查，服务器公钥为未知或发生变化，则拒绝连接。<code>no</code>表示如果服务器公钥未知，则加入客户端公钥数据库，如果公钥发生变化，不改变客户端公钥数据库，输出一条警告，依然允许连接继续进行。<code>ask</code>（默认值）表示询问用户是否继续进行。</li><li><code>TCPKeepAlive yes</code>：客户端是否定期向服务器发送<code>keepalive</code>信息。</li><li><code>User userName</code>：指定远程登录的账户名。</li><li><code>UserKnownHostsFile /users/smith/.ssh/my_local_hosts_file</code>：指定当前用户的<code>known_hosts</code>文件（服务器公钥指纹列表）的位置。</li><li><code>VerifyHostKeyDNS yes</code>：是否通过检查 SSH 服务器的 DNS 记录，确认公钥指纹是否与<code>known_hosts</code>文件保存的一致。</li></ul>`,165),c=[d];function o(l,r){return s(),a("div",null,c)}const v=e(i,[["render",o],["__file","client.html.vue"]]);export{v as default};
