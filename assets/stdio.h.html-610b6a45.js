import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-bede4f5a.js";const t={},p=e(`<h1 id="stdio-h" tabindex="-1"><a class="header-anchor" href="#stdio-h" aria-hidden="true">#</a> stdio.h</h1><p><code>stdio.h</code>是 C 语言的标准 I/O 库，用于读取和写入文件，也用于控制台的输入和输出。</p><h2 id="标准-i-o-函数" tabindex="-1"><a class="header-anchor" href="#标准-i-o-函数" aria-hidden="true">#</a> 标准 I/O 函数</h2><p>以下函数用于控制台的输入和输出。</p><ul><li>printf()：输出到控制台，详见《基本语法》一章。</li><li>scanf()：从控制台读取输入，详见《I/O 函数》一章。</li><li>getchar()：从控制台读取一个字符，详见《I/O 函数》一章。</li><li>putchar()：向控制台写入一个字符，详见《I/O 函数》一章。</li><li>gets()：从控制台读取整行输入（已废除），详见《I/O 函数》一章。</li><li>puts()：向控制台写入一个字符串，详见《I/O 函数》一章。</li></ul><h2 id="文件操作函数" tabindex="-1"><a class="header-anchor" href="#文件操作函数" aria-hidden="true">#</a> 文件操作函数</h2><p>以下函数用于文件操作，详见《文件操作》一章。</p><ul><li>fopen()：打开文件。</li><li>fclose()：关闭文件。</li><li>freopen()：打开一个新文件，关联一个已经打开的文件指针。</li><li>fprintf()：输出到文件。</li><li>fscanf()：从文件读取数据。</li><li>getc()：从文件读取一个字符。</li><li>fgetc()：从文件读取一个字符。</li><li>putc()：向文件写入一个字符。</li><li>fputc()：向文件写入一个字符。</li><li>fgets()：从文件读取整行。</li><li>fputs()：向文件写入字符串。</li><li>fread()：从文件读取二进制数据。</li><li>fwrite()：向文件写入二进制数据。</li><li>fseek()：将文件内部指针移到指定位置。</li><li>ftell()：获取文件内部指针的当前位置。</li><li>rewind()：将文件内部指针重置到文件开始处。</li><li>fgetpos()：获取文件内部指针的当前位置。</li><li>fsetpos()：设置文件内部指针的当前位置。</li><li>feof()：判断文件内部指针是否指向文件结尾。</li><li>ferror()：返回文件错误指示器的状态。</li><li>clearerr()：重置文件错误指示器。</li><li>remove()：删除文件。</li><li>rename()：文件改名，以及移动文件。</li></ul><h2 id="字符串操作函数" tabindex="-1"><a class="header-anchor" href="#字符串操作函数" aria-hidden="true">#</a> 字符串操作函数</h2><p>以下函数用于操作字符串，详见《字符串操作》一章。</p><ul><li>sscanf()：从字符串读取数据，详见《I/O 函数》一章。</li><li>sprintf()：输出到字符串。</li><li>snprintf()：输出到字符串的更安全版本，指定了输出字符串的数量。</li></ul><h2 id="tmpfile" tabindex="-1"><a class="header-anchor" href="#tmpfile" aria-hidden="true">#</a> tmpfile()</h2><p><code>tmpfile()</code>函数创建一个临时文件，该文件只在程序运行期间存在，除非手动关闭它。它的原型如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>FILE<span class="token operator">*</span> <span class="token function">tmpfile</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>tmpfile()</code>返回一个文件指针，可以用于访问该函数创建的临时文件。如果创建失败，返回一个空指针 NULL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>FILE<span class="token operator">*</span> tempptr<span class="token punctuation">;</span>
tempptr <span class="token operator">=</span> <span class="token function">tmpfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用<code>close()</code>方法关闭临时文件后，该文件将被自动删除。</p><p><code>tmpfile()</code>有两个缺点。一是无法知道临时文件的文件名，二是无法让该文件成为永久文件。</p><h2 id="tmpnam" tabindex="-1"><a class="header-anchor" href="#tmpnam" aria-hidden="true">#</a> tmpnam()</h2><p><code>tmpname()</code>函数为临时文件生成一个名字，确保不会与其他文件重名。它的原型如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">tmpname</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的参数是一个字符串变量，<code>tmpnam()</code>会把临时文件的文件名复制到这个变量里面，并返回指向该字符串变量的指针。如果生成文件名失败，<code>tmpnam()</code>返回空指针 NULL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> filename<span class="token punctuation">[</span>L_tmpname<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tmpnam</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
  <span class="token comment">// 输出诸如 /tmp/filew9PMuZ 的文件名</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Something wrong!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>L_tmpname</code>是<code>stdio.h</code>定义的一个宏，指定了临时文件的文件名长度。</p><p><code>tmpname()</code>的参数也可以是一个空指针 NULL，同样返回指向文件名字符串的指针。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">;</span>
filename <span class="token operator">=</span> <span class="token function">tmpnam</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，变量<code>filename</code>就是<code>tmpnam()</code>生成的文件名。</p><p>该函数只是生成一个文件名，稍后可以使用<code>fopen()</code>打开该文件并使用它。</p><h2 id="fflush" tabindex="-1"><a class="header-anchor" href="#fflush" aria-hidden="true">#</a> fflush()</h2><p><code>fflush()</code>用于清空缓存区。它接受一个文件指针作为参数，将缓存区内容写入该文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">fflush</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不需要保存缓存区内容，则可以传入空指针 NULL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果清空成功，<code>fflush()</code>返回0，否则返回 EOF。</p><p>注意，<code>fflush()</code>一般只用来清空输出缓存区（比如写文件）。如果使用它来清空输入缓存区（比如读文件），属于未定义行为。</p><p><code>fflush()</code>的一个用途是不等回车键，就强迫输出缓存区。大多数系统都是行缓存，这意味着只有遇到回车键（或者缓存区满了，或者文件读到结尾），缓存区的内容才会输出，<code>fflush()</code>可以不等回车键，立即输出。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\r%d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例是一个倒计时效果，<code>\\r</code>是回车键，表示每轮循环都会回到当前行的行首，等于删除上一轮循环的输出。<code>fflush(stdout)</code>表示立即将缓存输出到显示器，这一行是必需的，否则由于上一行的输出没有回车键，不会触发缓存输出，屏幕上不会显示任何内容，只会等到程序运行结束再一次性输出。</p><h2 id="setvbuf" tabindex="-1"><a class="header-anchor" href="#setvbuf" aria-hidden="true">#</a> setvbuf()</h2><p><code>setvbuf()</code>函数用于定义某个字节流应该如何缓存。它可以接受四个参数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">setvbuf</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个参数<code>stream</code>是文件流。</p><p>第二个参数<code>buffer</code>是缓存区的地址。</p><p>第三个参数<code>mode</code>指定缓存的行为模式，它是下面三个宏之一，这些宏都定义在<code>stdio.h</code>。</p><ul><li><code>_IOFBF</code>：满缓存。当缓存为空时，才从流读入数据；当缓存满了，才向流写入数据。一般情况下，这是默认设置。</li><li><code>_IOLBF</code>：行缓存。每次从流读入一行数据，或向流写入一行数据，即以行为单位读写缓存。</li><li><code>_IONBF</code>：无缓存。不使用缓存区，直接读写设备。</li></ul><p>第四个参数<code>size</code>指定缓存区的大小。较大的缓存区提供更好的性能，而较小的缓存区可以节省空间。<code>stdio.h</code>提供了一个宏<code>BUFSIZ</code>，表示系统默认的缓存区大小。</p><p>它的意义在于，使得用户可以在打开一个文件之前，定义自己的文件缓冲区，而不必使用<code>fopen()</code>函数打开文件时设定的默认缓冲区。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> buffer<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">setvbuf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> _IOFBF<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例设置文件流<code>stream</code>的缓存区从地址<code>buffer</code>开始，大小为<code>N</code>，模式为<code>_IOFBF</code>。</p><p><code>setvbuf()</code>的第二个参数可以为空指针 NULL。这样的话，<code>setvbuf()</code>会自己创建一个缓存区。</p><p>注意，<code>setvbuf()</code>的调用必须在对文件流执行任何操作之前。</p><p>如果调用成功，<code>setvbuf()</code>的返回值为<code>0</code>，否则返回非零值。</p><p>下面的例子是将缓存区调整为行缓存。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
<span class="token keyword">char</span> lineBuf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;somefile.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setvbuf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> lineBuf<span class="token punctuation">,</span> _IOLBF<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setbuf" tabindex="-1"><a class="header-anchor" href="#setbuf" aria-hidden="true">#</a> setbuf()</h2><p><code>setbuf()</code>是<code>setvbuf()</code>的早期版本，可以视为后者的简化版本，也用来定义某个字节流的缓存区。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">setbuf</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的第一个参数<code>stream</code>是文件流，第二个参数<code>buffer</code>是缓存区的地址。</p><p>它总是可以改写成<code>setvbuf()</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> buffer<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">setbuf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等同于</span>
<span class="token function">setvbuf</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> _IOFBF<span class="token punctuation">,</span> BUFSIZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>BUFSIZ</code>是<code>stdio.h</code>定义的宏，表示系统默认的缓存区大小。</p><p><code>setbuf()</code>函数没有返回值。</p><p><code>setbuf()</code>的第二个参数如果设置为 NULL，表示不进行缓存。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 等同于</span>
<span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ungetc" tabindex="-1"><a class="header-anchor" href="#ungetc" aria-hidden="true">#</a> ungetc()</h2><p><code>ungetc()</code>将从缓存里面读取的上一个字符，重新放回缓存，下一个读取缓存的操作会从这个字符开始。有些操作需要了解下一个字符是什么，再决定应该怎么处理，这时这个函数就很有用。</p><p>它的原型如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ungetc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的第一个参数是一个字符变量，第二个参数是一个打开的文件流。它的返回值是放回缓存的那个字符，操作失败时，返回 EOF。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">ungetc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，如果读取的字符不是数字，就将其放回缓存。</p><h2 id="perror" tabindex="-1"><a class="header-anchor" href="#perror" aria-hidden="true">#</a> perror()</h2><p><code>perror()</code>用于在 stderr 的错误信息之前，添加一个自定义字符串。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数的参数就是在报错信息前添加的字符串。它没有返回值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;sqrt error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，求<code>-1</code>的平方根，导致报错。头文件<code>errno.h</code>提供宏<code>errno</code>，只要上一步操作出错，这个宏就会设置成非零值。<code>perror()</code>用来在报错信息前，加上<code>sqrt error</code>的自定义字符串。</p><p>执行上面的程序，就会得到下面的报错信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ gcc test.c <span class="token parameter variable">-lm</span>
$ ./a.out
sqrt error: Numerical argument out of domain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可变参数操作函数" tabindex="-1"><a class="header-anchor" href="#可变参数操作函数" aria-hidden="true">#</a> 可变参数操作函数</h2><p>（1）输出函数</p><p>下面是<code>printf()</code>的变体函数，用于按照给定格式，输出函数的可变参数列表（va_list）。</p><ul><li>vprintf()：按照给定格式，输出到控制台，默认是显示器。</li><li>vfprintf()：按照给定格式，输出到文件。</li><li>vsprintf()：按照给定格式，输出到字符串。</li><li>vsnprintf()：按照给定格式，输出到字符串的安全版本。</li></ul><p>它们的原型如下，基本与对应的<code>printf()</code>系列函数一致，除了最后一个参数是可变参数对象。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span>
    
<span class="token keyword">int</span> <span class="token function">vprintf</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> restrict format<span class="token punctuation">,</span>
  va_list arg
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">vfprintf</span><span class="token punctuation">(</span>
  FILE <span class="token operator">*</span> restrict stream<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> restrict format<span class="token punctuation">,</span>
  va_list arg
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">int</span> <span class="token function">vsprintf</span><span class="token punctuation">(</span>
  <span class="token keyword">char</span> <span class="token operator">*</span> restrict s<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> restrict format<span class="token punctuation">,</span>
  va_list arg
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">int</span> <span class="token function">vsnprintf</span><span class="token punctuation">(</span>
  <span class="token keyword">char</span> <span class="token operator">*</span> restrict s<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> n<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> restrict format<span class="token punctuation">,</span>
  va_list arg
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的返回值都为输出的字符数，如果出错，返回负值。</p><p><code>vsprintf()</code>和<code>vsnprintf()</code>的第一个参数可以为 NULL，用来查看多少个字符会被写入。</p><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  va_list va<span class="token punctuation">;</span>
  <span class="token function">va_start</span><span class="token punctuation">(</span>va<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">vprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">va_end</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出 x = 12 and y = 3.20</span>
<span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d and y = %.2f&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）输入函数</p><p>下面是<code>scanf()</code>的变体函数，用于按照给定格式，输入可变参数列表 (va_list)。</p><ul><li>vscanf()：按照给定格式，从控制台读取（默认为键盘）。</li><li>vfscanf()：按照给定格式，从文件读取。</li><li>vsscanf()：按照给定格式，从字符串读取。</li></ul><p>它们的原型如下，跟对应的<code>scanf()</code>函数基本一致，除了最后一个参数是可变参数对象。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span>
    
<span class="token keyword">int</span> <span class="token function">vscanf</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> restrict format<span class="token punctuation">,</span>
  va_list arg
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">int</span> <span class="token function">vfscanf</span><span class="token punctuation">(</span>
  FILE <span class="token operator">*</span> restrict stream<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> restrict format<span class="token punctuation">,</span>
  va_list arg
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">int</span> <span class="token function">vsscanf</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> restrict s<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> restrict format<span class="token punctuation">,</span>
  va_list arg
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们返回成功读取的项数，遇到文件结尾或错误，则返回 EOF。</p><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">error_check_scanf</span><span class="token punctuation">(</span><span class="token keyword">int</span> expected_count<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  va_list va<span class="token punctuation">;</span>

  <span class="token function">va_start</span><span class="token punctuation">(</span>va<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">vscanf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> va<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">va_end</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assert</span><span class="token punctuation">(</span>count <span class="token operator">==</span> expected_count<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">error_check_scanf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;%d, %d/%f&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,97),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","stdio.h.html.vue"]]);export{r as default};
