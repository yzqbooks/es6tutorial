import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as n}from"./app-bede4f5a.js";const i={},c=n(`<h1 id="git-cherry-pick" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick" aria-hidden="true">#</a> git cherry-pick</h1><p>对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。</p><p>这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（<code>git merge</code>）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。</p><p><img src="https://www.wangbase.com/blogimg/asset/202004/bg2020042723.jpg" alt=""></p><h2 id="一、基本用法" tabindex="-1"><a class="header-anchor" href="#一、基本用法" aria-hidden="true">#</a> 一、基本用法</h2><p><code>git cherry-pick</code>命令的作用，就是将指定的提交（commit）应用于其他分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令就会将指定的提交<code>commitHash</code>，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。</p><p>举例来说，代码仓库有<code>master</code>和<code>feature</code>两个分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    a - b - c - d   Master
         <span class="token punctuation">\\</span>
           e - f - g Feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在将提交<code>f</code>应用到<code>master</code>分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到 master 分支</span>
$ <span class="token function">git</span> checkout master

<span class="token comment"># Cherry pick 操作</span>
$ <span class="token function">git</span> cherry-pick f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的操作完成以后，代码库就变成了下面的样子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    a - b - c - d - f   Master
         <span class="token punctuation">\\</span>
           e - f - g Feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面可以看到，<code>master</code>分支的末尾增加了一个提交<code>f</code>。</p><p><code>git cherry-pick</code>命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cherry-pick feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码表示将<code>feature</code>分支的最近一次提交，转移到当前分支。</p><h2 id="二、转移多个提交" tabindex="-1"><a class="header-anchor" href="#二、转移多个提交" aria-hidden="true">#</a> 二、转移多个提交</h2><p>Cherry pick 支持一次转移多个提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>HashA<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>HashB<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。</p><p>如果想要转移一系列的连续提交，可以使用下面的简便语法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cherry-pick A<span class="token punctuation">..</span>B 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。</p><p>注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cherry-pick A^<span class="token punctuation">..</span>B 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三、配置项" tabindex="-1"><a class="header-anchor" href="#三、配置项" aria-hidden="true">#</a> 三、配置项</h2><p><code>git cherry-pick</code>命令的常用配置项如下。</p><p><strong>（1）<code>-e</code>，<code>--edit</code></strong></p><p>打开外部编辑器，编辑提交信息。</p><p><strong>（2）<code>-n</code>，<code>--no-commit</code></strong></p><p>只更新工作区和暂存区，不产生新的提交。</p><p><strong>（3）<code>-x</code></strong></p><p>在提交信息的末尾追加一行<code>(cherry picked from commit ...)</code>，方便以后查到这个提交是如何产生的。</p><p><strong>（4）<code>-s</code>，<code>--signoff</code></strong></p><p>在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。</p><p><strong>（5）<code>-m parent-number</code>，<code>--mainline parent-number</code></strong></p><p>如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。</p><p><code>-m</code>配置项告诉 Git，应该采用哪个分支的变动。它的参数<code>parent-number</code>是一个从<code>1</code>开始的整数，代表原始提交的父分支编号。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cherry-pick <span class="token parameter variable">-m</span> <span class="token number">1</span> <span class="token operator">&lt;</span>commitHash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令表示，Cherry pick 采用提交<code>commitHash</code>来自编号1的父分支的变动。</p><p>一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。</p><h2 id="四、代码冲突" tabindex="-1"><a class="header-anchor" href="#四、代码冲突" aria-hidden="true">#</a> 四、代码冲突</h2><p>如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。</p><p><strong>（1）<code>--continue</code></strong></p><p>用户解决代码冲突后，第一步将修改的文件重新加入暂存区（<code>git add .</code>），第二步使用下面的命令，让 Cherry pick 过程继续执行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cherry-pick <span class="token parameter variable">--continue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）<code>--abort</code></strong></p><p>发生代码冲突后，放弃合并，回到操作前的样子。</p><p><strong>（3）<code>--quit</code></strong></p><p>发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。</p><h2 id="五、转移到另一个代码库" tabindex="-1"><a class="header-anchor" href="#五、转移到另一个代码库" aria-hidden="true">#</a> 五、转移到另一个代码库</h2><p>Cherry pick 也支持转移另一个代码库的提交，方法是先将该库加为远程仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">add</span> target git://gitUrl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令添加了一个远程仓库<code>target</code>。</p><p>然后，将远程代码抓取到本地。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> fetch target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令将远程代码仓库抓取到本地。</p><p>接着，检查一下要从远程仓库转移的提交，获取它的哈希值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> log target/master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，使用<code>git cherry-pick</code>命令转移提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（完）</p>`,64),d=[c];function r(t,o){return a(),s("div",null,d)}const h=e(i,[["render",r],["__file","git-cherry-pick.html.vue"]]);export{h as default};
