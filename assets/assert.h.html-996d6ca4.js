import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e}from"./app-bede4f5a.js";const t={},c=e(`<h1 id="assert-h" tabindex="-1"><a class="header-anchor" href="#assert-h" aria-hidden="true">#</a> assert.h</h1><h2 id="assert" tabindex="-1"><a class="header-anchor" href="#assert" aria-hidden="true">#</a> assert()</h2><p><code>assert.h</code>头文件定义了宏<code>assert()</code>，用于在运行时确保程序符合指定条件，如果不符合，就报错终止运行。这个宏常常被称为“断言”。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">assert</span><span class="token punctuation">(</span>PI <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码在程序运行到这一行语句时，验证变量<code>PI</code>是否大于3。如果确实大于3，程序继续运行，否则就会终止运行，并且给出报错信息提示。</p><p><code>assert()</code>宏接受一个表达式作为参数。如果该表达式为真（返回值非零），<code>assert()</code>不会产生任何作用，程序继续运行。如果该表达式为假（返回值为零），<code>assert()</code>就会报错，在标准错误流<code>stderr</code>中写入一条错误信息，显示没有通过的表达式，以及包含这个表达式的文件名和行号。最后，调用<code>abort()</code>函数终止程序（<code>abort()</code>函数的原型在<code>stdlib.h</code>头文件中）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>z <span class="token operator">=</span> x <span class="token operator">*</span> x <span class="token operator">-</span> y <span class="token operator">*</span> y<span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>z <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>assert()</code>语句类似于下面的代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;z less than 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果断言失败，程序会中断执行，会显示下面的提示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Assertion failed<span class="token operator">:</span> <span class="token punctuation">(</span>z <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> function main<span class="token punctuation">,</span> file <span class="token operator">/</span>Users<span class="token operator">/</span>assert<span class="token punctuation">.</span>c<span class="token punctuation">,</span> line <span class="token number">14.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面报错的格式如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Assertion failed<span class="token operator">:</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span><span class="token punctuation">,</span> function <span class="token punctuation">[</span>abc<span class="token punctuation">]</span><span class="token punctuation">,</span> file <span class="token punctuation">[</span>xyz<span class="token punctuation">]</span><span class="token punctuation">,</span> line <span class="token punctuation">[</span>nnn<span class="token punctuation">]</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，方括号的部分使用实际数据替换掉。</p><p>使用<code>assert()</code>有几个好处：它不仅能自动标识文件和出问题的行号，还有一种无需更改代码就能开启或关闭<code>assert()</code>的机制。如果已经确认程序没有问题，不需要再做断言，就在<code>#include &lt;assert.h&gt;</code>语句的前面，定义一个宏<code>NDEBUG</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NDEBUG</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，重新编译程序，编译器就会禁用文件中所有的<code>assert()</code>语句。如果程序又出现问题，可以移除这条<code>#define NDBUG</code>指令（或者把它注释掉），再次编译，这样就重新启用了<code>assert()</code>语句。</p><p><code>assert()</code>的缺点是，因为引入了额外的检查，增加了程序的运行时间。</p><h2 id="static-assert" tabindex="-1"><a class="header-anchor" href="#static-assert" aria-hidden="true">#</a> static_assert()</h2><p>C11 引入了静态断言<code>static_assert()</code>，用于在编译阶段进行断言判断。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">static_assert</span><span class="token punctuation">(</span>constant<span class="token operator">-</span>expression<span class="token punctuation">,</span> string<span class="token operator">-</span>literal<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>static_assert()</code>接受两个参数，第一个参数<code>constant-expression</code>是一个常量表达式，第二个参数<code>string-literal</code>是一个提示字符串。如果第一个参数的值为false，会产生一条编译错误，第二个参数就是错误提示信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">static_assert</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;64-bit code generation is not supported.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码的意思是，如果当前计算机的<code>int</code>类型不等于4个字节，就会编译报错。</p><p>注意，<code>static_assert()</code>只在编译阶段运行，无法获得变量的值。如果对变量进行静态断言，就会导致编译错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">positive</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">static_assert</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;value must &gt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码会导致编译报错，因为编译时无法知道变量<code>n</code>的值。</p><p><code>static_assert()</code>的好处是，尽量在编译阶段发现错误，避免运行时再报错，节省开发时间。另外，有些<code>assert()</code>断言位于函数之中，如果不执行该函数，就不会报错，而<code>static_assert()</code>不管函数是否执行，都会进行断言判断。最后，<code>static_assert()</code>不会生成可执行代码，所以不会造成任何运行时的性能损失。</p>`,28),o=[c];function p(i,l){return n(),a("div",null,o)}const u=s(t,[["render",p],["__file","assert.h.html.vue"]]);export{u as default};
