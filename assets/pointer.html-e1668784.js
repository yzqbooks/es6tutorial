import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-bede4f5a.js";const p={},o=e(`<h1 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h1><p>指针是 C 语言最重要的概念之一，也是最难理解的概念之一。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>指针是什么？首先，它是一个值，这个值代表一个内存地址，因此指针相当于指向某个内存地址的路标。</p><p>字符<code>*</code>表示指针，通常跟在类型关键字的后面，表示指针指向的是什么类型的值。比如，<code>char*</code>表示一个指向字符的指针，<code>float*</code>表示一个指向<code>float</code>类型的值的指针。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> intPtr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例声明了一个变量<code>intPtr</code>，它是一个指针，指向的内存地址存放的是一个整数。</p><p>星号<code>*</code>可以放在变量名与类型关键字之间的任何地方，下面的写法都是有效的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span>   <span class="token operator">*</span>intPtr<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span> intPtr<span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span>  intPtr<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本书使用星号紧跟在类型关键字后面的写法（即<code>int* intPtr;</code>），因为这样可以体现，指针变量就是一个普通变量，只不过它的值是内存地址而已。</p><p>这种写法有一个地方需要注意，如果同一行声明两个指针变量，那么需要写成下面这样。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 正确</span>
<span class="token keyword">int</span> <span class="token operator">*</span> foo<span class="token punctuation">,</span> <span class="token operator">*</span> bar<span class="token punctuation">;</span>

<span class="token comment">// 错误</span>
<span class="token keyword">int</span><span class="token operator">*</span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，第二行的执行结果是，<code>foo</code>是整数指针变量，而<code>bar</code>是整数变量，即<code>*</code>只对第一个变量生效。</p><p>一个指针指向的可能还是指针，这时就要用两个星号<code>**</code>表示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例表示变量<code>foo</code>是一个指针，指向的还是一个指针，第二个指针指向的则是一个整数。</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> * 运算符</h2><p><code>*</code>这个符号除了表示指针以外，还可以作为运算符，用来取出指针变量所指向的内存地址里面的值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，函数<code>increment()</code>的参数是一个整数指针<code>p</code>。函数体里面，<code>*p</code>就表示指针<code>p</code>所指向的那个值。对<code>*p</code>赋值，就表示改变指针所指向的那个地址里面的值。</p><p>上面函数的作用是将参数值加<code>1</code>。该函数没有返回值，因为传入的是地址，函数体内部对该地址包含的值的操作，会影响到函数外部，所以不需要返回值。事实上，函数内部通过指针，将值传到外部，是 C 语言的常用方法。</p><p>变量地址而不是变量值传入函数，还有一个好处。对于需要大量存储空间的大型变量，复制变量值传入函数，非常浪费时间和空间，不如传入指针来得高效。</p><h2 id="运算符-1" tabindex="-1"><a class="header-anchor" href="#运算符-1" aria-hidden="true">#</a> &amp; 运算符</h2><p><code>&amp;</code>运算符用来取出一个变量所在的内存地址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x&#39;s address is %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>x</code>是一个整数变量，<code>&amp;x</code>就是<code>x</code>的值所在的内存地址。<code>printf()</code>的<code>%p</code>是内存地址的占位符，可以打印出内存地址。</p><p>上一小节中，参数变量加<code>1</code>的函数，可以像下面这样使用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，调用<code>increment()</code>函数以后，变量<code>x</code>的值就增加了1，原因就在于传入函数的是变量<code>x</code>的地址<code>&amp;x</code>。</p><p><code>&amp;</code>运算符与<code>*</code>运算符互为逆运算，下面的表达式总是成立。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指针变量的初始化" tabindex="-1"><a class="header-anchor" href="#指针变量的初始化" aria-hidden="true">#</a> 指针变量的初始化</h2><p>声明指针变量之后，编译器会为指针变量本身分配一个内存空间，但是这个内存空间里面的值是随机的，也就是说，指针变量指向的值是随机的。这时一定不能去读写指针变量指向的地址，因为那个地址是随机地址，很可能会导致严重后果。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码是错的，因为<code>p</code>指向的那个地址是随机的，向这个随机地址里面写入<code>1</code>，会导致意想不到的结果。</p><p>正确做法是指针变量声明后，必须先让它指向一个分配好的地址，然后再进行读写，这叫做指针变量的初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>

p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>p</code>是指针变量，声明这个变量后，<code>p</code>会指向一个随机的内存地址。这时要将它指向一个已经分配好的内存地址，上例就是再声明一个整数变量<code>i</code>，编译器会为<code>i</code>分配内存地址，然后让<code>p</code>指向<code>i</code>的内存地址（<code>p = &amp;i;</code>）。完成初始化之后，就可以对<code>p</code>指向的内存地址进行赋值了（<code>*p = 13;</code>）。</p><p>为了防止读写未初始化的指针变量，可以养成习惯，将未初始化的指针变量设为<code>NULL</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>NULL</code>在 C 语言中是一个常量，表示地址为<code>0</code>的内存空间，这个地址是无法使用的，读写该地址会报错。</p><h2 id="指针的运算" tabindex="-1"><a class="header-anchor" href="#指针的运算" aria-hidden="true">#</a> 指针的运算</h2><p>指针本质上就是一个无符号整数，代表了内存地址。它可以进行运算，但是规则并不是整数运算的规则。</p><p>（1）指针与整数值的加减运算</p><p>指针与整数值的运算，表示指针的移动。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">short</span><span class="token operator">*</span> j<span class="token punctuation">;</span>
j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1234</span><span class="token punctuation">;</span>
j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0x1236</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>j</code>是一个指针，指向内存地址<code>0x1234</code>。你可能以为<code>j + 1</code>等于<code>0x1235</code>，但正确答案是<code>0x1236</code>。原因是<code>j + 1</code>表示指针向内存地址的高位移动一个单位，而一个单位的<code>short</code>类型占据两个字节的宽度，所以相当于向高位移动两个字节。同样的，<code>j - 1</code>得到的结果是<code>0x1232</code>。</p><p>指针移动的单位，与指针指向的数据类型有关。数据类型占据多少个字节，每单位就移动多少个字节。</p><p>（2）指针与指针的加法运算</p><p>指针只能与整数值进行加减运算，两个指针进行加法是非法的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token operator">*</span> j<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token operator">*</span> k<span class="token punctuation">;</span>
x <span class="token operator">=</span> j <span class="token operator">+</span> k<span class="token punctuation">;</span> <span class="token comment">// 非法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例是两个指针相加，这是非法的。</p><p>（3）指针与指针的减法</p><p>相同类型的指针允许进行减法运算，返回它们之间的距离，即相隔多少个数据单位。</p><p>高位地址减去低位地址，返回的是正值；低位地址减去高位地址，返回的是负值。</p><p>这时，减法返回的值属于<code>ptrdiff_t</code>类型，这是一个带符号的整数类型别名，具体类型根据系统不同而不同。这个类型的原型定义在头文件<code>stddef.h</code>里面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">short</span><span class="token operator">*</span> j1<span class="token punctuation">;</span>
<span class="token keyword">short</span><span class="token operator">*</span> j2<span class="token punctuation">;</span>

j1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1234</span><span class="token punctuation">;</span>
j2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1236</span><span class="token punctuation">;</span>

<span class="token class-name">ptrdiff_t</span> dist <span class="token operator">=</span> j2 <span class="token operator">-</span> j1<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>j1</code>和<code>j2</code>是两个指向 short 类型的指针，变量<code>dist</code>是它们之间的距离，类型为<code>ptrdiff_t</code>，值为<code>1</code>，因为相差2个字节正好存放一个 short 类型的值。</p><p>（4）指针与指针的比较运算</p><p>指针之间的比较运算，比较的是各自的内存地址哪一个更大，返回值是整数<code>1</code>（true）或<code>0</code>（false）。</p>`,60),c=[o];function t(d,i){return s(),a("div",null,c)}const u=n(p,[["render",t],["__file","pointer.html.vue"]]);export{u as default};
