import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c as r,a as e,b as a,d as n,e as d}from"./app-bede4f5a.js";const c={},o=d(`<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h1><p>git是一种源码管理系统（source code management，缩写为SCM）。它对当前文件提供版本管理功能，核心思想是对当前文件建立一个对象数据库（object database），将历史版本信息存放在这个数据库中。</p><h2 id="git操作流程" tabindex="-1"><a class="header-anchor" href="#git操作流程" aria-hidden="true">#</a> git操作流程</h2><ul><li>安装git</li><li>提交用户名和电子邮件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Some One&quot;</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;someone@gmail.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>git init：新建一个git库</li><li>git status：查看目前状态</li><li>git add &lt;文件名&gt;：添加文件从工作区到暂存区</li><li>git commit -m &quot;提示信息&quot;：从暂存区提交到代码仓库</li><li>git log：查看提交commit的信息</li><li>git remote add origin https://github.com/try-git/try_git.git : 添加远程指针</li><li>git push -u origin master：将本地的master分支推送到远程origin主机，-u参数表示记住对应关系，下次可以直接git push推送。</li><li>git pull origin master：将远程主机origin的代码取回本地，与本地的master分支合并</li><li>git diff HEAD：查看与上一次commit的区别</li></ol><h3 id="发布一个版本" tabindex="-1"><a class="header-anchor" href="#发布一个版本" aria-hidden="true">#</a> 发布一个版本</h3><p>为当前分支打上版本号。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git tag -a [VERSION] -m &quot;released [VERSION]&quot;
$ git push origin [VERSION]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git对象" tabindex="-1"><a class="header-anchor" href="#git对象" aria-hidden="true">#</a> git对象</h2><p>对象数据库包含四类对象。</p><ul><li>Blob：包含二进制数据，它们是文件内容。只要文件内容改变，就会在对象数据库中生成一个blob对象。注意，blob对象只保存文件内容，不含文件名和文件存储位置等信息。如果文件名改变，或者文件储存位置改变，不会生成新的blob对象。</li><li>Tree：blob对象的集合，以及它们的文件名和权限。一个tree对象描述一个时点上的一个目录。</li><li>Commit：描述一个时点上的项目状态，包含一条log信息，一个tree对象和指向父节点（parent commits）的指针。第一个commit对象没有父节点。 <ul><li>紀錄 root tree SHA1</li><li>紀錄 parent commit SHA1</li><li>紀錄作者、時間和 commit message 資訊</li></ul></li><li>tag</li></ul><p>对象数据库依赖SHA哈希函数。当一个对象加入数据库，它会被SHA函数处理，得到的结果就是该对象在数据库中的名字（前两个字节被当作目录名，用来提高效率）。</p><p>git命令基本上是图数据库操作命令，用来删除/操作节点、移动指针等等。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
$ <span class="token function">git</span> init
$ <span class="token builtin class-name">echo</span> hello <span class="token operator">&gt;</span> hello.txt
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
$ tree .git
<span class="token comment"># 存在 .git/objects/ce/013625030ba8dba906f756967f9e9ca394464a</span>
<span class="token comment"># 這是 hello 內容的 SHA1</span>
$ <span class="token builtin class-name">printf</span> <span class="token string">&quot;blob 6<span class="token entity" title="\\x00">\\x00</span>hello<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token operator">|</span> shasum
$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">|</span> <span class="token function">git</span> hash-object <span class="token parameter variable">--stdin</span>
$ <span class="token function">git</span> cat-file <span class="token parameter variable">-p</span> ce0136

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码有几点需要注意。</p><ul><li><code>git add</code>命令就会生成二进制对象。</li><li>shasum命令返回字符串的SHA哈希函数结果。</li><li><code>git hash-object</code>命令计算一个文件的git对象ID，stdin参数表示从标准输入读取，而不是从本地文件读取。</li><li><code>git cat-file</code>命令显示git对象文件的内容和大小信息，p参数表示以易于阅读的格式显示。</li></ul><p>树对象保存当前目录的快照。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>040000 tree 0eed1217a2947f4930583229987d90fe5e8e0b74 data
100664 blob 5e40c0877058c504203932e5136051cf3cd3519b letter.txt
100664 blob 274c0052dd5408f8ae2bc8440029ff67d79bc5c3 number.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>commit（快照）对象也保存在<code>.git/objects</code>目录。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tree ffe298c3ce8bb07326f888907996eaa48d266db4
author Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424798436 -0500
committer Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424798436 -0500

a1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p>指定全局的.gitignore文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token assign-left variable">core.excludesfile</span><span class="token operator">=</span>/Users/flores/.gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><ul><li>.git/refs/heads：保存各个分支的指针</li><li>.git/HEAD 文件，保存HEAD指针</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ref: refs/heads/master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码说明HEAD指向<code>.git/refs/heads/master</code>文件，该文件是一个Hash值。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a87cc0f39d12e51be8d68eab5cef1d31e8807a1c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>.git/refs/tags：保存tag指针</li></ul><h3 id="缓冲区域-index" tabindex="-1"><a class="header-anchor" href="#缓冲区域-index" aria-hidden="true">#</a> 缓冲区域（index）</h3><p>Index区域（.git/index）是一个二进制文件，用来保存当前目录在某个时点的状态。</p><p><code>git init</code>命令用来创建index区域，以及对象数据库（.dircache/objects）。</p><p>100644 為檔案模式,表示這是一個普通檔案；100755 表示可執行檔,120000 表示 symbolic link。</p><p><code>.git/index</code>文件，保存暂存区的文件名和对应的Hash值，每行对应一个文件。下面是一个例子。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>data/letter.txt 5e40c0877058c504203932e5136051cf3cd3519b
data/number.txt 274c0052dd5408f8ae2bc8440029ff67d79bc5c3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-commit的全过程" tabindex="-1"><a class="header-anchor" href="#git-commit的全过程" aria-hidden="true">#</a> Git commit的全过程</h2><ol><li>用內容產生 blob object</li><li>寫入 file mode, blob SHA1, file name 到 staging area</li><li>根據 staging area 產生 Tree object</li><li>用 root tree SHA1 和 parent commit SHA1 產生 commit object</li><li>用 commit SHA1 更新 master 參考</li></ol><p>如何不用 <code>git add</code> 和 <code>git commit</code>指令完成 commit 動作?</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token comment"># git add的部分</span>

$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;hola&quot;</span> <span class="token operator">|</span> <span class="token function">git</span> hash-object <span class="token parameter variable">-w</span> <span class="token parameter variable">--stdin</span>
$ <span class="token function">git</span> update-index <span class="token parameter variable">--add</span> <span class="token parameter variable">--cacheinfo</span> <span class="token punctuation">\\</span>
<span class="token number">100644</span> 5c1b14949828006ed75a3e8858957f86a2f7e2eb hola.txt

<span class="token comment"># git commit的部分</span>

$ <span class="token function">git</span> write-tree
$ <span class="token function">git</span> commit-tree 27b9d5 <span class="token parameter variable">-m</span> <span class="token string">&quot;Second commit&quot;</span> <span class="token parameter variable">-p</span> 30b060
$ <span class="token function">git</span> update-ref refs/heads/master 97b806c9e5561a08e0df1f1a60857baad3a1f02e

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="父节点" tabindex="-1"><a class="header-anchor" href="#父节点" aria-hidden="true">#</a> 父节点</h2><p>合并产生的新节点，会有两个父节点。第一个是当前所在分支的父节点，第二个合并进来的那个分支的父节点。</p><h2 id="tag对象" tabindex="-1"><a class="header-anchor" href="#tag对象" aria-hidden="true">#</a> Tag对象</h2><p>Tag 分兩種:annotated tag 才會產生 object。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
$ <span class="token function">git</span> tag <span class="token parameter variable">-a</span> release
$ <span class="token function">git</span> rev-parse release
$ <span class="token function">git</span> cat-file <span class="token parameter variable">-p</span> 2450f3

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tag对象的内容。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
object 309be0
type commit
tag release
tagger ihower 1375383070 +0800
Release!

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference-指针" tabindex="-1"><a class="header-anchor" href="#reference-指针" aria-hidden="true">#</a> Reference（指针）</h2><p>所谓指针（reference），只是一个链接，用来指向其他物体，方便引用。Git有三种指针，但是所有指针归根结底都是指向某个commit。</p><ul><li>Tag指针：指向某个commit，或者指向某个tag对象。保存位置在.git/refs/tags/目录，文件名为tag名，内容为某个commit或ref object的SHA1哈希。</li><li>Branch指针：指向某个commit。每次该分支有新的commit，指针就会变动。</li><li>HEAD指针：指向目前所在的Branch，用来区分目前在哪个分支。比如，内容为ref: refs/heads/ master。</li></ul><h2 id="团队开发模式" tabindex="-1"><a class="header-anchor" href="#团队开发模式" aria-hidden="true">#</a> 团队开发模式</h2><p>集中式工作流程：團隊內部私有專案，大家都有權限 Push 到共用的 Repository</p><p>管理員工作流程：適合一般 Open Source 專案,只有少部分人有權限可以 Push到 Repository,其他開發者用用 request pull 請求合併。例如 GitHub 提供的 Fork 和 Pull Request 功能。</p><h2 id="分支管理策略" tabindex="-1"><a class="header-anchor" href="#分支管理策略" aria-hidden="true">#</a> 分支管理策略</h2><h3 id="github-flow" tabindex="-1"><a class="header-anchor" href="#github-flow" aria-hidden="true">#</a> github flow</h3><ul><li>master 是 stable/production 可佈署的版本</li><li>任何開發從 master branch 分支出 feature branch</li><li>送 pull request 開始進行行討論、code review和測試</li><li>最後合併回 master 代表可以佈署了</li></ul><p>pros and cons</p><ul><li>簡單、清楚、容易了解</li><li>搭配 Github 的 Pull Request 介面</li><li>沒有 release branch,東⻄一進 master 就上 production</li></ul><h3 id="ruby-on-rails" tabindex="-1"><a class="header-anchor" href="#ruby-on-rails" aria-hidden="true">#</a> Ruby on Rails</h3><ul><li>master 是開發版本</li><li>feature branches 審核完後,合併進 master</li><li>maintenance branches,用 cherry-pick 做 backporting</li><li>基本上就是 Github flow 加上 maintenance branches 維護舊版的設計</li><li>版本號(Tag)打在 master 上,透過 preview 和 beta 的版本號提前釋出</li></ul><h3 id="cmake" tabindex="-1"><a class="header-anchor" href="#cmake" aria-hidden="true">#</a> CMake</h3><ul><li>master 預備釋出的版本,feature branches 從這裡分支出去</li><li>feature branch 完成後,合併進 next</li><li>next 整合版本,完成的 feature branch 先合併到這裡進行測試</li><li>在 next 測好的 feature branch,才合併進 master</li><li>可以將 master 合併進 next,減少之後的 code conflicts</li><li>不會將 next 合併進 master</li><li>nightly 每天 1:00 UTC 自動從 next branch 分支支出來跑自動測試</li></ul><h2 id="git远程操作" tabindex="-1"><a class="header-anchor" href="#git远程操作" aria-hidden="true">#</a> Git远程操作</h2><p>Git的repo一般是用来指本地库，远程库（remote）主要用来存档、合作、分享和触发持续集成。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,65),u={href:"https://lwn.net/Articles/131657/",target:"_blank",rel:"noopener noreferrer"},p={href:"http://ihower.tw/blog/archives/7938",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const i=t("ExternalLinkIcon");return l(),r("div",null,[o,e("ul",null,[e("li",null,[a("corbet, "),e("a",u,[a("The guts of git"),n(i)]),a(": 最早的一篇介绍Git的文章，可以了解Git的总体设计思路")]),e("li",null,[a("张文钿, "),e("a",p,[a("git从微观到宏观"),n(i)])])])])}const f=s(c,[["render",m],["__file","basic.html.vue"]]);export{f as default};
