import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-bede4f5a.js";const p={},t=e(`<h1 id="stdlib-h" tabindex="-1"><a class="header-anchor" href="#stdlib-h" aria-hidden="true">#</a> stdlib.h</h1><h2 id="类型别名和宏" tabindex="-1"><a class="header-anchor" href="#类型别名和宏" aria-hidden="true">#</a> 类型别名和宏</h2><p>stdlib.h 定义了下面的类型别名。</p><ul><li>size_t：sizeof 的返回类型。</li><li>wchar_t：宽字符类型。</li></ul><p>stdlib.h 定义了下面的宏。</p><ul><li>NULL：空指针。</li><li>EXIT_SUCCESS：函数运行成功时的退出状态。</li><li>EXIT_FAILURE：函数运行错误时的退出状态。</li><li>RAND_MAX：rand() 函数可以返回的最大值。</li><li>MB_CUR_MAX：当前语言环境中，多字节字符占用的最大字节数。</li></ul><h2 id="abs-labs-llabs" tabindex="-1"><a class="header-anchor" href="#abs-labs-llabs" aria-hidden="true">#</a> abs()，labs()，llabs()</h2><p>这三个函数用于计算整数的绝对值。<code>abs()</code>用于 int 类型，<code>labs()</code>用于 long int 类型，<code>llabs()</code>用于 long long int 类型。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">labs</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">llabs</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 输出 |-2| = 2</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;|-2| = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 |4|  = 4</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;|4|  = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="div-ldiv-lldiv" tabindex="-1"><a class="header-anchor" href="#div-ldiv-lldiv" aria-hidden="true">#</a> div()，ldiv()，lldiv()</h2><p>这三个函数用来计算两个参数的商和余数。<code>div()</code>用于 int 类型的相除，<code>ldiv()</code>用于 long int 类型的相除，<code>lldiv()</code>用于 long long int 类型的相除。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">div_t</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> numer<span class="token punctuation">,</span> <span class="token keyword">int</span> denom<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ldiv_t</span> <span class="token function">ldiv</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span> numer<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span> denom<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">lldiv_t</span> <span class="token function">lldiv</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> numer<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> denom<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些函数把第2个参数（分母）除以第1个参数（分子），产生商和余数。这两个值通过一个数据结构返回，<code>div()</code>返回 div_t 结构，<code>ldiv()</code>返回 ldiv_t 结构，<code>lldiv()</code>返回 lldiv_t 结构。</p><p>这些结构都包含下面两个字段，</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span>　quot<span class="token punctuation">;</span>　 <span class="token comment">//　商</span>
<span class="token keyword">int</span>　rem<span class="token punctuation">;</span>　 <span class="token comment">//　余数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它们完整的定义如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> quot<span class="token punctuation">,</span> rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">div_t</span><span class="token punctuation">;</span>
    
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">long</span> <span class="token keyword">int</span> quot<span class="token punctuation">,</span> rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">ldiv_t</span><span class="token punctuation">;</span>
    
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> quot<span class="token punctuation">,</span> rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">lldiv_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">div_t</span> d <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 64 / -7 = -9</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;64 / -7 = %d\\n&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>quot<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 64 % -7 = 1</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;64 %% -7 = %d\\n&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串转成数值" tabindex="-1"><a class="header-anchor" href="#字符串转成数值" aria-hidden="true">#</a> 字符串转成数值</h2><h3 id="a-系列函数" tabindex="-1"><a class="header-anchor" href="#a-系列函数" aria-hidden="true">#</a> a 系列函数</h3><p><code>stdlib.h</code>定义了一系列函数，可以将字符串转为数字。</p><ul><li>atoi()：字符串转成 int 类型。</li><li>atof()：字符串转成 double 类型。</li><li>atol()：字符串转成 long int 类型。</li><li>atoll()：字符串转成 long long int 类型。</li></ul><p>它们的原型如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token function">atof</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">atol</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">atoll</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面函数的参数都是一个字符串指针，字符串开头的空格会被忽略，转换到第一个无效字符处停止。函数名称里面的<code>a</code>代表 ASCII，所以<code>atoi()</code>的意思是“ASCII to int”。</p><p>它们返回转换后的数值，如果字符串无法转换，则返回<code>0</code>。</p><p>下面是用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">atoi</span><span class="token punctuation">(</span><span class="token string">&quot;3490&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// 3490</span>
<span class="token function">atof</span><span class="token punctuation">(</span><span class="token string">&quot;3.141593&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// 3.141593</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果参数是数字开头的字符串，<code>atoi()</code>会只转换数字部分，比如<code>atoi(&quot;42regular&quot;)</code>会返回整数<code>42</code>。如果首字符不是数字，比如“hello world”，则会返回<code>0</code>。</p><h3 id="str-系列函数-浮点数转换" tabindex="-1"><a class="header-anchor" href="#str-系列函数-浮点数转换" aria-hidden="true">#</a> str 系列函数（浮点数转换）</h3><p><code>stdlib.h</code>还定义了一些更强功能的浮点数转换函数。</p><ul><li>strtof()：字符串转成 float 类型。</li><li>strtod()：字符串转成 double 类型。</li><li>strtold()：字符串转成 long double 类型。</li></ul><p>它们的原型如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">float</span> <span class="token function">strtof</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> restrict nptr<span class="token punctuation">,</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> restrict endptr
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">strtod</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> restrict nptr<span class="token punctuation">,</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> restrict endptr
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">strtold</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> restrict nptr<span class="token punctuation">,</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> restrict endptr
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们都接受两个参数，第一个参数是需要转换的字符串，第二个参数是一个指针，指向原始字符串里面无法转换的部分。</p><ul><li><code>nptr</code>：待转换的字符串（起首的空白字符会被忽略）。</li><li><code>endprt</code>：一个指针，指向不能转换部分的第一个字符。如果字符串可以完全转成数值，该指针指向字符串末尾的终止符<code>\\0</code>。这个参数如果设为 NULL，就表示不需要处理字符串剩余部分。</li></ul><p>它们的返回值是已经转换后的数值。如果字符串无法转换，则返回<code>0</code>。如果转换结果发生溢出，errno 会被设置为 ERANGE。如果值太大（无论是正数还是负数），函数返回<code>HUGE_VAL</code>；如果值太小，函数返回零。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>inp <span class="token operator">=</span> <span class="token string">&quot;   123.4567abdc&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>badchar<span class="token punctuation">;</span>

<span class="token keyword">double</span> val <span class="token operator">=</span> <span class="token function">strtod</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>badchar<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.456700</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> badchar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abdc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串可以完全转换的情况下，第二个参数指向<code>\\0</code>，因此可以用下面的写法判断是否完全转换。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>endptr <span class="token operator">==</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 完全转换</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 存在无法转换的字符</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不关心没有转换的部分，则可以将 endptr 设置为 NULL。</p><p>这些函数还可以将字符串转换为特殊值 Infinity 和 NaN。如果字符串包含 INF 或 INFINITY（大写或小写皆可），则将转换为 Infinity；如果字符串包含 NAN，则将返回 NaN。</p><h3 id="str-系列函数-整数转换" tabindex="-1"><a class="header-anchor" href="#str-系列函数-整数转换" aria-hidden="true">#</a> str 系列函数（整数转换）</h3><p>str 系列函数也有整数转换的对应函数。</p><ul><li>strtol()：字符串转成 long int 类型。</li><li>strtoll()：字符串转成 long long int 类型。</li><li>strtoul()：字符串转成 unsigned long int 类型。</li><li>strtoull()：字符串转成 unsigned long long int 类型。</li></ul><p>它们的原型如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">strtol</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> restrict nptr<span class="token punctuation">,</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> restrict endptr<span class="token punctuation">,</span>
  <span class="token keyword">int</span> base
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">strtoll</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> restrict nptr<span class="token punctuation">,</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> restrict endptr<span class="token punctuation">,</span>
  <span class="token keyword">int</span> base
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> restrict nptr<span class="token punctuation">,</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> restrict endptr<span class="token punctuation">,</span>
  <span class="token keyword">int</span> base
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">strtoull</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> restrict nptr<span class="token punctuation">,</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> restrict endptr<span class="token punctuation">,</span> <span class="token keyword">int</span> base
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们接受三个参数。</p><p>（1）<code>nPtr</code>：待转换的字符串（起首的空白字符会被忽略）。</p><p>（2）<code>endPrt</code>：一个指针，指向不能转换部分的第一个字符。如果字符串可以完全转成数值，该指针指向字符串末尾的终止符<code>\\0</code>。这个参数如果设为 NULL，就表示不需要处理字符串剩余部分。</p><p>（3）<code>base</code>：待转换整数的进制。这个值应该是<code>2</code>到<code>36</code>之间的整数，代表相应的进制，如果是特殊值<code>0</code>，表示让函数根据数值的前缀，自己确定进制，即如果数字有前缀<code>0</code>，则为八进制，如果数字有前缀<code>0x</code>或<code>0X</code>，则为十六进制。</p><p>它们的返回值是转换后的数值，如果转换不成功，返回<code>0</code>。</p><p>下面是转换十进制整数的例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;3490&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lu\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3490</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是转换十六进制整数的例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> end<span class="token punctuation">;</span>

<span class="token keyword">long</span> value <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span><span class="token string">&quot;0xff&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>end<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ld\\n&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 255</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无内容</span>

value <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span><span class="token string">&quot;0xffxx&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>end<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ld\\n&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 255</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// xx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>strtol()</code>可以指定字符串包含的是16进制整数。不能转换的部分，可以使用指针<code>end</code>进行访问。</p><p>下面是转换二进制整数的例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;101010&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">strtoul</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lu\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是让函数自行判断整数进制的例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> string <span class="token operator">=</span> <span class="token string">&quot;-1234567abc&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> remainderPtr<span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token operator">&amp;</span>remainderPtr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\&quot;%s\\&quot;\\n%s%ld\\n%s\\&quot;%s\\&quot;\\n&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;The original string is &quot;</span><span class="token punctuation">,</span>
    string<span class="token punctuation">,</span>
    <span class="token string">&quot;The converted value is &quot;</span><span class="token punctuation">,</span>
    x<span class="token punctuation">,</span>
    <span class="token string">&quot;The remainder of the original string is &quot;</span><span class="token punctuation">,</span>
    remainderPtr
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的输出结果如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>The original string is <span class="token string">&quot;-1234567abc&quot;</span>
The converted value is <span class="token operator">-</span><span class="token number">1234567</span>
The remainder of the original string is <span class="token string">&quot;abc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果被转换的值太大，<code>strtol()</code>函数在<code>errno</code>中存储<code>ERANGE</code>这个值，并返回<code>LONG_MIN</code>（原值为负数）或<code>LONG_MAX</code>（原值为正数），<code>strtoul()</code>则返回<code>ULONG_MAX</code>。</p><h2 id="rand" tabindex="-1"><a class="header-anchor" href="#rand" aria-hidden="true">#</a> rand()</h2><p><code>rand()</code>函数用来生成 0～RAND_MAX 之间的随机整数。<code>RAND_MAX</code>是一个定义在<code>stdlib.h</code>里面的宏，通常等于 INT_MAX。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 原型</span>
<span class="token keyword">int</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 示例</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望获得整数 N 到 M 之间的随机数（包括 N 和 M 两个端点值），可以使用下面的写法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> （M <span class="token operator">-</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> N<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如，1 到 6 之间的随机数，写法如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获得浮点数的随机值，可以使用下面的写法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 0 到 0.999999 之间的随机数</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0 to 0.99999: %f\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>RAND_MAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// n 到 m 之间的随机数：</span>
<span class="token comment">// n + m * (rand() / (float)RAND_MAX)</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;10.5 to 15.7: %f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">10.5</span> <span class="token operator">+</span> <span class="token number">5.2</span> <span class="token operator">*</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>RAND_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，由于<code>rand()</code>和<code>RAND_MAX</code>都是 int 类型，要用显示的类型转换转为浮点数。</p><h2 id="srand" tabindex="-1"><a class="header-anchor" href="#srand" aria-hidden="true">#</a> srand()</h2><p><code>rand()</code>是伪随机数函数，为了增加随机性，必须在调用它之前，使用<code>srand()</code>函数重置一下种子值。</p><p><code>srand()</code>函数接受一个无符号整数（unsigned int）作为种子值，没有返回值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通常使用<code>time(NULL)</code>函数返回当前距离时间纪元的秒数，作为<code>srand()</code>的参数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>
<span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>time()</code>的原型定义在头文件<code>time.h</code>里面，返回值的类型是类型别名<code>time_t</code>，具体的类型与系统有关，所以要强制转换一下类型。<code>time()</code>的参数是一个指针，指向一个具体的 time_t 类型的时间值，这里传入空指针<code>NULL</code>作为参数，由于 NULL 一般是<code>0</code>，所以也可以写成<code>time(0)</code>。</p><h2 id="abort" tabindex="-1"><a class="header-anchor" href="#abort" aria-hidden="true">#</a> abort()</h2><p><code>abort()</code>用于不正常地终止一个正在执行的程序。使用这个函数的目的，主要是它会触发 SIGABRT 信号，开发者可以在程序中为这个信号设置一个处理函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数没有参数。</p><h2 id="exit-quick-exit-exit" tabindex="-1"><a class="header-anchor" href="#exit-quick-exit-exit" aria-hidden="true">#</a> exit()，quick_exit()，_Exit()</h2><p>这三个函数都用来退出当前正在执行的程序。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">quick_exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">_Exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们都接受一个整数，表示程序的退出状态，<code>0</code>是正常退出，非零值表示发生错误，可以使用宏<code>EXIT_SUCCESS</code>和<code>EXIT_FAILURE</code>当作参数。它们本身没有返回值。</p><p>它们的区别是，退出时所做的清理工作不同。<code>exit()</code>是正常退出，系统会做完整的清理，比如更新所有文件流，并且删除临时文件。<code>quick_exit()</code>是快速退出，系统的清理工作稍微少一点。<code>_Exit()</code>是立即退出，不做任何清理工作。</p><p>下面是一些用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">quick_exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">_Exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="atexit-at-quick-exit" tabindex="-1"><a class="header-anchor" href="#atexit-at-quick-exit" aria-hidden="true">#</a> atexit()，at_quick_exit()</h2><p><code>atexit()</code>用来登记当前程序退出时（调用<code>exit()</code>或<code>main()</code>正常退出），所要执行的其他函数。</p><p><code>at_quick_exit()</code>则是登记使用<code>quick_exit()</code>方法退出当前程序时，所要执行的其他函数。</p><p><code>exit()</code>只能触发<code>atexit()</code>登记的函数，<code>quick_exit()</code>只能触发<code>at_quick_exit()</code>登记的函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">atexit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">at_quick_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的参数是要执行的函数地址，即函数名。它们的返回值都是调用成功时返回<code>0</code>，调用失败时返回非零值。</p><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">sign_off</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">too_bad</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">int</span> n<span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>sign_off<span class="token punctuation">)</span><span class="token punctuation">;</span>　　 <span class="token comment">/* 注册 sign_off()函数 */</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Enter an integer:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;That&#39;s no integer!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">atexit</span><span class="token punctuation">(</span>too_bad<span class="token punctuation">)</span><span class="token punctuation">;</span>　<span class="token comment">/* 注册 too_bad()函数 */</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d is %s.\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;even&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;odd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">sign_off</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;sign_off&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">too_bad</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;too bad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，用户输入失败时，会调用<code>sign_off()</code>和<code>too_bad()</code>函数；但是输入成功时只会调用<code>sign_off()</code>。因为只有输入失败时，才会进入<code>if</code>语句登记<code>too_bad()</code>。</p><p>另外，如果有多条<code>atexit()</code>语句，函数退出时最先调用的，是最后一个登记的函数。</p><p><code>atexit()</code>登记的函数（如上例的<code>sign_off</code>和<code>too_bad</code>）应该不带任何参数且返回类型为<code>void</code>。通常，这些函数会执行一些清理任务，例如删除临时文件或重置环境变量。</p><p><code>at_quick_exit()</code>也是同样的规则，下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">exit_handler_1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">exit_handler_2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;2\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">at_quick_exit</span><span class="token punctuation">(</span>exit_handler_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">at_quick_exit</span><span class="token punctuation">(</span>exit_handler_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">quick_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的示例，命令行会先输出2，再输出1。</p><h2 id="getenv" tabindex="-1"><a class="header-anchor" href="#getenv" aria-hidden="true">#</a> getenv()</h2><p><code>getenv()</code>用于获取环境变量的值。环境变量是操作系统提供的程序之外的一些环境参数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的参数是一个字符串，表示环境变量名。返回值也是一个字符串，表示环境变量的值。如果指定的环境变量不存在，则返回 NULL。</p><p>下面是输出环境变量<code>$PATH</code>的值的例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;PATH is %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;PATH&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="system" tabindex="-1"><a class="header-anchor" href="#system" aria-hidden="true">#</a> system()</h2><p><code>system()</code>函数用于执行外部程序。它会把它的参数字符串传递给操作系统，让操作系统的命令处理器来执行。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">system</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span> command <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个函数的返回值因编译器而异。但是标准规定，如果 NULL 作为参数，表示询问操作系统，是否有可用的命令处理器，如果有的话，返回一个非零值，否则返回零。</p><p>下面是执行<code>ls</code>命令的例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;ls -l&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="内存管理函数" tabindex="-1"><a class="header-anchor" href="#内存管理函数" aria-hidden="true">#</a> 内存管理函数</h2><p>stdlib.h 提供了一些内存操作函数，下面几个函数详见《内存管理》一章，其余在本节介绍。</p><ul><li>malloc()：分配内存区域</li><li>calloc()：分配内存区域。</li><li>realloc()：调节内存区域大小。</li><li>free()：释放内存区域。</li></ul><h3 id="aligned-alloc" tabindex="-1"><a class="header-anchor" href="#aligned-alloc" aria-hidden="true">#</a> aligned_alloc()</h3><p>很多系统有内存对齐的要求，即内存块的大小必须是某个值（比如64字节）的倍数，这样有利于提高处理速度。<code>aligned_alloc()</code>就用于分配满足内存对齐要求的内存块，它的原型如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">aligned_alloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> alignment<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数。</p><ul><li>alignment：整数，表示内存对齐的单位大小，一般是2的整数次幂（2、4、8、16……）。</li><li>size：整数，表示内存块的大小。</li></ul><p>分配成功时，它返回一个无类型指针，指向新分配的内存块。分配失败时，返回 NULL。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">aligned_alloc</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，<code>aligned_alloc()</code>分配的内存块，单位大小是64字节，要分配的字节数是256字节。</p><h2 id="qsort" tabindex="-1"><a class="header-anchor" href="#qsort" aria-hidden="true">#</a> qsort()</h2><p><code>qsort()</code>用来快速排序一个数组。它对数组成员的类型没有要求，任何类型数组都可以用这个函数排序。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>base<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> 
  <span class="token class-name">size_t</span> size<span class="token punctuation">,</span>
  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>compar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数接受四个参数。</p><ul><li>base：指向要排序的数组开始位置的指针。</li><li>nmemb：数组成员的数量。</li><li>size：数组每个成员占用的字节长度。</li><li>compar：一个函数指针，指向一个比较两个成员的函数。</li></ul><p>比较函数<code>compar</code>将指向数组两个成员的指针作为参数，并比较两个成员。如果第一个参数小于第二个参数，该函数应该返回一个负值；如果两个函数相等，返回<code>0</code>；如果第一个参数大于第二个参数，应该返回一个正数。</p><p>下面是一个用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">compar</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> elem0<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> elem1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> x <span class="token operator">=</span> elem0<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> y <span class="token operator">=</span> elem1<span class="token punctuation">;</span> 
  
  <span class="token keyword">return</span> <span class="token operator">*</span>x <span class="token operator">-</span> <span class="token operator">*</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">qsort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compar<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面示例，会输出排序好的数组“1 2 3 6 8 10 13 14 17”。</p><h2 id="bsearch" tabindex="-1"><a class="header-anchor" href="#bsearch" aria-hidden="true">#</a> bsearch()</h2><p><code>bsearch()</code>使用二分法搜索，在数组中搜索一个值。它对数组成员的类型没有要求，任何类型数组都可以用这个函数搜索值。</p><p>注意，该方法只对已经排序好的数组有效。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">bsearch</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> key<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> base<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> size<span class="token punctuation">,</span>
  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>compar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数接受5个参数。</p><ul><li>key：指向要查找的值的指针。</li><li>base：指向数组开始位置的指针，数组必须已经排序。</li><li>nmemb：数组成员的数量。</li><li>size：数组每个成员占用的字节长度。</li><li>compar：指向一个将待查找值与其他值进行比较的函数的指针。</li></ul><p>比较函数<code>compar</code>将待查找的值作为第一个参数，将要比较的值作为第二个参数。如果第一个参数小于第二个参数，该函数应该返回一个负值；如果两个参数相等，返回<code>0</code>；如果第一个参数大于第二个参数，返回一个正值。</p><p>如果找到待查找的值，<code>bsearch()</code>返回指向该值的指针，如果找不到，返回 NULL。</p><p>下面是一个用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">compar</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> k <span class="token operator">=</span> key<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> v <span class="token operator">=</span> value<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token operator">*</span>k <span class="token operator">-</span> <span class="token operator">*</span>v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span><span class="token operator">*</span> r<span class="token punctuation">;</span>
  <span class="token keyword">int</span> key<span class="token punctuation">;</span>

  key <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// 包括在数组中</span>
  r <span class="token operator">=</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compar<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Found %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

  key <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token comment">// 不包括在数组中</span>
  r <span class="token operator">=</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compar<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Didn&#39;t find 30\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的示例，会输出下面的结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Found <span class="token number">12</span>
Didn&#39;t <span class="token function">find</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多字节字符函数" tabindex="-1"><a class="header-anchor" href="#多字节字符函数" aria-hidden="true">#</a> 多字节字符函数</h2><p>stdlib.h 提供了下面的函数，用来操作多字节字符，详见《多字节字符》一章。</p><ul><li>mblen()：多字节字符的字节长度。</li><li>mbtowc()：将多字节字符转换为宽字符。</li><li>wctomb()：将宽字符转换为多字节字符。</li><li>mbstowcs()：将多字节字符串转换为宽字符串。</li><li>wcstombs()：将宽字符串转换为多字节字符串。</li></ul>`,156),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","stdlib.h.html.vue"]]);export{r as default};
