import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as t,a,b as s,d as r,e as p}from"./app-bede4f5a.js";const i={},l=p(`<h1 id="process-对象" tabindex="-1"><a class="header-anchor" href="#process-对象" aria-hidden="true">#</a> process 对象</h1><p><code>process</code>对象是 Node 原生提供的对象，表示当前运行的 Node 进程。它不用引入模块，可以直接使用。</p><h2 id="process-argv" tabindex="-1"><a class="header-anchor" href="#process-argv" aria-hidden="true">#</a> process.argv</h2><p><code>process.argv</code>是一个数组，表示启动脚本时的命令行参数。</p><p>它的前两项是固定的。</p><ul><li>第一项是 Node 可执行文件的路径</li><li>第二项是 JavaScript 脚本的路径</li></ul><p>后面的数组成员都是命令行参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> index.js <span class="token parameter variable">--watch</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这个命令执行后，在<code>index.js</code>脚本里面，<code>process.argv</code>数组共有三项。</p><ul><li><code>process.argv[0]</code>：/path/to/node</li><li><code>process.argv[1]</code>：/path/to/index.js</li><li><code>process.argv[2]</code>：--watch</li></ul><p>如果只需要命令行参数，可以用解构赋值获取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token operator">...</span>args <span class="token punctuation">]</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &quot;--watch&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码，<code>args</code>数组就是通过解构赋值，拿到的所有命令行参数。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,14),d={href:"https://humanwhocodes.com/blog/2018/10/extracting-command-line-arguments-nodejs/",target:"_blank",rel:"noopener noreferrer"};function u(h,m){const e=o("ExternalLinkIcon");return c(),t("div",null,[l,a("ul",null,[a("li",null,[a("a",d,[s("Extracting command line arguments from Node.js using destructuring"),r(e)]),s(", Nicholas C. Zakas")])])])}const k=n(i,[["render",u],["__file","process.html.vue"]]);export{k as default};
