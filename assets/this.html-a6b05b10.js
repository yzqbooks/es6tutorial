import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as o}from"./app-bede4f5a.js";const e={},t=o(`<h1 id="this-变量" tabindex="-1"><a class="header-anchor" href="#this-变量" aria-hidden="true">#</a> this 变量</h1><p>Node 应用的顶层变量是<code>global</code>，对应浏览器的<code>window</code>变量。</p><h2 id="顶层的-this" tabindex="-1"><a class="header-anchor" href="#顶层的-this" aria-hidden="true">#</a> 顶层的 this</h2><p>在 REPL 环境，顶层的<code>this</code>就指向<code>global</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&gt;</span> global <span class="token operator">===</span> <span class="token keyword">this</span>
<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>顶层变量是<code>global</code>和<code>this</code>的属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&gt;</span> <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>
<span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo
bar
<span class="token operator">&gt;</span> global<span class="token punctuation">.</span>foo
bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>foo</code>是一个顶层变量，自动生成了<code>this.foo</code>和<code>global.foo</code>两个属性。</p><p>在模块环境，顶层的<code>this</code>指向当前模块，即<code>module.exports</code>，默认是一个空对象，与<code>global</code>不是同一个对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模块环境</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> global<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模块内部的顶层变量，不会自动成为<code>global</code>和<code>this</code>的属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模块环境</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，顶层变量<code>foo</code>并不会生成<code>this.foo</code>和<code>global.foo</code>两个属性。这是因为<code>foo</code>是模块内部的变量，不是全局有效，因此不是<code>global</code>的属性，而<code>this</code>是当前的模块对象，<code>this.foo</code>代表模块实例的属性，这跟变量<code>foo</code>是两回事情。</p><p>另外，如果声明变量的时候，不使用<code>var</code>命令，而是直接赋值，那么该变量在 REPL 环境下将成为<code>global</code>和<code>this</code>的属性，在模块环境将只成为 global 的属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// REPL 环境</span>
<span class="token operator">&gt;</span> foo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>
<span class="token operator">&gt;</span> global<span class="token punctuation">.</span>foo
bar
<span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo
bar

<span class="token comment">// 模块环境</span>
foo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数内部的-this" tabindex="-1"><a class="header-anchor" href="#函数内部的-this" aria-hidden="true">#</a> 函数内部的 this</h2><p>直接执行一个函数（不使用<code>new</code>命令），函数内部的<code>this</code>指向<code>global</code>，REPL 环境和模块环境都是如此。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">testThis</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar</span>
<span class="token function">testThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是严格模式，函数内部的<code>this</code>返回<code>undefined</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">testThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;bar&quot;</span>
<span class="token function">testThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// TypeError: Cannot set property &#39;foo&#39; of undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用<code>new</code>命令调用某个函数，该函数就变成了构造函数，函数内部的<code>this</code>指向新建的实例对象。</p>`,21),c=[t];function p(i,l){return s(),a("div",null,c)}const r=n(e,[["render",p],["__file","this.html.vue"]]);export{r as default};
