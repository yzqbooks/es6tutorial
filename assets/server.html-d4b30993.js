import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as d,e as o}from"./app-bede4f5a.js";const n={},a=o(`<h1 id="ssh-服务器" tabindex="-1"><a class="header-anchor" href="#ssh-服务器" aria-hidden="true">#</a> SSH 服务器</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>SSH 的架构是服务器/客户端模式，两端运行的软件是不一样的。OpenSSH 的客户端软件是 ssh，服务器软件是 sshd。本章介绍 sshd 的各种知识。</p><p>如果没有安装 sshd，可以用下面的命令安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Debian</span>
$ <span class="token function">sudo</span> <span class="token function">aptitude</span> <span class="token function">install</span> openssh-server

<span class="token comment"># Red Hat</span>
$ <span class="token function">sudo</span> yum <span class="token function">install</span> openssh-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，sshd 安装后会跟着系统一起启动。如果当前 sshd 没有启动，可以用下面的命令启动。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令运行后，如果提示“sshd re-exec requires execution with an absolute path”，就需要使用绝对路径来启动。这是为了防止有人出于各种目的，放置同名软件在<code>$PATH</code>变量指向的目录中，代替真正的 sshd。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Centos、Ubuntu、OS X</span>
$ /usr/sbin/sshd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令运行以后，sshd 自动进入后台，所以命令后面不需要加上<code>&amp;</code>。</p><p>除了直接运行可执行文件，也可以通过 Systemd 启动 sshd。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动</span>
$ <span class="token function">sudo</span> systemctl start sshd.service

<span class="token comment"># 停止</span>
$ <span class="token function">sudo</span> systemctl stop sshd.service

<span class="token comment"># 重启</span>
$ <span class="token function">sudo</span> systemctl restart sshd.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的命令让 sshd 在计算机下次启动时自动运行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> sshd.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="sshd-配置文件" tabindex="-1"><a class="header-anchor" href="#sshd-配置文件" aria-hidden="true">#</a> sshd 配置文件</h2><p>sshd 的配置文件在<code>/etc/ssh</code>目录，主配置文件是<code>sshd_config</code>，此外还有一些安装时生成的密钥。</p><ul><li><code>/etc/ssh/sshd_config</code>：配置文件</li><li><code>/etc/ssh/ssh_host_ecdsa_key</code>：ECDSA 私钥。</li><li><code>/etc/ssh/ssh_host_ecdsa_key.pub</code>：ECDSA 公钥。</li><li><code>/etc/ssh/ssh_host_key</code>：用于 SSH 1 协议版本的 RSA 私钥。</li><li><code>/etc/ssh/ssh_host_key.pub</code>：用于 SSH 1 协议版本的 RSA 公钥。</li><li><code>/etc/ssh/ssh_host_rsa_key</code>：用于 SSH 2 协议版本的 RSA 私钥。</li><li><code>/etc/ssh/ssh_host_rsa_key.pub</code>：用于 SSH 2 协议版本的 RSA 公钥。</li><li><code>/etc/pam.d/sshd</code>：PAM 配置文件。</li></ul><p>注意，如果重装 sshd，上面这些密钥都会重新生成，导致客户端重新连接 ssh 服务器时，会跳出警告，拒绝连接。为了避免这种情况，可以在重装 sshd 时，先备份<code>/etc/ssh</code>目录，重装后再恢复这个目录。</p><p>配置文件<code>sshd_config</code>的格式是，每个命令占据一行。每行都是配置项和对应的值，配置项的大小写不敏感，与值之间使用空格分隔。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Port <span class="token number">2034</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的配置命令指定，配置项<code>Port</code>的值是<code>2034</code>。<code>Port</code>写成<code>port</code>也可。</p><p>配置文件还有另一种格式，就是配置项与值之间有一个等号，等号前后的空格可选。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Port <span class="token operator">=</span> <span class="token number">2034</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置文件里面，<code>#</code>开头的行表示注释。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 这是一行注释</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，注释只能放在一行的开头，不能放在一行的结尾。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Port <span class="token number">2034</span> <span class="token comment"># 此处不允许注释</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的写法是错误的。</p><p>另外，空行等同于注释。</p><p>sshd 启动时会自动读取默认的配置文件。如果希望使用其他的配置文件，可以用 sshd 命令的<code>-f</code>参数指定。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-f</span> /usr/local/ssh/my_config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令指定 sshd 使用另一个配置文件<code>my_config</code>。</p><p>修改配置文件以后，可以用 sshd 命令的<code>-t</code>（test）检查有没有语法错误。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-t</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置文件修改以后，并不会自动生效，必须重新启动 sshd。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> systemctl restart sshd.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="sshd-密钥" tabindex="-1"><a class="header-anchor" href="#sshd-密钥" aria-hidden="true">#</a> sshd 密钥</h2><p>sshd 有自己的一对或多对密钥。它使用密钥向客户端证明自己的身份。所有密钥都是公钥和私钥成对出现，公钥的文件名一般是私钥文件名加上后缀<code>.pub</code>。</p><p>DSA 格式的密钥文件默认为<code>/etc/ssh/ssh_host_dsa_key</code>（公钥为<code>ssh_host_dsa_key.pub</code>），RSA 格式的密钥为<code>/etc/ssh/ssh_host_rsa_key</code>（公钥为<code>ssh_host_rsa_key.pub</code>）。如果需要支持 SSH 1 协议，则必须有密钥<code>/etc/ssh/ssh_host_key</code>。</p><p>如果密钥不是默认文件，那么可以通过配置文件<code>sshd_config</code>的<code>HostKey</code>配置项指定。默认密钥的<code>HostKey</code>设置如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># HostKey for protocol version 1</span>
<span class="token comment"># HostKey /etc/ssh/ssh_host_key</span>

<span class="token comment"># HostKeys for protocol version 2</span>
<span class="token comment"># HostKey /etc/ssh/ssh_host_rsa_key</span>
<span class="token comment"># HostKey /etc/ssh/ssh_host_dsa_ke</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令前面的<code>#</code>表示这些行都是注释，因为这是默认值，有没有这几行都一样。</p><p>如果要修改密钥，就要去掉行首的<code>#</code>，指定其他密钥。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>HostKey /usr/local/ssh/my_dsa_key
HostKey /usr/local/ssh/my_rsa_key
HostKey /usr/local/ssh/my_old_ssh1_key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sshd-配置项" tabindex="-1"><a class="header-anchor" href="#sshd-配置项" aria-hidden="true">#</a> sshd 配置项</h2><p>以下是<code>/etc/ssh/sshd_config</code>文件里面的配置项。</p><p><strong>AcceptEnv</strong></p><p><code>AcceptEnv</code>指定允许接受客户端通过<code>SendEnv</code>命令发来的哪些环境变量，即允许客户端设置服务器的环境变量清单，变量名之间使用空格分隔（<code>AcceptEnv PATH TERM</code>）。</p><p><strong>AllowGroups</strong></p><p><code>AllowGroups</code>指定允许登录的用户组（<code>AllowGroups groupName</code>，多个组之间用空格分隔。如果不使用该项，则允许所有用户组登录。</p><p><strong>AllowUsers</strong></p><p><code>AllowUsers</code>指定允许登录的用户，用户名之间使用空格分隔（<code>AllowUsers user1 user2</code>），也可以使用多行<code>AllowUsers</code>命令指定，用户名支持使用通配符。如果不使用该项，则允许所有用户登录。该项也可以使用<code>用户名@域名</code>的格式（比如<code>AllowUsers jones@example.com</code>）。</p><p><strong>AllowTcpForwarding</strong></p><p><code>AllowTcpForwarding</code>指定是否允许端口转发，默认值为<code>yes</code>（<code>AllowTcpForwarding yes</code>），<code>local</code>表示只允许本地端口转发，<code>remote</code>表示只允许远程端口转发。</p><p><strong>AuthorizedKeysFile</strong></p><p><code>AuthorizedKeysFile</code>指定储存用户公钥的目录，默认是用户主目录的<code>ssh/authorized_keys</code>目录（<code>AuthorizedKeysFile .ssh/authorized_keys</code>）。</p><p><strong>Banner</strong></p><p><code>Banner</code>指定用户登录后，sshd 向其展示的信息文件（<code>Banner /usr/local/etc/warning.txt</code>），默认不展示任何内容。</p><p><strong>ChallengeResponseAuthentication</strong></p><p><code>ChallengeResponseAuthentication</code>指定是否使用“键盘交互”身份验证方案，默认值为<code>yes</code>（<code>ChallengeResponseAuthentication yes</code>）。</p><p>从理论上讲，“键盘交互”身份验证方案可以向用户询问多重问题，但是实践中，通常仅询问用户密码。如果要完全禁用基于密码的身份验证，请将<code>PasswordAuthentication</code>和<code>ChallengeResponseAuthentication</code>都设置为<code>no</code>。</p><p><strong>Ciphers</strong></p><p><code>Ciphers</code>指定 sshd 可以接受的加密算法（<code>Ciphers 3des-cbc</code>），多个算法之间使用逗号分隔。</p><p><strong>ClientAliveCountMax</strong></p><p><code>ClientAliveCountMax</code>指定建立连接后，客户端失去响应时，服务器尝试连接的次数（<code>ClientAliveCountMax 8</code>）。</p><p><strong>ClientAliveInterval</strong></p><p><code>ClientAliveInterval</code>指定允许客户端发呆的时间，单位为秒（<code>ClientAliveInterval 180</code>）。如果这段时间里面，客户端没有发送任何信号，SSH 连接将关闭。</p><p><strong>Compression</strong></p><p><code>Compression</code>指定客户端与服务器之间的数据传输是否压缩。默认值为<code>yes</code>（<code>Compression yes</code>）</p><p><strong>DenyGroups</strong></p><p><code>DenyGroups</code>指定不允许登录的用户组（<code>DenyGroups groupName</code>）。</p><p><strong>DenyUsers</strong></p><p><code>DenyUsers</code>指定不允许登录的用户（<code>DenyUsers user1</code>），用户名之间使用空格分隔，也可以使用多行<code>DenyUsers</code>命令指定。</p><p><strong>FascistLogging</strong></p><p>SSH 1 版本专用，指定日志输出全部 Debug 信息（<code>FascistLogging yes</code>）。</p><p><strong>HostKey</strong></p><p><code>HostKey</code>指定 sshd 服务器的密钥，详见前文。</p><p><strong>KeyRegenerationInterval</strong></p><p><code>KeyRegenerationInterval</code>指定 SSH 1 版本的密钥重新生成时间间隔，单位为秒，默认是3600秒（<code>KeyRegenerationInterval 3600</code>）。</p><p><strong>ListenAddress</strong></p><p><code>ListenAddress</code>指定 sshd 监听的本机 IP 地址，即 sshd 启用的 IP 地址，默认是 0.0.0.0（<code>ListenAddress 0.0.0.0</code>）表示在本机所有网络接口启用。可以改成只在某个网络接口启用（比如<code>ListenAddress 192.168.10.23</code>），也可以指定某个域名启用（比如<code>ListenAddress server.example.com</code>）。</p><p>如果要监听多个指定的 IP 地址，可以使用多行<code>ListenAddress</code>命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ListenAddress <span class="token number">172.16</span>.1.1
ListenAddress <span class="token number">192.168</span>.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LoginGraceTime</strong></p><p><code>LoginGraceTime</code>指定允许客户端登录时发呆的最长时间，比如用户迟迟不输入密码，连接就会自动断开，单位为秒（<code>LoginGraceTime 60</code>）。如果设为<code>0</code>，就表示没有限制。</p><p><strong>LogLevel</strong></p><p><code>LogLevel</code>指定日志的详细程度，可能的值依次为<code>QUIET</code>、<code>FATAL</code>、<code>ERROR</code>、<code>INFO</code>、<code>VERBOSE</code>、<code>DEBUG</code>、<code>DEBUG1</code>、<code>DEBUG2</code>、<code>DEBUG3</code>，默认为<code>INFO</code>（<code>LogLevel INFO</code>）。</p><p><strong>MACs</strong></p><p><code>MACs</code>指定sshd 可以接受的数据校验算法（<code>MACs hmac-sha1</code>），多个算法之间使用逗号分隔。</p><p><strong>MaxAuthTries</strong></p><p><code>MaxAuthTries</code>指定允许 SSH 登录的最大尝试次数（<code>MaxAuthTries 3</code>），如果密码输入错误达到指定次数，SSH 连接将关闭。</p><p><strong>MaxStartups</strong></p><p><code>MaxStartups</code>指定允许同时并发的 SSH 连接数量（MaxStartups）。如果设为<code>0</code>，就表示没有限制。</p><p>这个属性也可以设为<code>A:B:C</code>的形式，比如<code>MaxStartups 10:50:20</code>，表示如果达到10个并发连接，后面的连接将有50%的概率被拒绝；如果达到20个并发连接，则后面的连接将100%被拒绝。</p><p><strong>PasswordAuthentication</strong></p><p><code>PasswordAuthentication</code>指定是否允许密码登录，默认值为<code>yes</code>（<code>PasswordAuthentication yes</code>），建议改成<code>no</code>（禁止密码登录，只允许密钥登录）。</p><p><strong>PermitEmptyPasswords</strong></p><p><code>PermitEmptyPasswords</code>指定是否允许空密码登录，即用户的密码是否可以为空，默认为<code>yes</code>（<code>PermitEmptyPasswords yes</code>），建议改成<code>no</code>（禁止无密码登录）。</p><p><strong>PermitRootLogin</strong></p><p><code>PermitRootLogin</code>指定是否允许根用户登录，默认为<code>yes</code>（<code>PermitRootLogin yes</code>），建议改成<code>no</code>（禁止根用户登录）。</p><p>还有一种写法是写成<code>prohibit-password</code>，表示 root 用户不能用密码登录，但是可以用密钥登录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PermitRootLogin prohibit-password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>PermitUserEnvironment</strong></p><p><code>PermitUserEnvironment</code>指定是否允许 sshd 加载客户端的<code>~/.ssh/environment</code>文件和<code>~/.ssh/authorized_keys</code>文件里面的<code>environment= options</code>环境变量设置。默认值为<code>no</code>（<code>PermitUserEnvironment no</code>）。</p><p><strong>Port</strong></p><p><code>Port</code>指定 sshd 监听的端口，即客户端连接的端口，默认是22（<code>Port 22</code>）。出于安全考虑，可以改掉这个端口（比如<code>Port 8822</code>）。</p><p>配置文件可以使用多个<code>Port</code>命令，同时监听多个端口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Port <span class="token number">22</span>
Port <span class="token number">80</span>
Port <span class="token number">443</span>
Port <span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例表示同时监听4个端口。</p><p><strong>PrintMotd</strong></p><p><code>PrintMotd</code>指定用户登录后，是否向其展示系统的 motd（Message of the day）的信息文件<code>/etc/motd</code>。该文件用于通知所有用户一些重要事项，比如系统维护时间、安全问题等等。默认值为<code>yes</code>（<code>PrintMotd yes</code>），由于 Shell 一般会展示这个信息文件，所以这里可以改为<code>no</code>。</p><p><strong>PrintLastLog</strong></p><p><code>PrintLastLog</code>指定是否打印上一次用户登录时间，默认值为<code>yes</code>（<code>PrintLastLog yes</code>）。</p><p><strong>Protocol</strong></p><p><code>Protocol</code>指定 sshd 使用的协议。<code>Protocol 1</code>表示使用 SSH 1 协议，建议改成<code>Protocol 2</code>（使用 SSH 2 协议）。<code>Protocol 2,1</code>表示同时支持两个版本的协议。</p><p><strong>PubKeyAuthentication</strong></p><p><code>PubKeyAuthentication</code>指定是否允许公钥登录，默认值为<code>yes</code>（<code>PubKeyAuthentication yes</code>）。</p><p><strong>QuietMode</strong></p><p>SSH 1 版本专用，指定日志只输出致命的错误信息（<code>QuietMode yes</code>）。</p><p><strong>RSAAuthentication</strong></p><p><code>RSAAuthentication</code>指定允许 RSA 认证，默认值为<code>yes</code>（<code>RSAAuthentication yes</code>）。</p><p><strong>ServerKeyBits</strong></p><p><code>ServerKeyBits</code>指定 SSH 1 版本的密钥重新生成时的位数，默认是768（<code>ServerKeyBits 768</code>）。</p><p><strong>StrictModes</strong></p><p><code>StrictModes</code>指定 sshd 是否检查用户的一些重要文件和目录的权限。默认为<code>yes</code>（<code>StrictModes yes</code>），即对于用户的 SSH 配置文件、密钥文件和所在目录，SSH 要求拥有者必须是根用户或用户本人，用户组和其他人的写权限必须关闭。</p><p><strong>SyslogFacility</strong></p><p><code>SyslogFacility</code>指定 Syslog 如何处理 sshd 的日志，默认是 Auth（<code>SyslogFacility AUTH</code>）。</p><p><strong>TCPKeepAlive</strong></p><p><code>TCPKeepAlive</code>指定打开 sshd 跟客户端 TCP 连接的 keepalive 参数（<code>TCPKeepAlive yes</code>）。</p><p><strong>UseDNS</strong></p><p><code>UseDNS</code>指定用户 SSH 登录一个域名时，服务器是否使用 DNS，确认该域名对应的 IP 地址包含本机（<code>UseDNS yes</code>）。打开该选项意义不大，而且如果 DNS 更新不及时，还有可能误判，建议关闭。</p><p><strong>UseLogin</strong></p><p><code>UseLogin</code>指定用户认证内部是否使用<code>/usr/bin/login</code>替代 SSH 工具，默认为<code>no</code>（<code>UseLogin no</code>）。</p><p><strong>UserPrivilegeSeparation</strong></p><p><code>UserPrivilegeSeparation</code>指定用户认证通过以后，使用另一个子线程处理用户权限相关的操作，这样有利于提高安全性。默认值为<code>yes</code>（<code>UsePrivilegeSeparation yes</code>）。</p><p><strong>VerboseMode</strong></p><p>SSH 2 版本专用，指定日志输出详细的 Debug 信息（<code>VerboseMode yes</code>）。</p><p><strong>X11Forwarding</strong></p><p><code>X11Forwarding</code>指定是否打开 X window 的转发，默认值为 no（<code>X11Forwarding no</code>）。</p><p>修改配置文件以后，可以使用下面的命令验证，配置文件是否有语法错误。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-t</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新的配置文件生效，必须重启 sshd。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> systemctl restart sshd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="sshd-的命令行配置项" tabindex="-1"><a class="header-anchor" href="#sshd-的命令行配置项" aria-hidden="true">#</a> sshd 的命令行配置项</h2><p>sshd 命令有一些配置项。这些配置项在调用时指定，可以覆盖配置文件的设置。</p><p>（1）<code>-d</code></p><p><code>-d</code>参数用于显示 debug 信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2）<code>-D</code></p><p><code>-D</code>参数指定 sshd 不作为后台守护进程运行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）<code>-e</code></p><p><code>-e</code>参数将 sshd 写入系统日志 syslog 的内容导向标准错误（standard error）。</p><p>（4）<code>-f</code></p><p><code>-f</code>参数指定配置文件的位置。</p><p>（5）<code>-h</code></p><p><code>-h</code>参数用于指定密钥。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-h</span> /usr/local/ssh/my_rsa_key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（6）<code>-o</code></p><p><code>-o</code>参数指定配置文件的一个配置项和对应的值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-o</span> <span class="token string">&quot;Port 2034&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置项和对应值之间，可以使用等号。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-o</span> <span class="token string">&quot;Port = 2034&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果省略等号前后的空格，也可以不使用引号。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-o</span> <span class="token assign-left variable">Port</span><span class="token operator">=</span><span class="token number">2034</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-o</code>参数可以多个一起使用，用来指定多个配置关键字。</p><p>（7）<code>-p</code></p><p><code>-p</code>参数指定 sshd 的服务端口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-p</span> <span class="token number">2034</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令指定 sshd 在<code>2034</code>端口启动。</p><p><code>-p</code>参数可以指定多个端口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ sshd <span class="token parameter variable">-p</span> <span class="token number">2222</span> <span class="token parameter variable">-p</span> <span class="token number">3333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（8）<code>-t</code></p><p><code>-t</code>参数检查配置文件的语法是否正确。</p>`,174),c=[a];function i(r,t){return s(),d("div",null,c)}const h=e(n,[["render",i],["__file","server.html.vue"]]);export{h as default};
