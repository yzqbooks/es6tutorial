import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-bede4f5a.js";const c={},i=e(`<h1 id="ctype-h" tabindex="-1"><a class="header-anchor" href="#ctype-h" aria-hidden="true">#</a> ctype.h</h1><p><code>ctype.h</code>头文件定义了一系列字符处理函数的原型。</p><h2 id="字符测试函数" tabindex="-1"><a class="header-anchor" href="#字符测试函数" aria-hidden="true">#</a> 字符测试函数</h2><p>这些函数用来判断字符是否属于某种类型。</p><ul><li><code>isalnum()</code>：是否为字母数字</li><li><code>isalpha()</code>：是否为字母</li><li><code>isdigit()</code>：是否为数字</li><li><code>isxdigit()</code>：是否为十六进制数字符</li><li><code>islower()</code>：是否为小写字母</li><li><code>isupper()</code>：是否为大写字母</li><li><code>isblank()</code>：是否为标准的空白字符（包含空格、水平制表符或换行符）</li><li><code>isspace()</code>：是否为空白字符（空格、换行符、换页符、回车符、垂直制表符、水平制表符等）</li><li><code>iscntrl()</code>：是否为控制字符，比如 Ctrl + B</li><li><code>isprint()</code>：是否为可打印字符</li><li><code>isgraph()</code>：是否为空格以外的任意可打印字符</li><li><code>ispunct()</code>：是否为标点符号（除了空格、字母、数字以外的可打印字符）</li></ul><p>它们接受一个待测试的字符作为参数。注意，参数类型为<code>int</code>，而不是<code>char</code>，因为它们允许 EOF 作为参数。</p><p>如果参数字符属于指定类型，就返回一个非零整数（通常是<code>1</code>，表示为真），否则返回<code>0</code>（表示为伪）。</p><p>下面是一个例子，用户输入一个字符，程序判断是否为英文字母。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;it is an alpha character.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;it is not an alpha character.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符映射函数" tabindex="-1"><a class="header-anchor" href="#字符映射函数" aria-hidden="true">#</a> 字符映射函数</h2><p>这一类函数返回字符的某种对应形式，主要有两个函数。</p><ul><li><code>tolower()</code>：如果参数是大写字符，返回小写字符，否则返回原始参数。</li><li><code>toupper()</code>：如果参数是小写字符，返回大写字符，否则返回原始参数。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 将字符转为大写</span>
ch <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这两个函数不会改变原始字符。</p>`,14),t=[i];function o(p,l){return s(),a("div",null,t)}const u=n(c,[["render",o],["__file","ctype.h.html.vue"]]);export{u as default};
