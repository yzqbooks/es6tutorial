import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,b as s,d as e,e as t}from"./app-bede4f5a.js";const r={},l=t(`<h1 id="typescript-项目使用-npm-模块" tabindex="-1"><a class="header-anchor" href="#typescript-项目使用-npm-模块" aria-hidden="true">#</a> TypeScript 项目使用 npm 模块</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>npm 模块都是 JavaScript 代码。即使模块是用 TypeScript 写的，还是必须编译成 JavaScript 再发布，保证模块可以在没有 TypeScript 的环境运行。</p><p>问题就来了，TypeScript 项目开发时，加载外部 npm 模块，如果拿不到该模块的类型信息，就会导致无法开发。所以，必须有一个方法，可以拿到模块的类型信息。</p><p>有些 npm 模块本身可能包含<code>.d.ts</code>文件甚至完整的 TypeScript 代码。它的<code>package.json</code>文件里面有一个<code>types</code>字段，指向一个<code>.d.ts</code>文件，这就是它的类型声明文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
 <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;left-pad&quot;</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.3.0&quot;</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;String left pad&quot;</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
 <span class="token string-property property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.d.ts&quot;</span><span class="token punctuation">,</span>
 <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),d=n("code",null,".d.ts",-1),u={href:"https://www.typescriptlang.org/dt/search",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"@types/[模块名]",-1),m=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> lodash
$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> @types/lodash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>lodash 的类型描述就是<code>@types/lodash</code>的文件<code>index.d.ts</code>。</p><h2 id="ts-模块转-npm-模块" tabindex="-1"><a class="header-anchor" href="#ts-模块转-npm-模块" aria-hidden="true">#</a> TS 模块转 npm 模块</h2><p>TS 代码放在<code>ts</code>子目录，编译出来的 CommonJS 代码放在<code>dist</code>子目录。</p><h2 id="如何写-typescript-模块" tabindex="-1"><a class="header-anchor" href="#如何写-typescript-模块" aria-hidden="true">#</a> 如何写 TypeScript 模块</h2><p>首先，创建模块目录，然后在该目录里面新建一个<code>tsconfig.json</code>。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2015&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;src/**/*&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&quot;declaration&quot;: true</code>：生成 .d.ts 文件，方便其他使用 TypeScript 的开发者加载你的库。</li><li><code>&quot;module&quot;: &quot;commonjs&quot;</code>：编译后的模块格式为<code>commonjs</code>，表示该模块供 Node.js 使用。如果供浏览器使用，则要写成<code>&quot;module&quot;: &quot;esnext&quot;</code>。</li><li><code>&quot;target&quot;: &quot;es2015&quot;</code>：生成的 JavaScript 代码版本为 ES2015，需要 Node.js 8 以上版本。</li><li><code>&quot;outDir&quot;: &quot;./dist&quot;</code>：编译后的文件放在<code>./dist</code>目录。</li><li><code>include</code>：指定需要编译的文件。</li></ul><p>然后，使用 TypeScript 编写仓库代码。可以在<code>src</code>子目录里面，编写一个入口文件<code>index.ts</code>。</p><p>最后，编写<code>package.json</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hwrld&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Can log \\&quot;hello world\\&quot; and \\&quot;goodbye world\\&quot; to the console!&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/index.d.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;/dist&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>里面的<code>&quot;types&quot;: &quot;dist/index.d.ts&quot;</code>字段指定类型声明文件，否则使用这个库的 TypeScript 开发者找不到类型声明文件。<code>files</code>属性指定打包进入 npm 模块的文件。</p><p>然后，就是编译和发布。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc
$ <span class="token function">npm</span> publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,15),k={href:"https://www.tsmean.com/articles/how-to-write-a-typescript-library/",target:"_blank",rel:"noopener noreferrer"};function q(h,b){const a=p("ExternalLinkIcon");return i(),c("div",null,[l,n("p",null,[s("如果某个模块没有"),d,s("文件，TypeScript 官方和社区就自发为常用模块添加类型描述，可以去"),n("a",u,[s("官方网站"),e(a)]),s("搜索，然后安装网站给出的 npm 类型模块，通常是"),v,s("。")]),m,n("ul",null,[n("li",null,[n("a",k,[s("How to Write a TypeScript Library"),e(a)]),s(", by tsmean")])])])}const _=o(r,[["render",q],["__file","npm.html.vue"]]);export{_ as default};
