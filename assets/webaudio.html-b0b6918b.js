import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-bede4f5a.js";const t={},p=e(`<h1 id="web-audio-api" tabindex="-1"><a class="header-anchor" href="#web-audio-api" aria-hidden="true">#</a> Web Audio API</h1><p>Web Audio API 用于操作声音。这个 API 可以让网页发出声音。</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><p>浏览器原生提供<code>AudioContext</code>对象，该对象用于生成一个声音的上下文，与扬声器相连。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> audioContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudioContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，获取音源文件，将其在内存中解码，就可以播放声音了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudioContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;sound.mp4&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">arrayBuffer</span> <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span><span class="token function">decodeAudioData</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">audioBuffer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 播放声音</span>
    <span class="token keyword">const</span> source <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createBufferSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    source<span class="token punctuation">.</span>buffer <span class="token operator">=</span> audioBuffer<span class="token punctuation">;</span>
    source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
    source<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="context-createbuffer" tabindex="-1"><a class="header-anchor" href="#context-createbuffer" aria-hidden="true">#</a> context.createBuffer()</h2><p><code>context.createBuffer()</code>方法生成一个内存的操作视图，用于存放数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buffer <span class="token operator">=</span> audioContext<span class="token punctuation">.</span><span class="token function">createBuffer</span><span class="token punctuation">(</span>channels<span class="token punctuation">,</span> signalLength<span class="token punctuation">,</span> sampleRate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>createBuffer</code>方法接受三个参数。</p><ul><li>channels：整数，表示声道。创建单声道的声音，该值为 1。</li><li>signalLength：整数，表示声音数组的长度。</li><li>sampleRate：浮点数，表示取样率，即一秒取样多少次。</li></ul><p><code>signalLength</code>和<code>sampleRate</code>这两个参数决定了声音的长度。比如，如果取样率是<code>1/3000</code>（每秒取样3000次），声音数组长度是6000，那么播放的声音是2秒长度。</p><p>接着，使用<code>buffer.getChannelData</code>方法取出一个声道。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>buffer.getChannelData</code>的参数<code>0</code>表示取出第一个声道。</p><p>下一步，将声音数组放入这个声道。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getChannelData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// singal 是一个声音数组</span>
<span class="token comment">// singalLengal 是该数组的长度</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> signalLength<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> signal<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，使用<code>context.createBufferSource</code>方法生成一个声音节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 生成一个声音节点</span>
<span class="token keyword">const</span> node <span class="token operator">=</span> audioContext<span class="token punctuation">.</span><span class="token function">createBufferSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将声音数组的内存对象，放入这个节点</span>
node<span class="token punctuation">.</span>buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
<span class="token comment">// 将声音上下文与节点连接</span>
node<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">.</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 开始播放声音</span>
node<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>audioContext<span class="token punctuation">.</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，播放一次后就将停止播放。如果需要循环播放，可以将节点对象的<code>looping</code>属性设为<code>true</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node<span class="token punctuation">.</span>looping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h2><p>Web Audio API 原生提供了一些过滤器（filter），用来处理声音。</p><p>首先，使用<code>context.createBiquadFilter</code>方法建立过滤器实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> filter <span class="token operator">=</span> audioContext<span class="token punctuation">.</span><span class="token function">createBiquadFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，通过<code>filter.type</code>属性指定过滤器的类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>filter<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;lowpass&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>目前，过滤器有以下这些类型。</p><ul><li>lowpass</li><li>highpass</li><li>bandpass</li><li>lowshelf</li><li>highshelf</li><li>peaking</li><li>notch</li><li>allpass</li></ul><p>然后指定过滤器的频率（frequency）属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>filter<span class="token punctuation">.</span>frequency<span class="token punctuation">.</span>value <span class="token operator">=</span> frequency
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，过滤器实例连接节点实例，就可以生效了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>sourceNode<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,34),c=[p];function o(i,l){return a(),s("div",null,c)}const d=n(t,[["render",o],["__file","webaudio.html.vue"]]);export{d as default};
