import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-bede4f5a.js";const l={},r=n("h1",{id:"intersectionobserver",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#intersectionobserver","aria-hidden":"true"},"#"),s(" IntersectionObserver")],-1),u=n("p",null,"网页开发时，常常需要了解某个元素是否进入了“视口”（viewport），即用户能不能看到它。",-1),d=n("p",null,[n("img",{src:"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016110201.gif",alt:""})],-1),k=n("p",null,"上图的绿色方块不断滚动，顶部会提示它的可见性。",-1),v=n("code",null,"scroll",-1),b={href:"https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"getBoundingClientRect()",-1),h=n("code",null,"scroll",-1),g={href:"http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://wicg.github.io/IntersectionObserver/",target:"_blank",rel:"noopener noreferrer"},y=t(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>IntersectionObserver API 的用法，简单来说就是两行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>IntersectionObserver</code>是浏览器原生提供的构造函数，接受两个参数：<code>callback</code>是可见性变化时的回调函数，<code>option</code>是配置对象（该参数可选）。</p><p><code>IntersectionObserver()</code>的返回值是一个观察器实例。实例的<code>observe()</code>方法可以指定观察哪个 DOM 节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 开始观察</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;example&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 停止观察</span>
observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 关闭观察器</span>
observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>observe()</code>的参数是一个 DOM 节点对象。如果要观察多个节点，就要多次调用这个方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>elementA<span class="token punctuation">)</span><span class="token punctuation">;</span>
observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>elementB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。规格写明，<code>IntersectionObserver</code>的实现，应该采用<code>requestIdleCallback()</code>，即只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只在其他任务执行完，浏览器有了空闲才会执行。</p><h2 id="intersectionobserver-observe" tabindex="-1"><a class="header-anchor" href="#intersectionobserver-observe" aria-hidden="true">#</a> IntersectionObserver.observe()</h2><p>IntersectionObserver 实例的<code>observe()</code>方法用来启动对一个 DOM 元素的观察。该方法接受两个参数：回调函数<code>callback</code>和配置对象<code>options</code>。</p><h3 id="callback-参数" tabindex="-1"><a class="header-anchor" href="#callback-参数" aria-hidden="true">#</a> callback 参数</h3><p>目标元素的可见性变化时，就会调用观察器的回调函数<code>callback</code>。</p><p><code>callback</code>会触发两次。一次是目标元素刚刚进入视口（开始可见），另一次是完全离开视口（开始不可见）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),_={href:"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"callback",-1),I=n("code",null,"entries",-1),x={href:"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"IntersectionObserverEntry",-1),j=n("code",null,"entries",-1),q=t(`<h3 id="intersectionobserverentry-对象" tabindex="-1"><a class="header-anchor" href="#intersectionobserverentry-对象" aria-hidden="true">#</a> IntersectionObserverEntry 对象</h3><p><code>IntersectionObserverEntry</code>对象提供目标元素的信息，一共有六个属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token number">3893.92</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rootBounds</span><span class="token operator">:</span> ClientRect <span class="token punctuation">{</span>
    <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token number">920</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">920</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">boundingClientRect</span><span class="token operator">:</span> ClientRect <span class="token punctuation">{</span>
     <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">intersectionRect</span><span class="token operator">:</span> ClientRect <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">intersectionRatio</span><span class="token operator">:</span> <span class="token number">0.54</span><span class="token punctuation">,</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> element
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个属性的含义如下。</p><blockquote><ul><li><code>time</code>：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li><li><code>target</code>：被观察的目标元素，是一个 DOM 节点对象</li><li><code>rootBounds</code>：容器元素的矩形区域的信息，<code>getBoundingClientRect()</code>方法的返回值，如果没有容器元素（即直接相对于视口滚动），则返回<code>null</code></li><li><code>boundingClientRect</code>：目标元素的矩形区域的信息</li><li><code>intersectionRect</code>：目标元素与视口（或容器元素）的交叉区域的信息</li><li><code>intersectionRatio</code>：目标元素的可见比例，即<code>intersectionRect</code>占<code>boundingClientRect</code>的比例，完全可见时为<code>1</code>，完全不可见时小于等于<code>0</code></li></ul></blockquote><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016110202.png" alt=""></p><p>上图中，灰色的水平方框代表视口，深红色的区域代表四个被观察的目标元素。它们各自的<code>intersectionRatio</code>图中都已经注明。</p>`,7),E={href:"http://jsbin.com/canuze/edit?js,console,output",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"IntersectionObserverEntry",-1),C=t(`<h3 id="option-对象" tabindex="-1"><a class="header-anchor" href="#option-对象" aria-hidden="true">#</a> Option 对象</h3><p><code>IntersectionObserver</code>构造函数的第二个参数是一个配置对象。它可以设置以下属性。</p><p><strong>（1）threshold 属性</strong></p><p><code>threshold</code>属性决定了什么时候触发回调函数，即元素进入视口（或者容器元素）多少比例时，执行回调函数。它是一个数组，每个成员都是一个门槛值，默认为<code>[0]</code>，即交叉比例（<code>intersectionRatio</code>）达到<code>0</code>时触发回调函数。</p><p>如果<code>threshold</code>属性是0.5，当元素进入视口50%时，触发回调函数。如果值为<code>[0.3, 0.6]</code>，则当元素进入30％和60％是触发回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>
  <span class="token parameter">entries</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* … */</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以自定义这个数组。比如，上例的<code>[0, 0.25, 0.5, 0.75, 1]</code>就表示当目标元素 0%、25%、50%、75%、100% 可见时，会触发回调函数。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016110202.gif" alt=""></p><p><strong>（2）root 属性，rootMargin 属性</strong></p><p><code>IntersectionObserver</code>不仅可以观察元素相对于视口的可见性，还可以观察元素相对于其所在容器的可见性。容器内滚动也会影响目标元素的可见性，参见本文开始时的那张示意图。</p><p>IntersectionObserver API 支持容器内滚动。<code>root</code>属性指定目标元素所在的容器节点。注意，容器元素必须是目标元素的祖先节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rootMargin</span><span class="token operator">:</span> <span class="token string">&#39;0px 0px -200px 0px&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>
  callback<span class="token punctuation">,</span>
  opts
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),A=n("code",null,"root",-1),B={href:"https://wicg.github.io/IntersectionObserver/#dom-intersectionobserverinit-rootmargin",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"rootMargin",-1),S=n("code",null,"rootBounds",-1),D=n("code",null,"intersectionRect",-1),M=n("code",null,"margin",-1),z=n("code",null,"0px 0px 0px 0px",-1),V=t(`<p>上例的<code>0px 0px -200px 0px</code>，表示容器的下边缘向上收缩200像素，导致页面向下滚动时，目标元素的顶部进入可视区域200像素以后，才会触发回调函数。</p><p>这样设置以后，不管是窗口滚动或者容器内滚动，只要目标元素可见性变化，都会触发观察器。</p><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h2><h3 id="惰性加载-lazy-load" tabindex="-1"><a class="header-anchor" href="#惰性加载-lazy-load" aria-hidden="true">#</a> 惰性加载（lazy load）</h3><p>有时，我们希望某些静态资源（比如图片），只有用户向下滚动，它们进入视口时才加载，这样可以节省带宽，提高网页性能。这就叫做“惰性加载”。</p><p>有了 IntersectionObserver API，实现起来就很容易了。图像的 HTML 代码可以写成下面这样。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>placeholder.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img-1.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>placeholder.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img-2.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>placeholder.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img-3.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，图像默认显示一个占位符，<code>data-src</code>属性是惰性加载的真正图像。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src <span class="token operator">=</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">;</span>
      observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;.lazy-loaded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，只有图像开始可见时，才会加载真正的图像文件。</p><h3 id="无限滚动" tabindex="-1"><a class="header-anchor" href="#无限滚动" aria-hidden="true">#</a> 无限滚动</h3><p>无限滚动（infinite scroll）指的是，随着网页滚动到底部，不断加载新的内容到页面，它的实现也很简单。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> intersectionObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果不可见，就返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>intersectionRatio <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">loadItems</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Loaded new items&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 开始观察</span>
intersectionObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.scrollerFooter&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无限滚动时，最好像上例那样，页面底部有一个页尾栏（又称<a href="sentinels">sentinels</a>，上例是<code>.scrollerFooter</code>）。一旦页尾栏可见，就表示用户到达了页面底部，从而加载新的条目放在页尾栏前面。否则就需要每一次页面加入新内容时，都调用<code>observe()</code>方法，对新增内容的底部建立观察。</p><h3 id="视频自动播放" tabindex="-1"><a class="header-anchor" href="#视频自动播放" aria-hidden="true">#</a> 视频自动播放</h3><p>下面是一个视频元素，希望它完全进入视口的时候自动播放，离开视口的时候自动暂停。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo.mp4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是 JS 代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;video&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isPaused <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>intersectionRatio <span class="token operator">!=</span> <span class="token number">1</span>  <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>video<span class="token punctuation">.</span>paused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      video<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      isPaused <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isPaused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      video<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      isPaused<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>video<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>IntersectionObserver()</code>的第二个参数是配置对象，它的<code>threshold</code>属性等于<code>1</code>，即目标元素完全可见时触发回调函数。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,21),F={href:"https://developers.google.com/web/updates/2016/04/intersectionobserver",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/WICG/IntersectionObserver/blob/gh-pages/explainer.md",target:"_blank",rel:"noopener noreferrer"},N={href:"https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/",target:"_blank",rel:"noopener noreferrer"};function W(T,U){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,u,d,k,n("p",null,[s("传统的实现方法是，监听到"),v,s("事件后，调用目标元素（绿色方块）的"),n("a",b,[m,e(a)]),s("方法，得到它对应于视口左上角的坐标，再判断是否在视口之内。这种方法的缺点是，由于"),h,s("事件密集发生，计算量很大，容易造成"),n("a",g,[s("性能问题"),e(a)]),s("。")]),n("p",null,[n("a",f,[s("IntersectionObserver API"),e(a)]),s("，可以自动“观察”元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做“交叉观察器”（intersection oberserver）。")]),y,n("p",null,[s("上面代码中，回调函数采用的是"),n("a",_,[s("箭头函数"),e(a)]),s("的写法。"),w,s("函数的参数（"),I,s("）是一个数组，每个成员都是一个"),n("a",x,[O,e(a)]),s("对象（详见下文）。举例来说，如果同时有两个被观察的对象的可见性发生变化，"),j,s("数组就会有两个成员。")]),q,n("p",null,[s("我写了一个 "),n("a",E,[s("Demo"),e(a)]),s("，演示"),R,s("对象。注意，这个 Demo 只能在 Chrome 51+ 运行。")]),C,n("p",null,[s("上面代码中，除了"),A,s("属性，还有"),n("a",B,[P,e(a)]),s("属性。该属性用来扩展或缩小"),S,s("这个矩形的大小，从而影响"),D,s("交叉区域的大小。它的写法类似于 CSS 的"),M,s("属性，比如"),z,s("，依次表示 top、right、bottom 和 left 四个方向的值。")]),V,n("ul",null,[n("li",null,[n("a",F,[s("IntersectionObserver’s Coming into View"),e(a)])]),n("li",null,[n("a",L,[s("Intersection Observers Explained"),e(a)])]),n("li",null,[n("a",N,[s("A Few Functional Uses for Intersection Observer to Know When an Element is in View"),e(a)]),s(", Preethi")])])])}const J=p(l,[["render",W],["__file","intersectionObserver.html.vue"]]);export{J as default};
