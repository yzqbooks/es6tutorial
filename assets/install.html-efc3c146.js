import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-bede4f5a.js";const o={},p=e(`<h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h1><h2 id="npm-install" tabindex="-1"><a class="header-anchor" href="#npm-install" aria-hidden="true">#</a> npm install</h2><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><p><code>npm install</code>命令用于安装模块。<code>npm i</code>是该命令的别名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> lodash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令在当前目录中安装了<code>lodash</code>模块。</p><p>默认安装的是最新版本（即<code>latest</code>标签指向的版本），但是你可以 semver 表达式指定安装的版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 等同于 npm install lodash</span>
$ <span class="token function">npm</span> <span class="token function">install</span> lodash@latest

<span class="token comment"># 指定确定的版本</span>
$ <span class="token function">npm</span> <span class="token function">install</span> lodash@4.17.4

<span class="token comment"># 指定版本范围</span>
$ <span class="token function">npm</span> <span class="token function">install</span> sax@<span class="token string">&quot;&gt;=4.15.0 &lt;4.18.0&quot;</span>

<span class="token comment"># 指定大版本</span>
$ <span class="token function">npm</span> <span class="token function">install</span> lodash@^4.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面最后一行命令，指定安装最新的<code>4.x</code>版。</p><p>默认情况下，<code>npm install</code>不会修改<code>package.json</code>。<code>--save</code>或<code>-S</code>参数，将模块写入<code>package.json</code>的<code>dependencies</code>字段，<code>--save-dev</code>或<code>-D</code>，将模块加入<code>package.json</code>的<code>devDependencies</code>字段。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将模块写入 package.json 的 dependencies 字段</span>
$ <span class="token function">npm</span> <span class="token function">install</span> lodash <span class="token parameter variable">--save</span>
$ <span class="token function">npm</span> <span class="token function">install</span> lodash <span class="token parameter variable">-S</span>

<span class="token comment"># 将模块写入 package.json 的 devDependencies 字段</span>
$ <span class="token function">npm</span> <span class="token function">install</span> lodash --save-dev
$ <span class="token function">npm</span> <span class="token function">install</span> lodash <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令将模块写入<code>package.json</code>的时候，如果<code>npm install</code>没有指定版本，npm 会在安装的版本号前面添加<code>^</code>。比如，假定 lodash 的最新版是4.17.4，那么执行<code>npm install -S lodash</code>以后，<code>package.json</code>将写入的版本范围如下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.17.4&quot;</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>^4.17.4</code>，表示兼容 4.17.4 以后的 4.x 版。</p><p>如果不希望出现这种默认行为，可以使用<code>--save-exact</code>指定只将当前确定的版本号，写入<code>package.json</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> lodash <span class="token parameter variable">--save</span> --save-exact
<span class="token comment"># 或者</span>
$ <span class="token function">npm</span> <span class="token function">install</span> lodash --save-dev --save-exact
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的命令以后，<code>package.json</code>里面的版本号将是固定的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;4.17.4&quot;</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>--save-exact</code>单独使用是无效的，必须与<code>--save</code>或<code>--save-dev</code>一起使用。</p><p><code>npm install</code>也支持直接输入 Github 代码库地址。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> git://github.com/package/path.git
$ <span class="token function">npm</span> <span class="token function">install</span> git://github.com/package/path.git<span class="token comment">#0.1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局安装" tabindex="-1"><a class="header-anchor" href="#全局安装" aria-hidden="true">#</a> 全局安装</h3><p>npm 还可以将模块安装在全局，供所有项目使用。注意，一般情况下，全局安装只适用于一些命令行工具。</p><p>全局安装，要使用<code>--global</code>或<code>-g</code>参数。此时，加上<code>--save</code>、<code>--save-exact</code>、<code>--save-dev</code>都是无效的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> create-react-app <span class="token parameter variable">--global</span>
<span class="token comment"># 或者</span>
$ <span class="token function">npm</span> <span class="token function">install</span> create-react-app <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令全局安装<code>create-react-app</code>模块。</p><h3 id="安装机制与重装" tabindex="-1"><a class="header-anchor" href="#安装机制与重装" aria-hidden="true">#</a> 安装机制与重装</h3><p>本地安装后，模块将存放在当前项目的<code>node_modules</code>子目录，然后只有在项目目录之中，才能调用这个模块。全局安装后，模块将存放在全局目录之中（通常是<code>/usr/local/lib/</code>），所有项目都可以调用这个模块，但是不应该这样做。</p><p>安装之前，<code>npm install</code>会先检查，<code>node_modules</code>目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p><p>如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用<code>-f</code>或<code>--force</code>参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> lodash <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果所有模块都要强制重新安装，那就删除<code>node_modules</code>目录，重新执行<code>npm install</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> node_modules
$ <span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装项目依赖" tabindex="-1"><a class="header-anchor" href="#安装项目依赖" aria-hidden="true">#</a> 安装项目依赖</h3><p>不使用任何参数时，只使用<code>npm install</code>，会默认安装<code>package.json</code>里面的<code>dependencies</code>字段和<code>devDependencies</code>字段列出的所有模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果使用<code>--production</code>参数，可以只安装<code>dependencies</code>字段的模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--production</span>
<span class="token comment"># 等同于</span>
$ <span class="token assign-left variable">NODE_ENV</span><span class="token operator">=</span>production <span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="避免安装权限" tabindex="-1"><a class="header-anchor" href="#避免安装权限" aria-hidden="true">#</a> 避免安装权限</h2><p>默认情况下，npm 全局模块都安装在系统目录（比如<code>/usr/local/lib/</code>），普通用户没有写入权限，需要用到<code>sudo</code>命令。这不是很方便，我们可以在没有 root 权限的情况下，安装全局模块。</p><p>首先，在主目录下新建配置文件<code>.npmrc</code>，在该文件中将<code>prefix</code>变量定义到一个你的个人目录下面（假定该目录是<code>~/my-npm-modules</code>）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>prefix <span class="token operator">=</span> /home/yourUsername/my-npm-modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此后，全局安装的模块都会安装在这个子目录中，npm也会到<code>~/my-npm-modules/bin</code>目录去寻找命令。</p><p>最后，将这个路径在<code>.bash_profile</code>文件（或<code>.bashrc</code>文件）中加入<code>PATH</code>变量。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=~</span>/my-npm-modules/bin:<span class="token environment constant">$PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="npm-update" tabindex="-1"><a class="header-anchor" href="#npm-update" aria-hidden="true">#</a> npm update</h2><p><code>npm update</code>命令可以更新本地安装的模块到最新版本（符合 semver 的设置），如果该模块没有安装，则会安装该模块。<code>npm up</code>和<code>npm upgrade</code>是该命令的缩写。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 升级当前项目的某个模块</span>
$ <span class="token function">npm</span> update lodash

<span class="token comment"># 升级全局安装的某个模块</span>
$ <span class="token function">npm</span> update <span class="token parameter variable">-g</span> lodash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不使用任何参数时，将更新当前项目的所有<code>dependencies</code>字段里面的模块。如果有模块没有安装，也将一起安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>--dev</code>参数会连带安装和更新<code>devDependencies</code>字段里面的模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> update <span class="token parameter variable">--dev</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新时，会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装最新版本。</p><p>使用<code>-S</code>或<code>--save</code>参数，可以在安装的同时，更新<code>package.json</code>里面模块的版本号。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 更新之前的package.json</span>
<span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">dep1</span><span class="token operator">:</span> <span class="token string">&quot;^1.1.1&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更新之后的package.json</span>
<span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">dep1</span><span class="token operator">:</span> <span class="token string">&quot;^1.2.2&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，从 npm v2.6.1 开始，<code>npm update</code>只更新顶层模块，而不更新依赖的依赖，以前版本是递归更新的。如果想取到老版本的效果，要使用下面的命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token parameter variable">--depth</span> <span class="token number">9999</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，如果已经安装的模块版本比 semver 指定的版本更加新时，<code>npm update</code>有降级效果。</p><h2 id="npm-uninstall" tabindex="-1"><a class="header-anchor" href="#npm-uninstall" aria-hidden="true">#</a> npm uninstall</h2><p><code>npm uninstall</code>命令，用来卸载已安装的模块。<code>npm remove</code>、<code>npm rm</code>、<code>npm r</code>、<code>npm un</code>和<code>npm unlink</code>，都是该命令的别名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 卸载项目模块</span>
$ <span class="token function">npm</span> uninstall lodash

<span class="token comment"># 卸载全局模块</span>
$ <span class="token function">npm</span> uninstall lodash <span class="token parameter variable">--global</span>
$ <span class="token function">npm</span> uninstall lodash <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>--save</code>参数（或<code>-S</code>），该模块将会从<code>package.json</code>的<code>dependencies</code>字段中移除。使用<code>--save-dev</code>参数（或<code>-D</code>）时，该模块将会从<code>package.json</code>的<code>devDependencies</code>字段中移除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> uninstall lodash <span class="token parameter variable">--save</span>
$ <span class="token function">npm</span> uninstall lodash --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="package-lock-json" tabindex="-1"><a class="header-anchor" href="#package-lock-json" aria-hidden="true">#</a> package-lock.json</h2><p>从 npm 5.0 版本开始，npm 模块默认会锁版本。在<code>npm install</code>命令安装依赖时，会自动生成<code>package-lock.json</code>文件，如果该文件已存在，则会更新该文件。下面是<code>package-lock.json</code>的一个例子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react-example&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;lockfileVersion&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;has-flag&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;resolved&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.npmjs.org/has-flag/-/has-flag-1.0.0.tgz&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;integrity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sha1-nZ55MWXOAXoA8AQYxD+UKnsdEfo=&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;supports-color&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.2.3&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;resolved&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.npmjs.org/supports-color/-/supports-color-3.2.3.tgz&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;integrity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sha1-ZawFBLOVQXHYpklGsq48u4pfVPY=&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;duplexify&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.5.0&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;resolved&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.npmjs.org/duplexify/-/duplexify-3.5.0.tgz&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;integrity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sha1-GqdzAC4VeEV+nZ1KULDMquvL1gQ=&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;end-of-stream&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;resolved&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.0.0.tgz&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;integrity&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sha1-1FlucCc0qT5A6a+GQxnqvZn/Lw4=&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个文件不仅指定了每个模块的精确版本，而且还指定了<code>node_modules</code>目录的结构（即哪些模块要安装在目录的顶层）。也就是说，哪怕你使用不同版本的 npm，只要有这个文件，最后得到的总是同样的<code>node_modules</code>目录。可以理解成，这个文件是<code>node_modules</code>目录的一个快照。</p><p>上面的例子中可以看到，每个目录不仅有精确版本（<code>version</code>字段），还有下载地址（<code>resolved</code>字段）、哈希值（<code>integrity</code>字段）和依赖模块（<code>dependencies</code>字段）。</p><p><code>package-lock.json</code>文件的<code>lockfileVersion</code>字段目前固定为1，以前的<code>npm-shrinkwrap.json</code>文件对应的<code>lockfileVersion</code>为0。这表明，前者实际上是后者的升级版。之所以叫一个新名字，是因为想表明这是一种全新的锁版本设计。</p><p><code>package-lock.json</code>与<code>npm-shrinkwrap.json</code>有一些区别。首先，npm 在任何情况下，都不会将<code>package-lock.json</code>加入发布的代码之中。然后，在一个有<code>package-lock.json</code>的目录之中，执行<code>npm shrinkwrap</code>命令时，npm 会自动将<code>package-lock.json</code>改名为<code>npm-shrinkwrap.json</code>。</p><p>如果同一个目录之中，同时存在<code>package-lock.json</code>与<code>npm-shrinkwrap.json</code>两个文件。这时，npm 会忽略<code>package-lock.json</code>，只使用<code>npm-shrinkwrap.json</code>。</p>`,71),c=[p];function t(d,i){return s(),a("div",null,c)}const u=n(o,[["render",t],["__file","install.html.vue"]]);export{u as default};
