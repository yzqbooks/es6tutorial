import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-bede4f5a.js";const p={},c=t(`<h1 id="locale-h" tabindex="-1"><a class="header-anchor" href="#locale-h" aria-hidden="true">#</a> locale.h</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p><code>locale.h</code>是程序的本地化设置，主要影响以下的行为。</p><ul><li>数字格式</li><li>货币格式</li><li>字符集</li><li>日期和时间格式</li></ul><p>它设置了以下几个宏。</p><ul><li>LC_COLLATE：影响字符串比较函数<code>strcoll()</code>和<code>strxfrm()</code>。</li><li>LC_CTYPE：影响字符处理函数的行为。</li><li>LC_MONETARY：影响货币格式。</li><li>LC_NUMERIC：影响<code>printf()</code>的数字格式。</li><li>LC_TIME：影响时间格式<code>strftime()</code>和<code>wcsftime()</code>。</li><li>LC_ALL：将以上所有类别设置为给定的语言环境。</li></ul><h2 id="setlocale" tabindex="-1"><a class="header-anchor" href="#setlocale" aria-hidden="true">#</a> setlocale()</h2><p><code>setlocale()</code>用来设置当前的地区。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">setlocal</span><span class="token punctuation">(</span><span class="token keyword">int</span> category<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数。第一个参数表示影响范围，如果值为前面五个表示类别的宏之一，则只影响该宏对应的类别，如果值为<code>LC_ALL</code>，则影响所有类别。第二个参数通常只为<code>&quot;C&quot;</code>（正常模式）或<code>&quot;&quot;</code>（本地模式）。</p><p>任意程序开始时，都隐含下面的调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的语句将格式本地化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面示例中，第二个参数为空字符，表示使用当前环境提供的本地化设置。</p><p>理论上，第二个参数也可以设为当前系统支持的某种格式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;en_US.UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是这样的话，程序的可移植性就变差了，因为无法保证其他系统也会支持那种格式。所以，通常都将第二个参数设为空字符串，使用操作系统的当前设置。</p><p><code>setlocale()</code>的返回值是一个字符串指针，表示已经设置好的格式。如果调用失败，则返回空指针 NULL。</p><p><code>setlocale()</code>可以用来查询当前地区，这时第二个参数设为 NULL 就可以了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span>loc<span class="token punctuation">;</span>

loc <span class="token operator">=</span> <span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 Starting locale: C</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Starting locale: %s\\n&quot;</span><span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">;</span>

loc <span class="token operator">=</span> <span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 Native locale: en_US.UTF-8    </span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Native locale: %s\\n&quot;</span><span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="localeconv" tabindex="-1"><a class="header-anchor" href="#localeconv" aria-hidden="true">#</a> localeconv()</h2><p><code>localeconv()</code>用来获取当前格式的详细信息。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">lconv</span><span class="token operator">*</span> <span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数返回一个 Struct 结构指针，该结构里面包含了格式信息，它的主要属性如下。</p><ul><li>char* mon_decimal_point：货币的十进制小数点字符，比如<code>.</code>。</li><li>char* mon_thousands_sep：货币的千位分隔符，比如<code>,</code>。</li><li>char* mon_grouping：货币的分组描述符。</li><li>char* positive_sign：货币的正值符号，比如<code>+</code>或为空字符串。</li><li>char* negative_sign：货币的负值符号，比如<code>-</code>。</li><li>char* currency_symbol：货币符号，比如<code>$</code>。</li><li>char frac_digits：打印货币金额时，十进制小数点后面输出几位小数，比如设为<code>2</code>。</li><li>char p_cs_precedes：设为<code>1</code>时，货币符号<code>currency_symbol</code>出现在非负金额前面。设为<code>0</code>时，出现在后面。</li><li>char n_cs_precedes：设为<code>1</code>时，货币符号<code>currency_symbol</code>出现在负的货币金额前面。设为<code>0</code>时，出现在后面。</li><li>char p_sep_by_space：决定了非负的货币金额与货币符号之间的分隔字符。</li><li>char n_sep_by_space：决定了负的货币金额与货币符号之间的分隔字符。</li><li>char p_sign_posn：决定了非负值的正值符号的位置。</li><li>char n_sign_posn：决定了负值的负值符号的位置。</li><li>char* int_curr_symbol：货币的国际符号，比如<code>USD</code>。</li><li>char int_frac_digits：使用国际符号时，<code>frac_digits</code>的值。</li><li>char int_p_cs_precedes：使用国际符号时，<code>p_cs_precedes</code>的值。</li><li>char int_n_cs_precedes：使用国际符号时，<code>n_cs_precedes</code>的值。</li><li>char int_p_sep_by_space：使用国际符号时，<code>p_sep_by_space</code>的值。</li><li>char int_n_sep_by_space：使用国际符号时，<code>n_sep_by_space</code>的值。</li><li>char int_p_sign_posn：使用国际符号时，<code>p_sign_posn</code>的值。</li><li>char int_n_sign_posn：使用国际符号时，<code>n_sign_posn</code>的值。</li></ul><p>下面程序打印当前系统的属性值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;locale.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">setlocale</span> <span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span><span class="token string">&quot;zh_CN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">lconv</span> <span class="token operator">*</span> lc<span class="token punctuation">;</span>
    lc<span class="token operator">=</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;decimal_point: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>decimal_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;thousands_sep: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>thousands_sep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;grouping: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>grouping<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;int_curr_symbol: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>int_curr_symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;currency_symbol: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>currency_symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;mon_decimal_point: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>mon_decimal_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;mon_thousands_sep: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>mon_thousands_sep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;mon_grouping: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>mon_grouping<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;positive_sign: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>positive_sign<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;negative_sign: %s\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>negative_sign<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;frac_digits: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>frac_digits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;p_cs_precedes: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>p_cs_precedes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;n_cs_precedes: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>n_cs_precedes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;p_sep_by_space: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>p_sep_by_space<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;n_sep_by_space: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>n_sep_by_space<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;p_sign_posn: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>p_sign_posn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;n_sign_posn: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>n_sign_posn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;int_frac_digits: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>int_frac_digits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;int_p_cs_precedes: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>int_p_cs_precedes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;int_n_cs_precedes: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>int_n_cs_precedes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;int_p_sep_by_space: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>int_p_sep_by_space<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;int_n_sep_by_space: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>int_n_sep_by_space<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;int_p_sign_posn: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>int_p_sign_posn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">&quot;int_n_sign_posn: %d\\n&quot;</span><span class="token punctuation">,</span>lc<span class="token operator">-&gt;</span>int_n_sign_posn<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),o=[c];function e(i,l){return s(),a("div",null,o)}const d=n(p,[["render",e],["__file","locale.h.html.vue"]]);export{d as default};
