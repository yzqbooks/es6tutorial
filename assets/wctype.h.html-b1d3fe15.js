import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-bede4f5a.js";const p={},c=t(`<h1 id="wctype-h" tabindex="-1"><a class="header-anchor" href="#wctype-h" aria-hidden="true">#</a> wctype.h</h1><p>wctype.h 提供 ctype.h 里面函数的宽字符版本。</p><h2 id="宽字符类型判断函数" tabindex="-1"><a class="header-anchor" href="#宽字符类型判断函数" aria-hidden="true">#</a> 宽字符类型判断函数</h2><p>下面函数判断宽字符的类型。</p><ul><li>iswalnum() 测试宽字符是否为字母数字</li><li>iswalpha() 测试宽字符是否为字母</li><li>iswblank() 测试这是否是一个宽空白字符</li><li>iswcntrl() 测试这是否是一个宽控制字符。</li><li>iswdigit() 测试这个宽字符是否是数字</li><li>iswgraph() 测试宽字符是否是可打印的非空格字符</li><li>iswlower() 测试宽字符是否为小写</li><li>iswprint() 测试宽字符是否可打印</li><li>iswpunct() 测试宽字符是否为标点符号</li><li>iswspace() 测试宽字符是否为空格</li><li>iswupper() 测试宽字符是否为大写</li><li>iswxdigit() 测试宽字符是否为十六进制数字</li></ul><h2 id="wctype-iswctype" tabindex="-1"><a class="header-anchor" href="#wctype-iswctype" aria-hidden="true">#</a> wctype()，iswctype()</h2><p><code>iswctype()</code>是上一节各种宽字符类型判断函数的通用版本，必须与<code>wctype()</code>配合使用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">iswctype</span><span class="token punctuation">(</span><span class="token class-name">wint_t</span> wc<span class="token punctuation">,</span> <span class="token class-name">wctype_t</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>iswctype()</code>接受两个参数，第一个参数是一个需要判断类型的宽字符，第二个参数是宽字符类型描述，来自<code>wctype()</code>的返回值。</p><p>如果宽字符属于指定类型，<code>iswctype()</code>返回一个非零值，否则返回零。</p><p><code>wctype()</code>用来获取某个种类宽字符的类型描述。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">wctype_t</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>wctype()</code>的参数是一个给定的字符串，可用的值如下：alnum、alpha、blank、cntrl、digit、graph、lower、print、punct、space、upper、xdigit。</p><p><code>wctype()</code>的返回值的类型为 wctype_t，通常是一个整数。如果参数是一个无效值，则返回<code>0</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;digit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 相当于</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iswdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例用来判断宽字符<code>c</code>是否为数值，相当于<code>iswdigit()</code>。</p><p><code>iswctype()</code>的完整类型判断如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;alnum&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswalnum(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;alpha&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswalpha(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;blank&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswblank(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;cntrl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswcntrl(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;digit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswdigit(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;graph&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswgraph(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;lower&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswlower(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;print&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswprint(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;punct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswpunct(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;space&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswspace(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;upper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswupper(c)</span>
<span class="token function">iswctype</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctype</span><span class="token punctuation">(</span><span class="token string">&quot;xdigit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 iswxdigit(c)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="大小写转换函数" tabindex="-1"><a class="header-anchor" href="#大小写转换函数" aria-hidden="true">#</a> 大小写转换函数</h2><p>wctype.h 提供以下宽字符大小写转换函数。</p><ul><li>towlower() 将大写宽字符转换为小写</li><li>towupper() 将小写宽字符转换为大写</li><li>towctrans() 宽字符大小写转换的通用函数</li><li>wctrans() 大小写转换的辅助函数，配合 towctrans() 使用</li></ul><p>先看<code>towlower()</code>和<code>towupper()</code>的用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">towlower</span><span class="token punctuation">(</span>L<span class="token char">&#39;B&#39;</span><span class="token punctuation">)</span> <span class="token comment">// b</span>
<span class="token function">towupper</span><span class="token punctuation">(</span>L<span class="token char">&#39;e&#39;</span><span class="token punctuation">)</span> <span class="token comment">// E</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>towctrans()</code>和<code>wctrans()</code>的原型如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">wint_t</span> <span class="token function">towctrans</span><span class="token punctuation">(</span><span class="token class-name">wint_t</span> wc<span class="token punctuation">,</span> <span class="token class-name">wctrans_t</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">wctrans_t</span> <span class="token function">wctrans</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是它们的用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">towctrans</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctrans</span><span class="token punctuation">(</span><span class="token string">&quot;toupper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 towupper(c)</span>
<span class="token function">towctrans</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">wctrans</span><span class="token punctuation">(</span><span class="token string">&quot;tolower&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 相当于 towlower(c)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,27),e=[c];function o(i,l){return s(),a("div",null,e)}const d=n(p,[["render",o],["__file","wctype.h.html.vue"]]);export{d as default};
