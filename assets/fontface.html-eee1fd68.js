import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,e as s}from"./app-bede4f5a.js";const o={},c=s(`<h1 id="fontface-api" tabindex="-1"><a class="header-anchor" href="#fontface-api" aria-hidden="true">#</a> FontFace API</h1><p>FontFace API 用来控制字体加载。</p><p>这个 API 提供一个构造函数<code>FontFace()</code>，返回一个字体对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">FontFace</span><span class="token punctuation">(</span>family<span class="token punctuation">,</span> source<span class="token punctuation">,</span> descriptors<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>FontFace()</code>构造函数接受三个参数。</p><ul><li><code>family</code>：字符串，表示字体名，写法与 CSS 的<code>@font-face</code>的<code>font-family</code>属性相同。</li><li><code>source</code>：字体文件的 URL（必须包括 CSS 的<code>url()</code>方法），或者是一个字体的 ArrayBuffer 对象。</li><li><code>descriptors</code>：对象，用来定制字体文件。该参数可选。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> fontFace <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FontFace</span><span class="token punctuation">(</span>
  <span class="token string">&#39;Roboto&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;url(https://fonts.example.com/roboto.woff2)&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

fontFace<span class="token punctuation">.</span>family <span class="token comment">// &quot;Roboto&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>FontFace()</code>返回的是一个字体对象，这个对象包含字体信息。注意，这时字体文件还没有开始加载。</p><p>字体对象包含以下属性。</p><ul><li><code>FontFace.family</code>：字符串，表示字体的名字，等同于 CSS 的<code>font-family</code>属性。</li><li><code>FontFace.display</code>：字符串，指定字体加载期间如何展示，等同于 CSS 的<code>font-display</code>属性。它有五个可能的值：<code>auto</code>（由浏览器决定）、<code>block</code>（字体加载期间，前3秒会显示不出内容，然后只要还没完成加载，就一直显示后备字体）、<code>fallback</code>（前100毫秒显示不出内容，后3秒显示后备字体，然后只要字体还没完成加载，就一直显示后备字体）、<code>optional</code>（前100毫秒显示不出内容，然后只要字体还没有完成加载，就一直显示后备字体），<code>swap</code>（只要字体没有完成加载，就一直显示后备字体）。</li><li><code>FontFace.style</code>：字符串，等同于 CSS 的<code>font-style</code>属性。</li><li><code>FontFace.weight</code>：字符串，等同于 CSS 的<code>font-weight</code>属性。</li><li><code>FontFace.stretch</code>：字符串，等同于 CSS 的<code>font-strentch</code>属性。</li><li><code>FontFace.unicodeRange</code>：字符串，等同于<code>descriptors</code>对象的同名属性。</li><li><code>FontFace.variant</code>：字符串，等同于<code>descriptors</code>对象的同名属性。</li><li><code>FontFace.featureSettings</code>：字符串，等同于<code>descriptors</code>对象的同名属性。</li><li><code>FontFace.status</code>：字符串，表示字体的加载状态，有四个可能的值：<code>unloaded</code>、<code>loading</code>、<code>loaded</code>、<code>error</code>。该属性只读。</li><li><code>FontFace.loaded</code>：返回一个 Promise 对象，字体加载成功或失败，会导致该 Promise 状态改变。该属性只读。</li></ul><p>字体对象的方法，只有一个<code>FontFace.load()</code>，该方法会真正开始加载字体。它返回一个 Promise 对象，状态由字体加载的结果决定。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FontFace</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;url(x)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

f<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 网页可以开始使用该字体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),t=[c];function d(i,l){return a(),e("div",null,t)}const r=n(o,[["render",d],["__file","fontface.html.vue"]]);export{r as default};
