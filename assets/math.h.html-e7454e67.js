import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-bede4f5a.js";const p={},t=e(`<h1 id="math-h" tabindex="-1"><a class="header-anchor" href="#math-h" aria-hidden="true">#</a> math.h</h1><p><code>math.h</code>头文件提供了很多数学函数。</p><p>很多数学函数的返回值是 double 类型，但是同时提供 float 类型与 long double 类型的版本，比如<code>pow()</code>函数就还有<code>powf()</code>和<code>powl()</code>版本。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span>      <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">float</span>       <span class="token function">powf</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">double</span> <span class="token function">powl</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简洁，下面就略去了函数的<code>f</code>后缀（float 类型）和<code>l</code>后缀（long double）版本。</p><h2 id="类型和宏" tabindex="-1"><a class="header-anchor" href="#类型和宏" aria-hidden="true">#</a> 类型和宏</h2><p>math.h 新定义了两个类型别名。</p><ul><li>float_t：（当前系统）最有效执行 float 运算的类型，宽度至少与 float 一样。</li><li>double_t：（当前系统）最有效执行 double 运算的类型，宽度至少与 double 一样。</li></ul><p>它们的具体类型可以通过宏<code>FLT_EVAL_METHOD</code>来了解。</p><table><thead><tr><th>FLT_EVAL_METHOD 的值</th><th>float_t 对应的类型</th><th>double_t 对应的类型</th></tr></thead><tbody><tr><td>0</td><td>float</td><td>double</td></tr><tr><td>1</td><td>double</td><td>double</td></tr><tr><td>2</td><td>long double</td><td>long double</td></tr><tr><td>其他</td><td>由实现决定</td><td>由实现决定</td></tr></tbody></table><p>math.h 还定义了一些宏。</p><ul><li><code>INFINITY</code>：表示正无穷，返回一个 float 类型的值。</li><li><code>NAN</code>：表示非数字（Not-A-Number），返回一个 float 类型的值。</li></ul><h2 id="错误类型" tabindex="-1"><a class="header-anchor" href="#错误类型" aria-hidden="true">#</a> 错误类型</h2><p>数学函数的报错有以下类型。</p><ul><li>Range errors：运算结果不能用函数返回类型表示。</li><li>Domain errors：函数参数不适用当前函数。</li><li>Pole errors：参数导致函数的极限值变成无限。</li><li>Overflow errors：运算结果太大，导致溢出。</li><li>Underflow errors：运算结果太小，导致溢出。</li></ul><p>变量<code>math_errhandling</code>提示了当前系统如何处理数学运算错误。</p><table><thead><tr><th>math_errhandling 的值</th><th>描述</th></tr></thead><tbody><tr><td>MATH_ERRNO</td><td>系统使用 errno 表示数学错误</td></tr><tr><td>MATH_ERREXCEPT</td><td>系统使用异常表示数学错误</td></tr><tr><td>MATH_ERREXCEPT</td><td>系统同时使用两者表示数学错误</td></tr></tbody></table><h2 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型" aria-hidden="true">#</a> 数值类型</h2><p>数学函数的参数可以分成以下几类：正常值，无限值，有限值和非数字。</p><p>下面的函数用来判断一个值的类型。</p><ul><li>fpclassify()：返回给定浮点数的分类。</li><li>isfinite()：如果参数不是无限或 NaN，则为真。</li><li>isinf()：如果参数是无限的，则为真。</li><li>isnan()：如果参数不是数字，则为真。</li><li>isnormal()：如果参数是正常数字，则为真。</li></ul><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">isfinite</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span>    <span class="token comment">// 1</span>
<span class="token function">isinf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>
<span class="token function">isnan</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>
<span class="token function">isnormal</span><span class="token punctuation">(</span><span class="token number">1e-310</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="signbit" tabindex="-1"><a class="header-anchor" href="#signbit" aria-hidden="true">#</a> signbit()</h2><p><code>signbit()</code>判断参数是否带有符号。如果参数为负值，则返回1，否则返回0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">signbit</span><span class="token punctuation">(</span><span class="token number">3490.0</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">signbit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">37.0</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三角函数" tabindex="-1"><a class="header-anchor" href="#三角函数" aria-hidden="true">#</a> 三角函数</h2><p>以下是三角函数，参数为弧度值。</p><ul><li>acos()：反余弦。</li><li>asin()：反正弦。</li><li>atan()：反正切</li><li>atan2()：反正切。</li><li>cos()：余弦。</li><li>sin()：正弦。</li><li>tan()：正切。</li></ul><p>不要忘了，上面所有函数都有 float 版本（函数名加上 f 后缀）和 long double 版本（函数名加上 l 后缀）。</p><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">cos</span><span class="token punctuation">(</span>PI<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 0.707107</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="双曲函数" tabindex="-1"><a class="header-anchor" href="#双曲函数" aria-hidden="true">#</a> 双曲函数</h2><p>以下是双曲函数，参数都为浮点数。</p><ul><li>acosh()：反双曲余弦。</li><li>asinh()：反双曲正弦。</li><li>atanh()：反双曲正切。</li><li>cosh()：双曲余弦。</li><li>tanh()：双曲正切。</li><li>sinh()：双曲正弦。</li></ul><h2 id="指数函数和对数函数" tabindex="-1"><a class="header-anchor" href="#指数函数和对数函数" aria-hidden="true">#</a> 指数函数和对数函数</h2><p>以下是指数函数和对数函数，它们的返回值都是 double 类型。</p><ul><li>exp()：计算欧拉数 e 的乘方，即 e<sup>x</sup>。</li><li>exp2()：计算 2 的乘方，即 2<sup>x</sup>。</li><li>expm1()：计算 e<sup>x</sup> - 1。</li><li>log()：计算自然对数，<code>exp()</code>的逆运算。</li><li>log2()：计算以2为底的对数。</li><li>log10()：计算以10为底的对数。</li><li>logp1()：计算一个数加 1 的自然对数，即<code>ln(x + 1)</code>。</li><li>logb()：计算以宏<code>FLT_RADIX</code>（一般为2）为底的对数，但只返回整数部分。</li></ul><p>下面是一些例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span> <span class="token comment">// 20.085500</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token number">20.0855</span><span class="token punctuation">)</span> <span class="token comment">// 3.000000</span>
<span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token comment">// 3.000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果结果值超出了 C 语言可以表示的最大值，函数将返回<code>HUGE_VAL</code>，它是一个在<code>math.h</code>中定义的 double 类型的值。</p><p>如果结果值太小，无法用 double 值表示，函数将返回0。以上这两种情况都属于出错。</p><h2 id="frexp" tabindex="-1"><a class="header-anchor" href="#frexp" aria-hidden="true">#</a> frexp()</h2><p><code>frexp()</code>将参数分解成浮点数和指数部分（2为底数），比如 1234.56 可以写成 0.6028125 * 2<sup>11</sup>，这个函数就能分解出 0.6028125 和 11。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">frexp</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数，第一个参数是用来分解的浮点数，第二个参数是一个整数变量指针。</p><p>它返回小数部分，并将指数部分放入变量<code>exp</code>。如果参数为<code>0</code>，则返回的小数部分和指数部分都为<code>0</code>。</p><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> frac<span class="token punctuation">;</span>
<span class="token keyword">int</span> expt<span class="token punctuation">;</span>

<span class="token comment">// expt 的值是 11</span>
frac <span class="token operator">=</span> <span class="token function">frexp</span><span class="token punctuation">(</span><span class="token number">1234.56</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>expt<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 1234.56 = 0.6028125 x 2^11</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1234.56 = %.7f x 2^%d\\n&quot;</span><span class="token punctuation">,</span> frac<span class="token punctuation">,</span> expt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ilogb" tabindex="-1"><a class="header-anchor" href="#ilogb" aria-hidden="true">#</a> ilogb()</h2><p><code>ilogb()</code>返回一个浮点数的指数部分，指数的基数是宏<code>FLT_RADIX</code>（一般是<code>2</code>）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ilogb</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的参数为<code>x</code>，返回值是 log<sub>r</sub>|x|，其中<code>r</code>为宏<code>FLT_RADIX</code>。</p><p>下面是用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">ilogb</span><span class="token punctuation">(</span><span class="token number">257</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
<span class="token function">ilogb</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
<span class="token function">ilogb</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token comment">// 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ldexp" tabindex="-1"><a class="header-anchor" href="#ldexp" aria-hidden="true">#</a> ldexp()</h2><p><code>ldexp()</code>将一个数乘以2的乘方。它可以看成是<code>frexp()</code>的逆运算，将小数部分和指数部分合成一个<code>f * 2^n</code>形式的浮点数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">ldexp</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数，第一个参数是乘数<code>x</code>，第二个参数是2的指数部分<code>exp</code>，返回“x * 2<sup>exp</sup>”。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">ldexp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 1024.000000</span>
<span class="token function">ldexp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 12.000000</span>
<span class="token function">ldexp</span><span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 12.000000</span>
<span class="token function">ldexp</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 0.250000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="modf" tabindex="-1"><a class="header-anchor" href="#modf" aria-hidden="true">#</a> modf()</h2><p><code>modf()</code>函数提取一个数的整数部分和小数部分。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token keyword">double</span> <span class="token function">modf</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">*</span> iptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数，第一个参数<code>value</code>表示待分解的数值，第二个参数是浮点数变量<code>iptr</code>。返回值是<code>value</code>的小数部分，整数部分放入变量<code>double</code>。</p><p>下面是一个例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// int_part 的值是 3.0</span>
<span class="token function">modf</span><span class="token punctuation">(</span><span class="token number">3.14159</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>int_part<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 0.14159</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="scalbn" tabindex="-1"><a class="header-anchor" href="#scalbn" aria-hidden="true">#</a> scalbn()</h2><p><code>scalbn()</code>用来计算“x * r<sup>n</sup>”，其中<code>r</code>是宏<code>FLT_RADIX</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">scalbn</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数，第一个参数<code>x</code>是乘数部分，第二个参数<code>n</code>是指数部分，返回值是“x * r<sup>n</sup>”。</p><p>下面是一些例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">scalbn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// 512.000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个函数有多个版本。</p><ul><li>scalbn()：指数 n 是 int 类型。</li><li>scalbnf()：float 版本的 scalbn()。</li><li>scalbnl()：long double 版本的 scalbn()。</li><li>scalbln()：指数 n 是 long int 类型。</li><li>scalblnf()：float 版本的 scalbln()。</li><li>scalblnl()：long double 版本的 scalbln()。</li></ul><h2 id="round" tabindex="-1"><a class="header-anchor" href="#round" aria-hidden="true">#</a> round()</h2><p><code>round()</code>函数以传统方式进行四舍五入，比如<code>1.5</code>舍入到<code>2</code>，<code>-1.5</code>舍入到<code>-2</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它返回一个浮点数。</p><p>下面是一些例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span>  <span class="token comment">// 3.000000</span>
<span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span>   <span class="token comment">// 4.000000</span>
<span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span>  <span class="token comment">// -2.000000</span>
<span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.14</span><span class="token punctuation">)</span> <span class="token comment">// -1.000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它还有一些其他版本。</p><ul><li>lround()：返回值是 long int 类型。</li><li>llround()：返回值是 long long int 类型。</li></ul><h2 id="trunc" tabindex="-1"><a class="header-anchor" href="#trunc" aria-hidden="true">#</a> trunc()</h2><p><code>trunc()</code>用来截去一个浮点数的小数部分，将剩下的整数部分以浮点数的形式返回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">trunc</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一些例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span>  <span class="token comment">// 3.000000</span>
<span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">3.8</span><span class="token punctuation">)</span>   <span class="token comment">// 3.000000</span>
<span class="token function">trunc</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span>  <span class="token comment">// -1.000000</span>
<span class="token function">trunc</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.14</span><span class="token punctuation">)</span> <span class="token comment">// -1.000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ceil" tabindex="-1"><a class="header-anchor" href="#ceil" aria-hidden="true">#</a> ceil()</h2><p><code>ceil()</code>返回不小于其参数的最小整数（double 类型），属于“向上舍入”。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一些例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">7.1</span><span class="token punctuation">)</span> <span class="token comment">// 8.0</span>
<span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">7.9</span><span class="token punctuation">)</span> <span class="token comment">// 8.0</span>
<span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7.1</span><span class="token punctuation">)</span> <span class="token comment">// -7.0</span>
<span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7.9</span><span class="token punctuation">)</span> <span class="token comment">// -7.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="floor" tabindex="-1"><a class="header-anchor" href="#floor" aria-hidden="true">#</a> floor()</h2><p><code>floor()</code>返回不大于其参数的最大整数，属于“向下舍入”。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一些例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">7.1</span><span class="token punctuation">)</span> <span class="token comment">// 7.0</span>
<span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">7.9</span><span class="token punctuation">)</span> <span class="token comment">// 7.0</span>
<span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7.1</span><span class="token punctuation">)</span> <span class="token comment">// -8.0</span>
<span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7.9</span><span class="token punctuation">)</span> <span class="token comment">// -8.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的函数可以实现“四舍五入”。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">round_nearest</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">&lt;</span> <span class="token number">0.0</span> <span class="token operator">?</span> <span class="token function">ceil</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fmod" tabindex="-1"><a class="header-anchor" href="#fmod" aria-hidden="true">#</a> fmod()</h2><p><code>fmod()</code>返回第一个参数除以第二个参数的余数，就是余值运算符<code>%</code>的浮点数版本，因为<code>%</code>只能用于整数运算。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">fmod</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它在幕后执行的计算是<code>x - trunc(x / y) * y</code>，返回值的符号与<code>x</code>的符号相同。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">fmod</span><span class="token punctuation">(</span><span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span>  <span class="token comment">//  1.100000</span>
<span class="token function">fmod</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9.2</span><span class="token punctuation">,</span> <span class="token number">5.1</span><span class="token punctuation">)</span> <span class="token comment">// -4.100000</span>
<span class="token function">fmod</span><span class="token punctuation">(</span><span class="token number">9.2</span><span class="token punctuation">,</span> <span class="token number">5.1</span><span class="token punctuation">)</span>  <span class="token comment">//  4.100000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浮点数比较函数" tabindex="-1"><a class="header-anchor" href="#浮点数比较函数" aria-hidden="true">#</a> 浮点数比较函数</h2><p>以下函数用于两个浮点数的比较，返回值的类型是整数。</p><ul><li>isgreater()：返回<code>x &gt; y</code>的结果。</li><li>isgreaterequal()：返回<code>x &gt;= y</code>的结果。</li><li>isless()：返回<code>x &lt; y</code>的结果。</li><li>islessequal()：返回<code>x &lt;= y</code>的结果。</li><li>islessgreater()：返回<code>(x &lt; y) || (x &gt; y)</code>的结果。</li></ul><p>下面是一些例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">isgreater</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>
<span class="token function">isgreaterequal</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>
<span class="token function">isless</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>
<span class="token function">islessequal</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span>   <span class="token comment">// 0</span>
<span class="token function">islessgreater</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>
<span class="token function">islessgreater</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">30.0</span><span class="token punctuation">)</span>   <span class="token comment">// 1</span>
<span class="token function">islessgreater</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span>   <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="isunordered" tabindex="-1"><a class="header-anchor" href="#isunordered" aria-hidden="true">#</a> isunordered()</h2><p><code>isunordered()</code>返回两个参数之中，是否存在 NAN。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">isunordered</span><span class="token punctuation">(</span>any_floating_type x<span class="token punctuation">,</span> any_floating_type y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一些例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">isunordered</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span>    <span class="token comment">// 0</span>
<span class="token function">isunordered</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
<span class="token function">isunordered</span><span class="token punctuation">(</span>NAN<span class="token punctuation">,</span> <span class="token number">30.0</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
<span class="token function">isunordered</span><span class="token punctuation">(</span>NAN<span class="token punctuation">,</span> NAN<span class="token punctuation">)</span>   <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他函数" tabindex="-1"><a class="header-anchor" href="#其他函数" aria-hidden="true">#</a> 其他函数</h2><p>下面是 math.h 包含的其它函数。</p><ul><li>pow()：计算参数<code>x</code>的<code>y</code>次方。</li><li>sqrt()：计算一个数的平方根。</li><li>cbrt()：计算立方根。</li><li>fabs()：计算绝对值。</li><li>hypot()：根据直角三角形的两条直角边，计算斜边。</li><li>fmax()：返回两个参数之中的最大值。</li><li>fmin()：返回两个参数之中的最小值。</li><li>remainder()：返回 IEC 60559 标准的余数，类似于<code>fmod()</code>，但是余数范围是从<code>-y/2</code>到<code>y/2</code>，而不是从<code>0</code>到<code>y</code>。</li><li>remquo()：同时返回余数和商，余数的计算方法与<code>remainder()</code>相同。</li><li>copysign()：返回一个大小等于第一个参数、符号等于第二个参数的值。</li><li>nan()：返回 NAN。</li><li>nextafter()：获取下一个（或者上一个，具体方向取决于第二个参数<code>y</code>）当前系统可以表示的浮点值。</li><li>nextoward()：与<code>nextafter()</code>相同，除了第二个参数是 long double 类型。</li><li>fdim()：如果第一个参数减去第二个参数大于<code>0</code>，则返回差值，否则返回<code>0</code>。</li><li>fma()：以快速计算的方式，返回<code>x * y + z</code>的结果。</li><li>nearbyint()：在当前舍入方向上，舍入到最接近的整数。当前舍入方向可以使用<code>fesetround()</code>函数设定。</li><li>rint()：在当前舍入方向上，舍入到最接近的整数，与<code>nearbyint()</code>相同。不同之处是，它会触发浮点数的<code>INEXACT</code>异常。</li><li>lrint()：在当前舍入方向上，舍入到最接近的整数，与<code>rint()</code>相同。不同之处是，返回值是一个整数，而不是浮点数。</li><li>erf()：计算一个值的误差函数。</li><li>erfc()：计算一个值的互补误差函数。</li><li>tgamma()：计算 Gamma 函数。</li><li>lgamma()：计算 Gamma 函数绝对值的自然对数。</li></ul><p>下面是一些例子。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 81.000000</span>
<span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span> <span class="token comment">// 1.73205</span>
<span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">1729.03</span><span class="token punctuation">)</span> <span class="token comment">// 12.002384</span>
<span class="token function">fabs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3490.0</span><span class="token punctuation">)</span> <span class="token comment">// 3490.000000</span>
<span class="token function">hypot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 5.000000</span>
<span class="token function">fmax</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span> <span class="token comment">// 10.000000</span>
<span class="token function">fmin</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span> <span class="token comment">//  3.000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,119),c=[t];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","math.h.html.vue"]]);export{r as default};
