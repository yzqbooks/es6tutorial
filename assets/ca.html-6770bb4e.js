import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as r,c as o,a as e,b as s,d as n,e as i}from"./app-bede4f5a.js";const l={},p=i(`<h1 id="ssh-证书登录" tabindex="-1"><a class="header-anchor" href="#ssh-证书登录" aria-hidden="true">#</a> SSH 证书登录</h1><p>SSH 是服务器登录工具，一般情况下都采用密码登录或密钥登录。</p><p>但是，SSH 还有第三种登录方法，那就是证书登录。某些情况下，它是更合理、更安全的登录方法，本文就介绍这种登录方法。</p><h2 id="非证书登录的缺点" tabindex="-1"><a class="header-anchor" href="#非证书登录的缺点" aria-hidden="true">#</a> 非证书登录的缺点</h2><p>密码登录和密钥登录，都有各自的缺点。</p><p>密码登录需要输入服务器密码，这非常麻烦，也不安全，存在被暴力破解的风险。</p><p>密钥登录需要服务器保存用户的公钥，也需要用户保存服务器公钥的指纹。这对于多用户、多服务器的大型机构很不方便，如果有员工离职，需要将他的公钥从每台服务器删除。</p><h2 id="证书登录是什么" tabindex="-1"><a class="header-anchor" href="#证书登录是什么" aria-hidden="true">#</a> 证书登录是什么？</h2><p>证书登录就是为了解决上面的缺点而设计的。它引入了一个证书颁发机构（Certificate Authority，简称 CA），对信任的服务器颁发服务器证书，对信任的用户颁发用户证书。</p><p>登录时，用户和服务器不需要提前知道彼此的公钥，只需要交换各自的证书，验证是否可信即可。</p><p>证书登录的主要优点有两个：（1）用户和服务器不用交换公钥，这更容易管理，也具有更好的可扩展性。（2）证书可以设置到期时间，而公钥没有到期时间。针对不同的情况，可以设置有效期很短的证书，进一步提高安全性。</p><h2 id="证书登录的流程" tabindex="-1"><a class="header-anchor" href="#证书登录的流程" aria-hidden="true">#</a> 证书登录的流程</h2><p>SSH 证书登录之前，如果还没有证书，需要生成证书。具体方法是：（1）用户和服务器都将自己的公钥，发给 CA；（2）CA 使用服务器公钥，生成服务器证书，发给服务器；（3）CA 使用用户的公钥，生成用户证书，发给用户。</p><p>有了证书以后，用户就可以登录服务器了。整个过程都是 SSH 自动处理，用户无感知。</p><p>第一步，用户登录服务器时，SSH 自动将用户证书发给服务器。</p><p>第二步，服务器检查用户证书是否有效，以及是否由可信的 CA 颁发。证实以后，就可以信任用户。</p><p>第三步，SSH 自动将服务器证书发给用户。</p><p>第四步，用户检查服务器证书是否有效，以及是否由信任的 CA 颁发。证实以后，就可以信任服务器。</p><p>第五步，双方建立连接，服务器允许用户登录。</p><h2 id="生成-ca-的密钥" tabindex="-1"><a class="header-anchor" href="#生成-ca-的密钥" aria-hidden="true">#</a> 生成 CA 的密钥</h2><p>证书登录的前提是，必须有一个 CA，而 CA 本质上就是一对密钥，跟其他密钥没有不同，CA 就用这对密钥去签发证书。</p><p>虽然 CA 可以用同一对密钥签发用户证书和服务器证书，但是出于安全性和灵活性，最好用不同的密钥分别签发。所以，CA 至少需要两对密钥，一对是签发用户证书的密钥，假设叫做<code>user_ca</code>，另一对是签发服务器证书的密钥，假设叫做<code>host_ca</code>。</p><p>使用下面的命令，生成<code>user_ca</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成 CA 签发用户证书的密钥</span>
$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-f</span> ~/.ssh/user_ca <span class="token parameter variable">-C</span> user_ca
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令会在<code>~/.ssh</code>目录生成一对密钥：<code>user_ca</code>（私钥）和<code>user_ca.pub</code>（公钥）。</p><p>这个命令的各个参数含义如下。</p><ul><li><code>-t rsa</code>：指定密钥算法 RSA。</li><li><code>-b 4096</code>：指定密钥的位数是4096位。安全性要求不高的场合，这个值可以小一点，但是不应小于1024。</li><li><code>-f ~/.ssh/user_ca</code>：指定生成密钥的位置和文件名。</li><li><code>-C user_ca</code>：指定密钥的识别字符串，相当于注释，可以随意设置。</li></ul><p>使用下面的命令，生成<code>host_ca</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 生成 CA 签发服务器证书的密钥</span>
$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-f</span> host_ca <span class="token parameter variable">-C</span> host_ca
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令会在<code>~/.ssh</code>目录生成一对密钥：<code>host_ca</code>（私钥）和<code>host_ca.pub</code>（公钥）。</p><p>现在，<code>~/.ssh</code>目录应该至少有四把密钥。</p><ul><li><code>~/.ssh/user_ca</code></li><li><code>~/.ssh/user_ca.pub</code></li><li><code>~/.ssh/host_ca</code></li><li><code>~/.ssh/host_ca.pub</code></li></ul><h2 id="ca-签发服务器证书" tabindex="-1"><a class="header-anchor" href="#ca-签发服务器证书" aria-hidden="true">#</a> CA 签发服务器证书</h2><p>有了 CA 以后，就可以签发服务器证书了。</p><p>签发证书，除了 CA 的密钥以外，还需要服务器的公钥。一般来说，SSH 服务器（通常是<code>sshd</code>）安装时，已经生成密钥<code>/etc/ssh/ssh_host_rsa_key</code>了。如果没有的话，可以用下面的命令生成。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> ssh-keygen <span class="token parameter variable">-f</span> /etc/ssh/ssh_host_rsa_key <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-t</span> rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会在<code>/etc/ssh</code>目录，生成<code>ssh_host_rsa_key</code>（私钥）和<code>ssh_host_rsa_key.pub</code>（公钥）。然后，需要把服务器公钥<code>ssh_host_rsa_key.pub</code>，复制或上传到 CA 所在的服务器。</p><p>上传以后，CA 就可以使用密钥<code>host_ca</code>为服务器的公钥<code>ssh_host_rsa_key.pub</code>签发服务器证书。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-s</span> host_ca <span class="token parameter variable">-I</span> host.example.com <span class="token parameter variable">-h</span> <span class="token parameter variable">-n</span> host.example.com <span class="token parameter variable">-V</span> +52w ssh_host_rsa_key.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令会生成服务器证书<code>ssh_host_rsa_key-cert.pub</code>（服务器公钥名字加后缀<code>-cert</code>）。这个命令各个参数的含义如下。</p><ul><li><code>-s</code>：指定 CA 签发证书的密钥。</li><li><code>-I</code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。</li><li><code>-h</code>：指定该证书是服务器证书，而不是用户证书。</li><li><code>-n host.example.com</code>：指定服务器的域名，表示证书仅对该域名有效。如果有多个域名，则使用逗号分隔。用户登录该域名服务器时，SSH 通过证书的这个值，分辨应该使用哪张证书发给用户，用来证明服务器的可信性。</li><li><code>-V +52w</code>：指定证书的有效期，这里为52周（一年）。默认情况下，证书是永远有效的。建议使用该参数指定有效期，并且有效期最好短一点，最长不超过52周。</li><li><code>ssh_host_rsa_key.pub</code>：服务器公钥。</li></ul><p>生成证书以后，可以使用下面的命令，查看证书的细节。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-L</span> <span class="token parameter variable">-f</span> ssh_host_rsa_key-cert.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，为证书设置权限。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">chmod</span> <span class="token number">600</span> ssh_host_rsa_key-cert.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ca-签发用户证书" tabindex="-1"><a class="header-anchor" href="#ca-签发用户证书" aria-hidden="true">#</a> CA 签发用户证书</h2><p>下面，再用 CA 签发用户证书。这时需要用户的公钥，如果没有的话，客户端可以用下面的命令生成一对密钥。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-f</span> ~/.ssh/user_key <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-t</span> rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令会在<code>~/.ssh</code>目录，生成<code>user_key</code>（私钥）和<code>user_key.pub</code>（公钥）。</p><p>然后，将用户公钥<code>user_key.pub</code>，上传或复制到 CA 服务器。接下来，就可以使用 CA 的密钥<code>user_ca</code>为用户公钥<code>user_key.pub</code>签发用户证书。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-s</span> user_ca <span class="token parameter variable">-I</span> user@example.com <span class="token parameter variable">-n</span> user <span class="token parameter variable">-V</span> +1d user_key.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令会生成用户证书<code>user_key-cert.pub</code>（用户公钥名字加后缀<code>-cert</code>）。这个命令各个参数的含义如下。</p><ul><li><code>-s</code>：指定 CA 签发证书的密钥</li><li><code>-I</code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。</li><li><code>-n user</code>：指定用户名，表示证书仅对该用户名有效。如果有多个用户名，使用逗号分隔。用户以该用户名登录服务器时，SSH 通过这个值，分辨应该使用哪张证书，证明自己的身份，发给服务器。</li><li><code>-V +1d</code>：指定证书的有效期，这里为1天，强制用户每天都申请一次证书，提高安全性。默认情况下，证书是永远有效的。</li><li><code>user_key.pub</code>：用户公钥。</li></ul><p>生成证书以后，可以使用下面的命令，查看证书的细节。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-L</span> <span class="token parameter variable">-f</span> user_key-cert.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，为证书设置权限。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">chmod</span> <span class="token number">600</span> user_key-cert.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="服务器安装证书" tabindex="-1"><a class="header-anchor" href="#服务器安装证书" aria-hidden="true">#</a> 服务器安装证书</h2><p>CA 生成服务器证书<code>ssh_host_rsa_key-cert.pub</code>以后，需要将该证书发回服务器，可以使用下面的<code>scp</code>命令，将证书拷贝过去。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">scp</span> ~/.ssh/ssh_host_rsa_key-cert.pub root@host.example.com:/etc/ssh/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，将下面一行添加到服务器配置文件<code>/etc/ssh/sshd_config</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的代码告诉 sshd，服务器证书是哪一个文件。</p><p>重新启动 sshd。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> systemctl restart sshd.service
<span class="token comment"># 或者</span>
$ <span class="token function">sudo</span> <span class="token function">service</span> sshd restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="服务器安装-ca-公钥" tabindex="-1"><a class="header-anchor" href="#服务器安装-ca-公钥" aria-hidden="true">#</a> 服务器安装 CA 公钥</h2><p>为了让服务器信任用户证书，必须将 CA 签发用户证书的公钥<code>user_ca.pub</code>，拷贝到服务器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">scp</span> ~/.ssh/user_ca.pub root@host.example.com:/etc/ssh/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令，将 CA 签发用户证书的公钥<code>user_ca.pub</code>，拷贝到 SSH 服务器的<code>/etc/ssh</code>目录。</p><p>然后，将下面一行添加到服务器配置文件<code>/etc/ssh/sshd_config</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>TrustedUserCAKeys /etc/ssh/user_ca.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的做法是将<code>user_ca.pub</code>加到<code>/etc/ssh/sshd_config</code>，这会产生全局效果，即服务器的所有账户都会信任<code>user_ca</code>签发的所有用户证书。</p><p>另一种做法是将<code>user_ca.pub</code>加到服务器某个账户的<code>~/.ssh/authorized_keys</code>文件，只让该账户信任<code>user_ca</code>签发的用户证书。具体方法是打开<code>~/.ssh/authorized_keys</code>，追加一行，开头是<code>@cert-authority principals=&quot;...&quot;</code>，然后后面加上<code>user_ca.pub</code>的内容，大概是下面这个样子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@cert-authority <span class="token assign-left variable">principals</span><span class="token operator">=</span><span class="token string">&quot;user&quot;</span> ssh-rsa AAAAB3Nz<span class="token punctuation">..</span>.XNRM1EX2gQ<span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>principals=&quot;user&quot;</code>指定用户登录的服务器账户名，一般就是<code>authorized_keys</code>文件所在的账户。</p><p>重新启动 sshd。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> systemctl restart sshd.service
<span class="token comment"># 或者</span>
$ <span class="token function">sudo</span> <span class="token function">service</span> sshd restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，SSH 服务器已配置为信任<code>user_ca</code>签发的证书。</p><h2 id="客户端安装证书" tabindex="-1"><a class="header-anchor" href="#客户端安装证书" aria-hidden="true">#</a> 客户端安装证书</h2><p>客户端安装用户证书很简单，就是从 CA 将用户证书<code>user_key-cert.pub</code>复制到客户端，与用户的密钥<code>user_key</code>保存在同一个目录即可。</p><h2 id="客户端安装-ca-公钥" tabindex="-1"><a class="header-anchor" href="#客户端安装-ca-公钥" aria-hidden="true">#</a> 客户端安装 CA 公钥</h2><p>为了让客户端信任服务器证书，必须将 CA 签发服务器证书的公钥<code>host_ca.pub</code>，加到客户端的<code>/etc/ssh/ssh_known_hosts</code>文件（全局级别）或者<code>~/.ssh/known_hosts</code>文件（用户级别）。</p><p>具体做法是打开<code>ssh_known_hosts</code>或<code>known_hosts</code>文件，追加一行，开头为<code>@cert-authority *.example.com</code>，然后将<code>host_ca.pub</code>文件的内容（即公钥）粘贴在后面，大概是下面这个样子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@cert-authority *.example.com ssh-rsa AAAAB3Nz<span class="token punctuation">..</span>.XNRM1EX2gQ<span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>*.example.com</code>是域名的模式匹配，表示只要服务器符合该模式的域名，且签发服务器证书的 CA 匹配后面给出的公钥，就都可以信任。如果没有域名限制，这里可以写成<code>*</code>。如果有多个域名模式，可以使用逗号分隔；如果服务器没有域名，可以用主机名（比如<code>host1,host2,host3</code>）或者 IP 地址（比如<code>11.12.13.14,21.22.23.24</code>）。</p><p>然后，就可以使用证书，登录远程服务器了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-i</span> ~/.ssh/user_key user@host.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令的<code>-i</code>参数用来指定用户的密钥。如果证书与密钥在同一个目录，则连接服务器时将自动使用该证书。</p><h2 id="废除证书" tabindex="-1"><a class="header-anchor" href="#废除证书" aria-hidden="true">#</a> 废除证书</h2><p>废除证书的操作，分成用户证书的废除和服务器证书的废除两种。</p><p>服务器证书的废除，用户需要在<code>known_hosts</code>文件里面，修改或删除对应的<code>@cert-authority</code>命令的那一行。</p><p>用户证书的废除，需要在服务器新建一个<code>/etc/ssh/revoked_keys</code>文件，然后在配置文件<code>sshd_config</code>添加一行，内容如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>RevokedKeys /etc/ssh/revoked_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>revoked_keys</code>文件保存不再信任的用户公钥，由下面的命令生成。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-kf</span> /etc/ssh/revoked_keys <span class="token parameter variable">-z</span> <span class="token number">1</span> ~/.ssh/user1_key.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面命令中，<code>-z</code>参数用来指定用户公钥保存在<code>revoked_keys</code>文件的哪一行，这个例子是保存在第1行。</p><p>如果以后需要废除其他的用户公钥，可以用下面的命令保存在第2行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-ukf</span> /etc/ssh/revoked_keys <span class="token parameter variable">-z</span> <span class="token number">2</span> ~/.ssh/user2_key.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,99),t={href:"https://smallstep.com/blog/ssh-emergency-access/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-using_openssh_certificate_authentication",target:"_blank",rel:"noopener noreferrer"},u={href:"https://gravitational.com/blog/how-to-ssh-properly/",target:"_blank",rel:"noopener noreferrer"};function b(v,m){const a=d("ExternalLinkIcon");return r(),o("div",null,[p,e("ul",null,[e("li",null,[e("a",t,[s("SSH Emergency Access"),n(a)]),s(", Carl Tashian")]),e("li",null,[e("a",h,[s("Using OpenSSH Certificate Authentication"),n(a)]),s(", Red Hat Enterprise Linux Deployment Guide")]),e("li",null,[e("a",u,[s("How to SSH Properly"),n(a)]),s(", Gus Luxton")])])])}const g=c(l,[["render",b],["__file","ca.html.vue"]]);export{g as default};
