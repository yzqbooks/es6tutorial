import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-bede4f5a.js";const o={},t=e(`<h1 id="errno-h" tabindex="-1"><a class="header-anchor" href="#errno-h" aria-hidden="true">#</a> errno.h</h1><h2 id="errno-变量" tabindex="-1"><a class="header-anchor" href="#errno-变量" aria-hidden="true">#</a> errno 变量</h2><p><code>errno.h</code>声明了一个 int 类型的 errno 变量，用来存储错误码（正整数）。</p><p>如果这个变量有非零值，表示已经执行的程序发生了错误。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;sqrt error; program terminated.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，计算一个负值的平方根是不允许的，会导致<code>errno</code>不等于<code>0</code>。</p><p>如果要检查某个函数是否发生错误，必须在即将调用该函数之前，将<code>errno</code>的值置为0，防止其他函数改变<code>errno</code>的值。</p><h2 id="宏" tabindex="-1"><a class="header-anchor" href="#宏" aria-hidden="true">#</a> 宏</h2><p>变量<code>errno</code>的值通常是两个宏<code>EDOM</code>或<code>ERANGE</code>。这两个宏都定义在<code>errno.h</code>。它们表示调用数学函数时，可能发生的两种错误。</p><ul><li>定义域错误（EDOM）：传递给函数的一个参数超出了函数的定义域。例如，负数传入<code>sqrt()</code>作为参数。</li><li>取值范围错误（ERANGE）：函数的返回值太大，无法用返回类型表示。例如，1000 传入<code>exp()</code>作为参数，因为 e^1000 太大，无法使用 double 类型表示。</li></ul><p>使用数学函数时，可以将<code>errno</code>的值与 EDOM 和 ERANGE 比较，用来确定到底发生了哪一类错误。</p>`,11),c=[t];function r(p,i){return s(),a("div",null,c)}const u=n(o,[["render",r],["__file","errno.h.html.vue"]]);export{u as default};
