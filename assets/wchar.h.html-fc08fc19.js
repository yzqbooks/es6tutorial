import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-bede4f5a.js";const c={},i=t(`<h1 id="wchar-h" tabindex="-1"><a class="header-anchor" href="#wchar-h" aria-hidden="true">#</a> wchar.h</h1><p>宽字符使用两个或四个字节表示一个字符，导致 C 语言常规的字符处理函数都会失效。wchar.h 定义了许多宽字符专用的处理函数。</p><h2 id="类型别名和宏" tabindex="-1"><a class="header-anchor" href="#类型别名和宏" aria-hidden="true">#</a> 类型别名和宏</h2><p>wchar.h 定义了一个类型别名 wint_t，表示宽字符对应整数值。</p><p>wchar.h 还定义了一个宏 WEOF，表示文件结束字符 EOF 的宽字符版。</p><h2 id="btowc-wctob" tabindex="-1"><a class="header-anchor" href="#btowc-wctob" aria-hidden="true">#</a> btowc()，wctob()</h2><p><code>btowc()</code>将单字节字符转换为宽字符，<code>wctob()</code>将宽字符转换为单字节字符。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">wint_t</span> <span class="token function">btowc</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">wctob</span><span class="token punctuation">(</span><span class="token class-name">wint_t</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>btowc()</code>返回一个宽字符。如果参数是 EOF，或转换失败，则返回 WEOF。</p><p><code>wctob()</code>返回一个单字节字符。如果参数是 WEOF，或者参数宽字符无法对应单个的单字节字符，则返回 EOF。</p><p>下面是用法示例。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">wint_t</span> wc <span class="token operator">=</span> <span class="token function">btowc</span><span class="token punctuation">(</span><span class="token char">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// 输出宽字符 B</span>
<span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">&quot;Wide character: %lc\\n&quot;</span><span class="token punctuation">,</span> wc<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">wctob</span><span class="token punctuation">(</span>wc<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出单字节字符 B</span>
<span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">&quot;Single-byte character: %c\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fwide" tabindex="-1"><a class="header-anchor" href="#fwide" aria-hidden="true">#</a> fwide()</h2><p><code>fwide()</code>用来设置一个字节流是宽字符流，还是多字节字符流。</p><p>如果使用宽字符专用函数处理字节流，就会默认设置字节流为宽字符流，否则就需要使用<code>fwide()</code>显式设置。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">fwide</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它接受两个参数，第一个参数是文件指针，第二个参数是字节流模式，有三种选择。</p><ul><li>0：字节流模式保持原样。</li><li>-1（或其他负值）：设为多字节字符流。</li><li>1（或其他正值）：设为宽字符流。</li></ul><p><code>fwide()</code>的返回值也分成三种情况：如果是宽字符流，返回一个正值；如果是多字节字符流，返回一个负值；如果是普通字符流，返回<code>0</code>。</p><p>一旦设置了字节流模式，就无法再更改。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;wchar.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">&quot;Hello world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> mode <span class="token operator">=</span> <span class="token function">fwide</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">wprintf</span><span class="token punctuation">(</span>L<span class="token string">&quot;Stream is %ls-oriented\\n&quot;</span><span class="token punctuation">,</span> mode <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> L<span class="token string">&quot;byte&quot;</span> <span class="token operator">:</span> L<span class="token string">&quot;wide&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中，<code>wprintf()</code>将字节流隐式设为宽字符模式，所以<code>fwide(stdout, 0)</code>的返回值大于零。</p><h2 id="宽字符专用函数" tabindex="-1"><a class="header-anchor" href="#宽字符专用函数" aria-hidden="true">#</a> 宽字符专用函数</h2><p>下面这些函数基本都是 stdio.h 里面的字符处理函数的宽字符版本，必须使用这些函数来操作宽字符。</p><ul><li>fgetwc() 从宽字符流中获取宽字符，对应 fgetc()。</li><li>fgetws() 从宽字符流中读取宽字符串，对应 fgets()。</li><li>fputwc() 将宽字符写入宽字符流，对应 fputc()。</li><li>fputws() 将宽字符串写入宽字符流，对应 fputs()。</li><li>fwprintf() 格式化宽输出到宽字符流，对应 fprintf()。</li><li>fwscanf() 来自宽字符流的格式化宽字符输入，对应 fscanf()。</li><li>getwchar() 从 stdin 获取一个宽字符，对应 getchar()。</li><li>getwc() 从 stdin 获取一个宽字符，对应 getc()。</li><li>putwchar() 写一个宽字符到 stdout，对应 putchar()。</li><li>putwc() 写一个宽字符到 stdout，对应 putc()。</li><li>swprintf() 格式化宽输出到宽字符串，对应 sprintf()。</li><li>swscanf() 来自宽字符串的格式化宽输入，对应 sscanf()。</li><li>ungetwc() 将宽字符推回输入流，对应 ungetc()。</li><li>vfwprintf() 可变参数的格式化宽字符输出到宽字符流，对应 vfprintf()。</li><li>vfwscanf() 来自宽字符流的可变参数格式化宽字符输入，对应 vfscanf()。</li><li>vswprintf() 可变参数的格式化宽字符输出到宽字符串，对应 vswprintf()。</li><li>vswscanf() 来自宽字符串的可变参数格式化宽字符输入，对应 vsscanf()。</li><li>vwprintf() 可变参数格式化宽字符输出，对应 vprintf()。</li><li>vwscanf() 可变参数的格式化宽字符输入，对应 vscanf()。</li><li>wcscat() 危险地连接宽字符串，对应 strcat()。</li><li>wcschr() 在宽字符串中查找宽字符，对应 strchr()。</li><li>wcscmp() 比较宽字符串，对应 strcmp()。</li><li>wcscoll() 比较两个考虑语言环境的宽字符串，对应 strcoll()。</li><li>wcscpy() 危险地复制宽字符串，对应 strcpy()。</li><li>wcscspn() 不是从宽字符串前面开始计算字符，对应 strcspn()。</li><li>wcsftime() 格式化的日期和时间输出，对应 strftime()。</li><li>wcslen() 返回宽字符串的长度，对应 strlen()。</li><li>wcsncat() 更安全地连接宽字符串，对应 strncat()。</li><li>wcsncmp() 比较宽字符串，长度有限，对应 strncmp()。</li><li>wcsncpy() 更安全地复制宽字符串，对应 strncpy()。</li><li>wcspbrk() 在宽字符串中搜索一组宽字符中的一个，对应 strpbrk()。</li><li>wcsrchr() 从末尾开始在宽字符串中查找宽字符，对应 strrchr()。</li><li>wcsspn() 从宽字符串前面的集合中计算字符，对应 strspn()。</li><li>wcsstr() 在另一个宽字符串中找到一个宽字符串，对应 strstr()。</li><li>wcstod() 将宽字符串转换为 double，对应 strtod()。</li><li>wcstof() 将宽字符串转换为 float，对应 strtof()。</li><li>wcstok() 标记一个宽字符串，对应 strtok()。</li><li>wcstold() 将宽字符串转换为 long double，对应 strtold()。</li><li>wcstoll() 将宽字符串转换为 long long，对应 strtoll()。</li><li>wcstol() 将宽字符串转换为 long，对应 strtol()。</li><li>wcstoull() 将宽字符串转换为 unsigned long long，对应 strtoull()。</li><li>wcstoul() 将宽字符串转换为 unsigned long，对应 strtoul()。</li><li>wcsxfrm() 转换宽字符串以根据语言环境进行比较，对应 strxfrm()。</li><li>wmemcmp() 比较内存中的宽字符，对应 memcmp()。</li><li>wmemcpy() 复制宽字符内存，对应 memcpy()。</li><li>wmemmove() 复制宽字符内存，可能重叠，对应 memmove()。</li><li>wprintf() 格式化宽输出，对应 printf()。</li><li>wscanf() 格式化宽输入，对应 scanf()。</li></ul><h2 id="多字节字符专用函数" tabindex="-1"><a class="header-anchor" href="#多字节字符专用函数" aria-hidden="true">#</a> 多字节字符专用函数</h2><p>wchar.h 也定义了一些多字节字符的专用函数。</p><ul><li>mbsinit() 判断 mbstate_t 是否处于初始转换状态。</li><li>mbrlen() 给定转换状态时，计算多字节字符串的字节数，对应 mblen()。</li><li>mbrtowc() 给定转换状态时，将多字节字符转换为宽字符，对应 mbtowc()。</li><li>wctombr() 给定转换状态时，将宽字符转换为多字节字符，对应 wctomb()。</li><li>mbsrtowcs() 给定转换状态时，将多字节字符串转换为宽字符串，对应 mbstowcs()。</li><li>wcsrtombs() 给定转换状态时，将宽字符串转换为多字节字符串，对应 wcstombs()。</li></ul>`,28),e=[i];function l(p,o){return s(),a("div",null,e)}const u=n(c,[["render",l],["__file","wchar.h.html.vue"]]);export{u as default};
